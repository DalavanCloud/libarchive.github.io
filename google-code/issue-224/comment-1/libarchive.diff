Index: libarchive/archive_read_support_format_iso9660.c
===================================================================
--- libarchive/archive_read_support_format_iso9660.c	(revision 230272)
+++ libarchive/archive_read_support_format_iso9660.c	(working copy)
@@ -335,6 +335,7 @@ struct iso9660 {
 
 	int64_t		previous_number;
 	struct archive_string previous_pathname;
+	struct archive_string previous_symlink;
 
 	struct file_info		*use_files;
 	struct heap_queue		 pending_files;
@@ -1171,7 +1172,9 @@ archive_read_format_iso9660_read_header(struct arc
 	 * the same data, we have to return it as a hardlink to the
 	 * original entry. */
 	if (file->number != -1 &&
-	    file->number == iso9660->previous_number) {
+	    file->number == iso9660->previous_number &&
+	    file->symlink.s == NULL &&
+	    archive_strlen(&iso9660->previous_symlink) == 0) {
 		archive_entry_set_hardlink(entry,
 		    iso9660->previous_pathname.s);
 		archive_entry_unset_size(entry);
@@ -1227,6 +1230,7 @@ archive_read_format_iso9660_read_header(struct arc
 
 	iso9660->previous_number = file->number;
 	archive_strcpy(&iso9660->previous_pathname, iso9660->pathname.s);
+	archive_strcpy(&iso9660->previous_symlink, file->symlink.s);
 
 	/* Reset entry_bytes_remaining if the file is multi extent. */
 	iso9660->entry_content = file->contents.first;
@@ -1564,6 +1568,7 @@ archive_read_format_iso9660_cleanup(struct archive
 	free(iso9660->read_ce_req.reqs);
 	archive_string_free(&iso9660->pathname);
 	archive_string_free(&iso9660->previous_pathname);
+	archive_string_free(&iso9660->previous_symlink);
 	if (iso9660->pending_files.files)
 		free(iso9660->pending_files.files);
 #ifdef HAVE_ZLIB_H
