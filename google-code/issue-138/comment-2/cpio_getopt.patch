Additional patch to avoid name conflicts with system BSD/POSIX getopt
Also added casting from int to char to silence compiler warnings
Also added casting from LP64 long to int to silence compiler warnings


Index: tar/bsdtar.h
===================================================================
--- tar/bsdtar.h	(revision 2959)
+++ tar/bsdtar.h	(working copy)
@@ -87,7 +87,7 @@
 	/* Miscellaneous state information */
 	int		  argc;
 	char		**argv;
-	const char	 *optarg;
+	const char	 *optargs;
 	size_t		  gs_width; /* For 'list_item' in read.c */
 	size_t		  u_width; /* for 'list_item' in read.c */
 	uid_t		  user_uid; /* UID running this program */


Index: cpio/cpio.h
===================================================================
--- cpio/cpio.h	(revision 2959)
+++ cpio/cpio.h	(working copy)
@@ -43,7 +43,7 @@
  */
 struct cpio {
 	/* Option parsing */
-	const char	 *optarg;
+	const char	 *optargs;
 
 	/* Options */
 	const char	 *filename;


Index: cpio/cpio.c
===================================================================
--- cpio/cpio.c	(revision 2959)
+++ cpio/cpio.c	(working copy)
@@ -184,9 +184,9 @@
 			cpio->bytes_per_block = 5120;
 			break;
 		case 'C': /* NetBSD/OpenBSD */
-			cpio->bytes_per_block = atoi(cpio->optarg);
+			cpio->bytes_per_block = atoi(cpio->optargs);
 			if (cpio->bytes_per_block <= 0)
-				lafe_errc(1, 0, "Invalid blocksize %s", cpio->optarg);
+				lafe_errc(1, 0, "Invalid blocksize %s", cpio->optargs);
 			break;
 		case 'c': /* POSIX 1997 */
 			cpio->format = "odc";
@@ -196,34 +196,34 @@
 			break;
 		case 'E': /* NetBSD/OpenBSD */
 			lafe_include_from_file(&cpio->matching,
-			    cpio->optarg, cpio->option_null);
+			    cpio->optargs, cpio->option_null);
 			break;
 		case 'F': /* NetBSD/OpenBSD/GNU cpio */
-			cpio->filename = cpio->optarg;
+			cpio->filename = cpio->optargs;
 			break;
 		case 'f': /* POSIX 1997 */
-			lafe_exclude(&cpio->matching, cpio->optarg);
+			lafe_exclude(&cpio->matching, cpio->optargs);
 			break;
 		case 'H': /* GNU cpio (also --format) */
-			cpio->format = cpio->optarg;
+			cpio->format = cpio->optargs;
 			break;
 		case 'h':
 			long_help();
 			break;
 		case 'I': /* NetBSD/OpenBSD */
-			cpio->filename = cpio->optarg;
+			cpio->filename = cpio->optargs;
 			break;
 		case 'i': /* POSIX 1997 */
 			if (cpio->mode != '\0')
 				lafe_errc(1, 0,
 				    "Cannot use both -i and -%c", cpio->mode);
-			cpio->mode = opt;
+			cpio->mode = (char)opt;
 			break;
 		case 'J': /* GNU tar, others */
-			cpio->compress = opt;
+			cpio->compress = (char)opt;
 			break;
 		case 'j': /* GNU tar, others */
-			cpio->compress = opt;
+			cpio->compress = (char)opt;
 			break;
 		case OPTION_INSECURE:
 			cpio->extract_flags &= ~ARCHIVE_EXTRACT_SECURE_SYMLINKS;
@@ -236,7 +236,7 @@
 			cpio->option_link = 1;
 			break;
 		case OPTION_LZMA: /* GNU tar, others */
-			cpio->compress = opt;
+			cpio->compress = (char)opt;
 			break;
 		case 'm': /* POSIX 1997 */
 			cpio->extract_flags |= ARCHIVE_EXTRACT_TIME;
@@ -248,19 +248,19 @@
 			cpio->extract_flags &= ~ARCHIVE_EXTRACT_OWNER;
 			break;
 		case 'O': /* GNU cpio */
-			cpio->filename = cpio->optarg;
+			cpio->filename = cpio->optargs;
 			break;
 		case 'o': /* POSIX 1997 */
 			if (cpio->mode != '\0')
 				lafe_errc(1, 0,
 				    "Cannot use both -o and -%c", cpio->mode);
-			cpio->mode = opt;
+			cpio->mode = (char)opt;
 			break;
 		case 'p': /* POSIX 1997 */
 			if (cpio->mode != '\0')
 				lafe_errc(1, 0,
 				    "Cannot use both -p and -%c", cpio->mode);
-			cpio->mode = opt;
+			cpio->mode = (char)opt;
 			cpio->extract_flags &= ~ARCHIVE_EXTRACT_SECURE_NODOTDOT;
 			break;
 		case OPTION_PRESERVE_OWNER:
@@ -272,7 +272,7 @@
 		case 'R': /* GNU cpio, also --owner */
 			/* TODO: owner_parse should return uname/gname
 			 * also; use that to set [ug]name_override. */
-			errmsg = owner_parse(cpio->optarg, &uid, &gid);
+			errmsg = owner_parse(cpio->optargs, &uid, &gid);
 			if (errmsg) {
 				lafe_warnc(-1, "%s", errmsg);
 				usage();
@@ -314,13 +314,13 @@
 			break;
 #endif
 		case 'y': /* tar convention */
-			cpio->compress = opt;
+			cpio->compress = (char)opt;
 			break;
 		case 'Z': /* tar convention */
-			cpio->compress = opt;
+			cpio->compress = (char)opt;
 			break;
 		case 'z': /* tar convention */
-			cpio->compress = opt;
+			cpio->compress = (char)opt;
 			break;
 		default:
 			usage();

Index: cpio/cmdline.c
===================================================================
--- cpio/cmdline.c	(revision 2959)
+++ cpio/cmdline.c	(working copy)
@@ -56,7 +56,7 @@
 /*
  * Long options for cpio.  Please keep this sorted.
  */
-static const struct option {
+static const struct cpio_option {
 	const char *name;
 	int required;	/* 1 if this option requires an argument */
 	int equivalent;	/* Equivalent short option. */
@@ -104,13 +104,13 @@
 	static int state = state_start;
 	static char *opt_word;
 
-	const struct option *popt, *match = NULL, *match2 = NULL;
+	const struct cpio_option *popt, *match = NULL, *match2 = NULL;
 	const char *p, *long_prefix = "--";
 	size_t optlength;
 	int opt = '?';
 	int required = 0;
 
-	cpio->optarg = NULL;
+	cpio->optargs = NULL;
 
 	/* First time through, initialize everything. */
 	if (state == state_start) {
@@ -189,7 +189,7 @@
 				long_prefix = "-W "; /* For clearer errors. */
 			} else {
 				state = state_next_word;
-				cpio->optarg = opt_word;
+				cpio->optargs = opt_word;
 			}
 		}
 	}
@@ -203,7 +203,7 @@
 		p = strchr(opt_word, '=');
 		if (p != NULL) {
 			optlength = (size_t)(p - opt_word);
-			cpio->optarg = (char *)(uintptr_t)(p + 1);
+			cpio->optargs = (char *)(uintptr_t)(p + 1);
 		} else {
 			optlength = strlen(opt_word);
 		}
@@ -242,9 +242,9 @@
 		/* We've found a unique match; does it need an argument? */
 		if (match->required) {
 			/* Argument required: get next word if necessary. */
-			if (cpio->optarg == NULL) {
-				cpio->optarg = *cpio->argv;
-				if (cpio->optarg == NULL) {
+			if (cpio->optargs == NULL) {
+				cpio->optargs = *cpio->argv;
+				if (cpio->optargs == NULL) {
 					lafe_warnc(0,
 					    "Option %s%s requires an argument",
 					    long_prefix, match->name);
@@ -255,7 +255,7 @@
 			}
 		} else {
 			/* Argument forbidden: fail if there is one. */
-			if (cpio->optarg != NULL) {
+			if (cpio->optargs != NULL) {
 				lafe_warnc(0,
 				    "Option %s%s does not allow an argument",
 				    long_prefix, match->name);
@@ -341,7 +341,7 @@
 		} else {
 			char *end;
 			errno = 0;
-			*uid = strtoul(user, &end, 10);
+			*uid = (int)strtoul(user, &end, 10);
 			if (errno || *end != '\0') {
 				snprintf(errbuff, sizeof(errbuff),
 				    "Couldn't lookup user ``%s''", user);
@@ -359,7 +359,7 @@
 		} else {
 			char *end;
 			errno = 0;
-			*gid = strtoul(g, &end, 10);
+			*gid = (int)strtoul(g, &end, 10);
 			if (errno || *end != '\0') {
 				snprintf(errbuff, sizeof(errbuff),
 				    "Couldn't lookup group ``%s''", g);
