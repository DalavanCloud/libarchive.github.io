Index: tar/write.c
===================================================================
--- tar/write.c	(revision 2051)
+++ tar/write.c	(working copy)
@@ -448,6 +448,7 @@
 {
 	const char *arg;
 	struct archive_entry *entry, *sparse_entry;
+	unsigned int links;
 
 	/* Allocate a buffer for file data. */
 	if ((bsdtar->buff = malloc(FILEDATABUFLEN)) == NULL)
@@ -506,6 +507,17 @@
 		bsdtar->return_value = 1;
 	}
 
+	if (bsdtar->option_warn_links) {
+		while ((entry = archive_entry_partial_links(bsdtar->resolver,
+		    &links)) != NULL) {
+			safe_fprintf(stderr, "%u missing link%s for %s",
+			    links, links == 1 ? "" : "s",
+			    archive_entry_pathname(entry));
+			fprintf(stderr, "\n");
+			archive_entry_free(entry);
+		}
+	}
+
 cleanup:
 	/* Free file data buffer. */
 	free(bsdtar->buff);
Index: libarchive/archive_entry_link_resolver.c
===================================================================
--- libarchive/archive_entry_link_resolver.c	(revision 2055)
+++ libarchive/archive_entry_link_resolver.c	(working copy)
@@ -84,12 +84,17 @@
 	int			  strategy;
 };
 
+#define	NEXT_ENTRY_DEFERRED	1
+#define	NEXT_ENTRY_PARTIAL	2
+#define	NEXT_ENTRY_ALL		(NEXT_ENTRY_DEFERRED | NEXT_ENTRY_PARTIAL)
+
 static struct links_entry *find_entry(struct archive_entry_linkresolver *,
 		    struct archive_entry *);
 static void grow_hash(struct archive_entry_linkresolver *);
 static struct links_entry *insert_entry(struct archive_entry_linkresolver *,
 		    struct archive_entry *);
-static struct links_entry *next_entry(struct archive_entry_linkresolver *);
+static struct links_entry *next_entry(struct archive_entry_linkresolver *,
+    int);
 
 struct archive_entry_linkresolver *
 archive_entry_linkresolver_new(void)
@@ -156,7 +161,7 @@
 	if (res == NULL)
 		return;
 
-	while ((le = next_entry(res)) != NULL)
+	while ((le = next_entry(res, NEXT_ENTRY_ALL)) != NULL)
 		archive_entry_free(le->entry);
 	free(res->buckets);
 	free(res);
@@ -172,7 +177,7 @@
 	*f = NULL; /* Default: Don't return a second entry. */
 
 	if (*e == NULL) {
-		le = next_entry(res);
+		le = next_entry(res, NEXT_ENTRY_DEFERRED);
 		if (le != NULL) {
 			*e = le->entry;
 			le->entry = NULL;
@@ -299,7 +304,7 @@
 }
 
 static struct links_entry *
-next_entry(struct archive_entry_linkresolver *res)
+next_entry(struct archive_entry_linkresolver *res, int mode)
 {
 	struct links_entry	*le;
 	size_t			 bucket;
@@ -314,12 +319,20 @@
 
 	/* Look for next non-empty bucket in the links cache. */
 	for (bucket = 0; bucket < res->number_buckets; bucket++) {
-		le = res->buckets[bucket];
-		if (le != NULL) {
+		for (le = res->buckets[bucket]; le != NULL; le = le->next) {
+			if (le->entry != NULL &&
+			    (mode & NEXT_ENTRY_DEFERRED) == 0)
+				continue;
+			if (le->entry == NULL &&
+			    (mode & NEXT_ENTRY_PARTIAL) == 0)
+				continue;
 			/* Remove it from this hash bucket. */
 			if (le->next != NULL)
 				le->next->previous = le->previous;
-			res->buckets[bucket] = le->next;
+			if (le->previous != NULL)
+				le->previous->next = le->next;
+			else
+				res->buckets[bucket] = le->next;
 			res->number_entries--;
 			/* Defer freeing this entry. */
 			res->spare = le;
@@ -397,3 +410,32 @@
 	res->buckets = new_buckets;
 	res->number_buckets = new_size;
 }
+
+struct archive_entry *
+archive_entry_partial_links(struct archive_entry_linkresolver *res,
+    unsigned int *links)
+{
+	struct archive_entry	*e;
+	struct links_entry	*le;
+
+	/* Free a held entry. */
+	if (res->spare != NULL) {
+		archive_entry_free(res->spare->canonical);
+		archive_entry_free(res->spare->entry);
+		free(res->spare);
+		res->spare = NULL;
+	}
+
+	le = next_entry(res, NEXT_ENTRY_PARTIAL);
+	if (le != NULL) {
+		e = le->canonical;
+		if (links != NULL)
+			*links = le->links;
+		le->canonical = NULL;
+	} else {
+		e = NULL;
+		if (links != NULL)
+			*links = 0;
+	}
+	return (e);
+}
Index: libarchive/archive_entry_linkify.3
===================================================================
--- libarchive/archive_entry_linkify.3	(revision 2051)
+++ libarchive/archive_entry_linkify.3	(working copy)
@@ -22,7 +22,7 @@
 .\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 .\" SUCH DAMAGE.
 .\"
-.Dd February 20, 2010
+.Dd March 24, 2010
 .Dt archive_entry_linkify 3
 .Os
 .Sh NAME
@@ -30,8 +30,8 @@
 .Nm archive_entry_linkresolver_new ,
 .Nm archive_entry_linkresolver_set_strategy ,
 .Nm archive_entry_linkresolver_free ,
-.Nm archive_entry_linkify
-.Nd hardlink resolver functions
+.Nm archive_entry_linkify ,
+.Nm archive_entry_partial_links
 .Sh LIBRARY
 .Lb libarchive
 .Sh SYNOPSIS
@@ -53,6 +53,11 @@
 .Fa "struct archive_entry **entry"
 .Fa "struct archive_entry **sparse"
 .Fc
+.Ft struct archive_entry *
+.Fo archive_entry_partial_links
+.Fa "struct archive_entry_linkresolver *resolver"
+.Fa "unsigned int *links"
+.Fc
 .Sh DESCRIPTION
 Programs that want to create archives have to deal with hardlinks.
 Hardlinks are handled in different ways by the archive formats.
@@ -213,6 +218,14 @@
 and archive the returned entry as long as it is not
 .Dv NULL .
 .El
+.Pp
+.Fn archive_entry_partial_links
+returns an entry with positive number of remaining links and removes
+it from the internal lists.
+The number of remaining links is returned in
+.Va *links .
+If no such entry remains,
+.Dv NULL is returned.
 .Sh RETURN VALUES
 .Fn archive_entry_linkresolver_new
 returns
Index: libarchive/archive_entry.h
===================================================================
--- libarchive/archive_entry.h	(revision 2051)
+++ libarchive/archive_entry.h	(working copy)
@@ -473,7 +473,9 @@
  *      be written.
  *   4. Call archive_entry_linkify(resolver, NULL) until
  *      no more entries are returned.
- *   5. Call archive_entry_link_resolver_free(resolver) to free resources.
+ *   5. Optionally call archive_entry_link_resolver_partial to find
+ *      entries where not all links have been archived.
+ *   6. Call archive_entry_link_resolver_free(resolver) to free resources.
  *
  * The entries returned have their hardlink and size fields updated
  * appropriately.  If an entry is passed in that does not refer to
@@ -537,6 +539,9 @@
 __LA_DECL void archive_entry_linkresolver_free(struct archive_entry_linkresolver *);
 __LA_DECL void archive_entry_linkify(struct archive_entry_linkresolver *,
     struct archive_entry **, struct archive_entry **);
+__LA_DECL struct archive_entry *
+    archive_entry_partial_links(struct archive_entry_linkresolver *,
+    unsigned int *);
 
 #ifdef __cplusplus
 }
