# HG changeset patch
# User Roman Neuhauser <neuhauser@sigpipe.cz>
# Date 1299836554 -3600
# Node ID d43561518e45ef37579ef921f056831ee5348d25
# Parent  a02a64d34158e55db4c107a459e7baabe87ee08c
test for archive_read_next_header with raw format and emtpy file

diff --git a/Makefile.am b/Makefile.am
--- a/Makefile.am
+++ b/Makefile.am
@@ -252,6 +252,7 @@
 	libarchive/test/test_archive_read_close_twice.c		\
 	libarchive/test/test_archive_read_close_twice_open_fd.c	\
 	libarchive/test/test_archive_read_close_twice_open_filename.c	\
+	libarchive/test/test_archive_read_next_header_empty_raw.c	\
 	libarchive/test/test_archive_read_set_filter_option.c	\
 	libarchive/test/test_archive_read_set_format_option.c	\
 	libarchive/test/test_archive_read_set_option.c		\
diff --git a/libarchive/test/CMakeLists.txt b/libarchive/test/CMakeLists.txt
--- a/libarchive/test/CMakeLists.txt
+++ b/libarchive/test/CMakeLists.txt
@@ -17,6 +17,7 @@
     test_archive_read_close_twice.c
     test_archive_read_close_twice_open_fd.c
     test_archive_read_close_twice_open_filename.c
+    test_archive_read_next_header_empty_raw.c
     test_archive_read_set_filter_option.c
     test_archive_read_set_format_option.c
     test_archive_read_set_option.c
diff --git a/libarchive/test/test_archive_read_next_header_empty_raw.c b/libarchive/test/test_archive_read_next_header_empty_raw.c
new file mode 100644
--- /dev/null
+++ b/libarchive/test/test_archive_read_next_header_empty_raw.c
@@ -0,0 +1,56 @@
+/*-
+ * Copyright (c) 2003-2010 Tim Kientzle
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+ * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include "test.h"
+__FBSDID("$FreeBSD$");
+
+#define assertNoError(__a) \
+do { \
+assertEqualInt(ARCHIVE_OK, archive_errno(__a)); \
+assertEqualString(NULL, archive_error_string(__a)); \
+} while (0)
+
+#define assertOK(__expr) assertEqualInt(ARCHIVE_OK, __expr)
+
+#define REFFILE "test_archive_read_next_header_empty_raw"
+
+DEFINE_TEST(test_archive_read_next_header_empty_raw)
+{
+	struct archive* a = archive_read_new();
+	struct archive_entry* e;
+
+	extract_reference_file(REFFILE);
+
+	assertOK(archive_read_support_format_raw(a));
+	assertNoError(a);
+
+	assertOK(archive_read_open_filename(a, REFFILE, 0));
+	assertNoError(a);
+
+	assertEqualInt(ARCHIVE_EOF, archive_read_next_header(a, &e));
+	assertNoError(a);
+
+	archive_read_finish(a);
+}
diff --git a/libarchive/test/test_archive_read_next_header_empty_raw.uu b/libarchive/test/test_archive_read_next_header_empty_raw.uu
new file mode 100644
--- /dev/null
+++ b/libarchive/test/test_archive_read_next_header_empty_raw.uu
@@ -0,0 +1,3 @@
+begin 644 test_archive_read_next_header_empty_raw
+`
+end
