Index: libarchive/archive_write_set_format_cpio.c
===================================================================
--- libarchive/archive_write_set_format_cpio.c	(revision 2774)
+++ libarchive/archive_write_set_format_cpio.c	(working copy)
@@ -180,12 +180,12 @@
 {
 	struct cpio *cpio;
 	const char *p, *path;
-	int pathlength, ret, ret2;
+	int pathlength, ret, ret_final;
 	int64_t	ino;
 	struct cpio_header	 h;
 
 	cpio = (struct cpio *)a->format_data;
-	ret2 = ARCHIVE_OK;
+	ret_final = ARCHIVE_OK;
 
 	path = archive_entry_pathname(entry);
 	pathlength = (int)strlen(path) + 1; /* Include trailing null. */
@@ -206,6 +206,7 @@
 	}
 	format_octal(ino & 0777777, &h.c_ino, sizeof(h.c_ino));
 
+	/* TODO: Set ret_final to ARCHIVE_WARN if any of these overflow. */
 	format_octal(archive_entry_mode(entry), &h.c_mode, sizeof(h.c_mode));
 	format_octal(archive_entry_uid(entry), &h.c_uid, sizeof(h.c_uid));
 	format_octal(archive_entry_gid(entry), &h.c_gid, sizeof(h.c_gid));
@@ -226,9 +227,13 @@
 	p = archive_entry_symlink(entry);
 	if (p != NULL  &&  *p != '\0')
 		format_octal(strlen(p), &h.c_filesize, sizeof(h.c_filesize));
-	else
-		format_octal(archive_entry_size(entry),
+	else {
+		/* If the size overflows, we're screwed. */
+		ret = format_octal(archive_entry_size(entry),
 		    &h.c_filesize, sizeof(h.c_filesize));
+		if (ret)
+			return (ARCHIVE_FAILED);
+	}
 
 	ret = __archive_write_output(a, &h, sizeof(h));
 	if (ret != ARCHIVE_OK)
@@ -241,12 +246,12 @@
 	cpio->entry_bytes_remaining = archive_entry_size(entry);
 
 	/* Write the symlink now. */
-	if (p != NULL  &&  *p != '\0')
+	if (p != NULL  &&  *p != '\0') {
 		ret = __archive_write_output(a, p, strlen(p));
-
-	if (ret == ARCHIVE_OK)
-		ret = ret2;
-	return (ret);
+		if (ret != ARCHIVE_OK)
+			return (ARCHIVE_FATAL);
+	}
+	return (ret_final);
 }
 
 static ssize_t
