Index: libarchive/archive_write_set_format_cpio.c
===================================================================
--- libarchive/archive_write_set_format_cpio.c	(revision 2780)
+++ libarchive/archive_write_set_format_cpio.c	(working copy)
@@ -180,16 +180,25 @@
 {
 	struct cpio *cpio;
 	const char *p, *path;
-	int pathlength, ret, ret2;
+	int pathlength, ret, ret_final;
 	int64_t	ino;
 	struct cpio_header	 h;
 
 	cpio = (struct cpio *)a->format_data;
-	ret2 = ARCHIVE_OK;
+	ret_final = ARCHIVE_OK;
 
 	path = archive_entry_pathname(entry);
+	if (path == NULL || path[0] == '\0') {
+		archive_set_error(&a->archive, -1, "Pathname required");
+		return (ARCHIVE_FAILED);
+	}
 	pathlength = (int)strlen(path) + 1; /* Include trailing null. */
 
+	if (!archive_entry_size_is_set(entry) || archive_entry_size(entry) < 0) {
+		archive_set_error(&a->archive, -1, "Size required");
+		return (ARCHIVE_FAILED);
+	}
+
 	memset(&h, 0, sizeof(h));
 	format_octal(070707, &h.c_magic, sizeof(h.c_magic));
 	format_octal(archive_entry_dev(entry), &h.c_dev, sizeof(h.c_dev));
@@ -206,6 +215,7 @@
 	}
 	format_octal(ino & 0777777, &h.c_ino, sizeof(h.c_ino));
 
+	/* TODO: Set ret_final to ARCHIVE_WARN if any of these overflow. */
 	format_octal(archive_entry_mode(entry), &h.c_mode, sizeof(h.c_mode));
 	format_octal(archive_entry_uid(entry), &h.c_uid, sizeof(h.c_uid));
 	format_octal(archive_entry_gid(entry), &h.c_gid, sizeof(h.c_gid));
@@ -226,9 +236,16 @@
 	p = archive_entry_symlink(entry);
 	if (p != NULL  &&  *p != '\0')
 		format_octal(strlen(p), &h.c_filesize, sizeof(h.c_filesize));
-	else
-		format_octal(archive_entry_size(entry),
+	else {
+		/* If the size overflows, we're screwed. */
+		ret = format_octal(archive_entry_size(entry),
 		    &h.c_filesize, sizeof(h.c_filesize));
+		if (ret) {
+			archive_set_error(&a->archive, EFBIG,
+				"file size limit exceeded");
+			return (ARCHIVE_FAILED);
+		}
+	}
 
 	ret = __archive_write_output(a, &h, sizeof(h));
 	if (ret != ARCHIVE_OK)
@@ -241,12 +258,12 @@
 	cpio->entry_bytes_remaining = archive_entry_size(entry);
 
 	/* Write the symlink now. */
-	if (p != NULL  &&  *p != '\0')
+	if (p != NULL  &&  *p != '\0') {
 		ret = __archive_write_output(a, p, strlen(p));
-
-	if (ret == ARCHIVE_OK)
-		ret = ret2;
-	return (ret);
+		if (ret != ARCHIVE_OK)
+			return (ARCHIVE_FATAL);
+	}
+	return (ret_final);
 }
 
 static ssize_t
@@ -306,6 +323,7 @@
 	trailer = archive_entry_new();
 	/* nlink = 1 here for GNU cpio compat. */
 	archive_entry_set_nlink(trailer, 1);
+	archive_entry_set_size(trailer, 0);
 	archive_entry_set_pathname(trailer, "TRAILER!!!");
 	er = archive_write_cpio_header(a, trailer);
 	archive_entry_free(trailer);
Index: libarchive/test/test_write_format_cpio.c
===================================================================
--- libarchive/test/test_write_format_cpio.c	(revision 2780)
+++ libarchive/test/test_write_format_cpio.c	(working copy)
@@ -87,6 +87,34 @@
 	assertA(4 == archive_write_data(a, "1234", 5));
 
 	/*
+	 * Write a file with no name.
+	 */
+	assert((ae = archive_entry_new()) != NULL);
+	assertEqualInt(ARCHIVE_FAILED, archive_write_header(a, ae));
+	assert(archive_error_string(a) != NULL);
+	archive_entry_free(ae);
+
+	/*
+	 * Write a file with a name but no size.
+	 */
+	assert((ae = archive_entry_new()) != NULL);
+	archive_entry_copy_pathname(ae, "name");
+	archive_entry_unset_size(ae);
+	assertEqualInt(ARCHIVE_FAILED, archive_write_header(a, ae));
+	assert(archive_error_string(a) != NULL);
+	archive_entry_free(ae);
+
+	/*
+	 * Write a file with a name and too big size.
+	 */
+	assert((ae = archive_entry_new()) != NULL);
+	archive_entry_copy_pathname(ae, "name");
+	archive_entry_set_size(ae, 0x0000001000000000l);
+	assertEqualInt(ARCHIVE_FAILED, archive_write_header(a, ae));
+	assert(archive_error_string(a) != NULL);
+	archive_entry_free(ae);
+
+	/*
 	 * Write a directory to it.
 	 */
 	assert((ae = archive_entry_new()) != NULL);
Index: libarchive/archive_write_set_format_cpio_newc.c
===================================================================
--- libarchive/archive_write_set_format_cpio_newc.c	(revision 2780)
+++ libarchive/archive_write_set_format_cpio_newc.c	(working copy)
@@ -118,16 +118,25 @@
 	int64_t ino;
 	struct cpio *cpio;
 	const char *p, *path;
-	int pathlength, ret, ret2;
+	int pathlength, ret, ret_final;
 	struct cpio_header_newc	 h;
 	int pad;
 
 	cpio = (struct cpio *)a->format_data;
-	ret2 = ARCHIVE_OK;
+	ret_final = ARCHIVE_OK;
 
 	path = archive_entry_pathname(entry);
+	if (path == NULL || path[0] == '\0') {
+		archive_set_error(&a->archive, -1, "Pathname required");
+		return (ARCHIVE_FAILED);
+	}
 	pathlength = (int)strlen(path) + 1; /* Include trailing null. */
 
+	if (!archive_entry_size_is_set(entry) || archive_entry_size(entry) < 0) {
+		archive_set_error(&a->archive, -1, "Size required");
+		return (ARCHIVE_FAILED);
+	}
+
 	memset(&h, 0, sizeof(h));
 	format_hex(0x070701, &h.c_magic, sizeof(h.c_magic));
 	format_hex(archive_entry_devmajor(entry), &h.c_devmajor,
@@ -139,9 +148,10 @@
 	if (ino > 0xffffffff) {
 		archive_set_error(&a->archive, ERANGE,
 		    "large inode number truncated");
-		ret2 = ARCHIVE_WARN;
+		ret_final = ARCHIVE_WARN;
 	}
 
+	/* TODO: Set ret_final to ARCHIVE_WARN if any of these overflow. */
 	format_hex(ino & 0xffffffff, &h.c_ino, sizeof(h.c_ino));
 	format_hex(archive_entry_mode(entry), &h.c_mode, sizeof(h.c_mode));
 	format_hex(archive_entry_uid(entry), &h.c_uid, sizeof(h.c_uid));
@@ -167,9 +177,15 @@
 	p = archive_entry_symlink(entry);
 	if (p != NULL  &&  *p != '\0')
 		format_hex(strlen(p), &h.c_filesize, sizeof(h.c_filesize));
-	else
-		format_hex(archive_entry_size(entry),
+	else {
+		ret = format_hex(archive_entry_size(entry),
 		    &h.c_filesize, sizeof(h.c_filesize));
+		if (ret) {
+		        archive_set_error(&a->archive, EFBIG,
+                            "file size limit exceeded");
+			return (ARCHIVE_FAILED);
+                }
+	}
 
 	ret = __archive_write_output(a, &h, sizeof(h));
 	if (ret != ARCHIVE_OK)
@@ -180,10 +196,11 @@
 	if (ret != ARCHIVE_OK)
 		return (ARCHIVE_FATAL);
 	pad = PAD4(pathlength + sizeof(struct cpio_header_newc));
-	if (pad)
+	if (pad) {
 		ret = __archive_write_output(a, "\0\0\0", pad);
-	if (ret != ARCHIVE_OK)
-		return (ARCHIVE_FATAL);
+		if (ret != ARCHIVE_OK)
+			return (ARCHIVE_FATAL);
+	}
 
 	cpio->entry_bytes_remaining = archive_entry_size(entry);
 	cpio->padding = PAD4(cpio->entry_bytes_remaining);
@@ -195,11 +212,10 @@
 			return (ARCHIVE_FATAL);
 		pad = PAD4(strlen(p));
 		ret = __archive_write_output(a, "\0\0\0", pad);
+		if (ret != ARCHIVE_OK)
+			return (ARCHIVE_FATAL);
 	}
-
-	if (ret == ARCHIVE_OK)
-		ret = ret2;
-	return (ret);
+	return (ret_final);
 }
 
 static ssize_t
@@ -258,6 +274,7 @@
 
 	trailer = archive_entry_new();
 	archive_entry_set_nlink(trailer, 1);
+	archive_entry_set_size(trailer, 0);
 	archive_entry_set_pathname(trailer, "TRAILER!!!");
 	er = archive_write_newc_header(a, trailer);
 	archive_entry_free(trailer);
Index: Makefile.am
===================================================================
--- Makefile.am	(revision 2780)
+++ Makefile.am	(working copy)
@@ -357,7 +357,8 @@
 	libarchive/test/test_write_format_zip.c			\
 	libarchive/test/test_write_format_zip_empty.c		\
 	libarchive/test/test_write_format_zip_no_compression.c	\
-	libarchive/test/test_write_open_memory.c
+	libarchive/test/test_write_open_memory.c		\
+	libarchive/test/test_read_truncated_filter.c
 
 libarchive_test_CPPFLAGS= -I$(top_srcdir)/libarchive -I$(top_builddir)/libarchive/test -DLIBARCHIVE_STATIC $(PLATFORMCPPFLAGS)
 
