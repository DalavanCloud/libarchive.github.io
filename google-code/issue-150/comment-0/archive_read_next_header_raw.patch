# HG changeset patch
# User Roman Neuhauser <neuhauser@sigpipe.cz>
# Date 1300481030 -3600
# Node ID 5a9e5aa6169b87bc3535e3a998cb541333963fc0
# Parent  bfd2d1e3f9fe2a43b95d42d2bcdae257c4e17457
test archive_read_next_header with raw format

diff --git a/Makefile.am b/Makefile.am
--- a/Makefile.am
+++ b/Makefile.am
@@ -247,6 +247,7 @@
 	libarchive/test/test_archive_read_close_twice_open_fd.c	\
 	libarchive/test/test_archive_read_close_twice_open_filename.c	\
 	libarchive/test/test_archive_read_next_header_empty.c	\
+	libarchive/test/test_archive_read_next_header_raw.c	\
 	libarchive/test/test_archive_read_set_filter_option.c	\
 	libarchive/test/test_archive_read_set_format_option.c	\
 	libarchive/test/test_archive_read_set_option.c		\
diff --git a/libarchive/test/CMakeLists.txt b/libarchive/test/CMakeLists.txt
--- a/libarchive/test/CMakeLists.txt
+++ b/libarchive/test/CMakeLists.txt
@@ -18,6 +18,7 @@
     test_archive_read_close_twice_open_fd.c
     test_archive_read_close_twice_open_filename.c
     test_archive_read_next_header_empty.c
+    test_archive_read_next_header_raw.c
     test_archive_read_set_filter_option.c
     test_archive_read_set_format_option.c
     test_archive_read_set_option.c
diff --git a/libarchive/test/test_archive_read_next_header_raw.c b/libarchive/test/test_archive_read_next_header_raw.c
new file mode 100644
--- /dev/null
+++ b/libarchive/test/test_archive_read_next_header_raw.c
@@ -0,0 +1,65 @@
+/*-
+ * Copyright (c) 2011 Tim Kientzle
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+ * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include "test.h"
+__FBSDID("$FreeBSD$");
+
+#define DATA "random garbage for testing purposes"
+
+static const char data[sizeof(DATA)] = DATA;
+
+static void
+test(int skip_explicitely)
+{
+	struct archive* a = archive_read_new();
+	struct archive_entry* e;
+
+	assertEqualInt(ARCHIVE_OK, archive_read_support_format_raw(a));
+	assertEqualInt(0, archive_errno(a));
+	assertEqualString(NULL, archive_error_string(a));
+
+	assertEqualInt(ARCHIVE_OK, archive_read_open_memory(a, (void*) data,
+	    sizeof(data)));
+	assertEqualString(NULL, archive_error_string(a));
+
+	assertEqualInt(ARCHIVE_OK, archive_read_next_header(a, &e));
+	assertEqualInt(0, archive_errno(a));
+	assertEqualString(NULL, archive_error_string(a));
+
+	if (skip_explicitely)
+		assertEqualInt(ARCHIVE_OK, archive_read_data_skip(a));
+
+	assertEqualInt(ARCHIVE_EOF, archive_read_next_header(a, &e));
+	assertEqualInt(0, archive_errno(a));
+	assertEqualString(NULL, archive_error_string(a));
+
+	archive_read_free(a);
+}
+
+DEFINE_TEST(test_archive_read_next_header_raw)
+{
+	test(1);
+	test(0);
+}
