--- a/libarchive/archive_write_set_format_xar.c
+++ b/libarchive/archive_write_set_format_xar.c
@@ -684,21 +684,19 @@
 
 		archive_string_empty(&(xar->cur_file->script));
 		if (rsize > 2 && b[0] == '#' && b[1] == '!') {
-			char path[PATH_MAX];
-			size_t i, end, off;
+			size_t i, off, ssize;
 
-			end = sizeof(path);
-			if (end > rsize)
-				end = rsize;
 			off = 2;
 			if (b[off] == ' ')
 				off++;
-			for (i = off; i < end && b[i] != '\0' &&
+			for (i = off; b[i] != '\0' &&
 			    b[i] != '\n' && b[i] != '\r' &&
-			    b[i] != ' ' && b[i] != '\t'; i++)
-				path[i - off] = b[i];
-			path[i - off] = '\0';
-			archive_strcpy(&(xar->cur_file->script), path);
+			    b[i] != ' ' && b[i] != '\t'; i++) {
+			}
+			ssize = i - off;
+			if (ssize > rsize)
+				ssize = rsize;
+			archive_strncpy(&(xar->cur_file->script), b + off, (int)ssize);
 		}
 	}
 #endif
--- a/libarchive/test/test_sparse_basic.c
+++ b/libarchive/test/test_sparse_basic.c
@@ -360,7 +360,7 @@
 
 DEFINE_TEST(test_sparse_basic)
 {
-	char cwd[PATH_MAX+1];
+	char *cwd;
 	struct archive *a;
 	/*
 	 * The alignment of the hole of sparse files deeply depends
@@ -420,7 +420,12 @@
 
 	/* Check if the filesystem where CWD on can
 	 * report the number of the holes of a sparse file. */
-	if (!assert(getcwd(cwd, sizeof(cwd)-1) != NULL))
+#ifdef PATH_MAX
+	cwd = getcwd(NULL, PATH_MAX);/* Solaris getcwd needs the size. */
+#else
+	cwd = getcwd(NULL, 0);
+#endif
+	if (!assert(cwd != NULL))
 		return;
 	if (!is_sparse_supported(cwd)) {
 		skipping("This filesystem or platform do not support "
@@ -450,4 +455,6 @@
 	verify_sparse_file2(a, "file0", sparse_file0, 5, 1);
 
 	assertEqualInt(ARCHIVE_OK, archive_read_free(a));
+
+	free(cwd);
 }
