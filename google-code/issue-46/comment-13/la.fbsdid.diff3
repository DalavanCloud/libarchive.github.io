Index: libarchive_fe/lafe_platform.h
===================================================================
--- libarchive_fe/lafe_platform.h	(revision 1563)
+++ libarchive_fe/lafe_platform.h	(working copy)
@@ -42,10 +42,10 @@
 #include "config.h"
 #endif
 
-/* No non-FreeBSD platform will have __FBSDID, so just define it here. */
-#ifdef __FreeBSD__
+/* Most non-FreeBSD platforms won't have __FBSDID, so just define it here. */
+#if defined(HAVE_DECL_FBSDID)
 #include <sys/cdefs.h>  /* For __FBSDID */
-#elif !defined(__FBSDID)
+#else
 /* Just leaving this macro replacement empty leads to a dangling semicolon. */
 #define	__FBSDID(a)     struct _undefined_hack
 #endif
Index: tar/test/test.h
===================================================================
--- tar/test/test.h	(revision 1563)
+++ tar/test/test.h	(working copy)
@@ -107,15 +107,13 @@
 #include <stdint.h>
 #endif
 
-/* FreeBSD */
-#ifdef __FreeBSD__
+/* Most non-FreeBSD platforms won't have __FBSDID, so just define it here. */
+#if defined(HAVE_DECL_FBSDID)
 #include <sys/cdefs.h>  /* For __FBSDID */
 #else
-/* Surprisingly, some non-FreeBSD platforms define __FBSDID. */
-#ifndef __FBSDID
+/* Just leaving this macro replacement empty leads to a dangling semicolon. */
 #define	__FBSDID(a)     struct _undefined_hack
 #endif
-#endif
 
 #ifndef O_BINARY
 #define	O_BINARY 0
Index: tar/getdate.c
===================================================================
--- tar/getdate.c	(revision 1563)
+++ tar/getdate.c	(working copy)
@@ -27,10 +27,8 @@
 **  This code is in the public domain and has no copyright.
 */
 
-#ifdef __FreeBSD__
-#include <sys/cdefs.h>
+#include "bsdtar_platform.h"
 __FBSDID("$FreeBSD$");
-#endif
 
 #include <ctype.h>
 #include <stdio.h>
Index: tar/bsdtar_platform.h
===================================================================
--- tar/bsdtar_platform.h	(revision 1563)
+++ tar/bsdtar_platform.h	(working copy)
@@ -42,8 +42,8 @@
 #include "config.h"
 #endif
 
-/* No non-FreeBSD platform will have __FBSDID, so just define it here. */
-#ifdef __FreeBSD__
+/* Most non-FreeBSD platforms won't have __FBSDID, so just define it here. */
+#if defined(HAVE_DECL_FBSDID)
 #include <sys/cdefs.h>  /* For __FBSDID */
 #else
 /* Just leaving this macro replacement empty leads to a dangling semicolon. */
Index: cpio/test/test.h
===================================================================
--- cpio/test/test.h	(revision 1563)
+++ cpio/test/test.h	(working copy)
@@ -107,15 +107,13 @@
 #include <stdint.h>
 #endif
 
-/* FreeBSD */
-#ifdef __FreeBSD__
+/* Most non-FreeBSD platforms won't have __FBSDID, so just define it here. */
+#if defined(HAVE_DECL_FBSDID)
 #include <sys/cdefs.h>  /* For __FBSDID */
 #else
-/* Surprisingly, some non-FreeBSD platforms define __FBSDID. */
-#ifndef __FBSDID
+/* Just leaving this macro replacement empty leads to a dangling semicolon. */
 #define	__FBSDID(a)     struct _undefined_hack
 #endif
-#endif
 
 #ifndef O_BINARY
 #define	O_BINARY 0
Index: cpio/cpio_platform.h
===================================================================
--- cpio/cpio_platform.h	(revision 1563)
+++ cpio/cpio_platform.h	(working copy)
@@ -42,10 +42,10 @@
 #include "config.h"
 #endif
 
-/* No non-FreeBSD platform will have __FBSDID, so just define it here. */
-#ifdef __FreeBSD__
+/* Most non-FreeBSD platforms won't have __FBSDID, so just define it here. */
+#if defined(HAVE_DECL_FBSDID)
 #include <sys/cdefs.h>  /* For __FBSDID */
-#elif !defined(__FBSDID)
+#else
 /* Just leaving this macro replacement empty leads to a dangling semicolon. */
 #define	__FBSDID(a)     struct _undefined_hack
 #endif
Index: build/cmake/config.h.in
===================================================================
--- build/cmake/config.h.in	(revision 1563)
+++ build/cmake/config.h.in	(working copy)
@@ -102,6 +102,10 @@
    don't. */
 #cmakedefine HAVE_DECL_UINT64_MAX 1
 
+/* Define to 1 if you have the declaration of `__FBSDID', and to 0 if you
+   don't. */
+#cmakedefine HAVE_DECL_FBSDID 1
+
 /* Define to 1 if you have the <direct.h> header file. */
 #cmakedefine HAVE_DIRECT_H 1
 
@@ -453,6 +457,9 @@
 /* Define to 1 if you have the <sys/acl.h> header file. */
 #cmakedefine HAVE_SYS_ACL_H 1
 
+/* Define to 1 if you have the <sys/cdefs.h> header file. */
+#cmakedefine HAVE_SYS_CDEFS_H 1
+
 /* Define to 1 if you have the <sys/dir.h> header file, and it defines `DIR'.
    */
 #cmakedefine HAVE_SYS_DIR_H 1
Index: configure.ac
===================================================================
--- configure.ac	(revision 1563)
+++ configure.ac	(working copy)
@@ -196,7 +196,7 @@
 AC_CHECK_HEADERS([inttypes.h io.h langinfo.h limits.h linux/fs.h])
 AC_CHECK_HEADERS([locale.h paths.h poll.h pwd.h regex.h signal.h stdarg.h])
 AC_CHECK_HEADERS([stdint.h stdlib.h string.h])
-AC_CHECK_HEADERS([sys/acl.h sys/extattr.h sys/ioctl.h sys/mkdev.h])
+AC_CHECK_HEADERS([sys/acl.h sys/cdefs.h sys/extattr.h sys/ioctl.h sys/mkdev.h])
 AC_CHECK_HEADERS([sys/param.h sys/poll.h sys/select.h sys/time.h sys/utime.h])
 AC_CHECK_HEADERS([time.h unistd.h utime.h wchar.h wctype.h windows.h])
 
@@ -371,6 +371,15 @@
 #endif
 ])
 
+# FreeBSD and certain other systems use the __FBSDID macro to obtain a version ID
+AC_CHECK_DECL([__FBSDID],
+[AC_DEFINE(HAVE_DECL_FBSDID, 1, [Define to 1 if sys/cdefs.h includes __FBSDID])],
+[],
+[#if HAVE_SYS_CDEFS_H
+#include <sys/cdefs.h>
+#endif
+])
+
 # Check for dirent.d_namlen field explicitly
 # (This is a bit more straightforward than, if not quite as portable as,
 # the recipe given by the autoconf maintainers.)
Index: libarchive/archive_platform.h
===================================================================
--- libarchive/archive_platform.h	(revision 1563)
+++ libarchive/archive_platform.h	(working copy)
@@ -66,8 +66,8 @@
  * headers as required.
  */
 
-/* No non-FreeBSD platform will have __FBSDID, so just define it here. */
-#ifdef __FreeBSD__
+/* Most non-FreeBSD platforms won't have __FBSDID, so just define it here. */
+#if defined(HAVE_DECL_FBSDID)
 #include <sys/cdefs.h>  /* For __FBSDID */
 #else
 /* Just leaving this macro replacement empty leads to a dangling semicolon. */
Index: libarchive/test/test.h
===================================================================
--- libarchive/test/test.h	(revision 1563)
+++ libarchive/test/test.h	(working copy)
@@ -106,15 +106,13 @@
 #include <stdint.h>
 #endif
 
-/* FreeBSD */
-#ifdef __FreeBSD__
+/* Most non-FreeBSD platforms won't have __FBSDID, so just define it here. */
+#if defined(HAVE_DECL_FBSDID)
 #include <sys/cdefs.h>  /* For __FBSDID */
 #else
-/* Surprisingly, some non-FreeBSD platforms define __FBSDID. */
-#ifndef __FBSDID
+/* Just leaving this macro replacement empty leads to a dangling semicolon. */
 #define	__FBSDID(a)     struct _undefined_hack
 #endif
-#endif
 
 #ifndef O_BINARY
 #define	O_BINARY 0
Index: CMakeLists.txt
===================================================================
--- CMakeLists.txt	(revision 1563)
+++ CMakeLists.txt	(working copy)
@@ -228,6 +228,7 @@
 LA_CHECK_INCLUDE_FILE("string.h" HAVE_STRING_H)
 LA_CHECK_INCLUDE_FILE("strings.h" HAVE_STRINGS_H)
 LA_CHECK_INCLUDE_FILE("sys/acl.h" HAVE_SYS_ACL_H)
+LA_CHECK_INCLUDE_FILE("sys/cdefs.h" HAVE_SYS_CDEFS_H)
 LA_CHECK_INCLUDE_FILE("sys/extattr.h" HAVE_SYS_EXTATTR_H)
 LA_CHECK_INCLUDE_FILE("sys/ioctl.h" HAVE_SYS_IOCTL_H)
 LA_CHECK_INCLUDE_FILE("sys/mkdev.h" HAVE_SYS_MKDEV_H)
@@ -401,25 +402,26 @@
 #
 # Check defines
 #
-CHECK_SYMBOL_EXISTS(EFTYPE           "errno.h"    HAVE_EFTYPE)
-CHECK_SYMBOL_EXISTS(EILSEQ           "errno.h"    HAVE_EILSEQ)
-CHECK_SYMBOL_EXISTS(D_MD_ORDER       "langinfo.h" HAVE_D_MD_ORDER)
-CHECK_SYMBOL_EXISTS(optarg           "unistd.h"   HAVE_DECL_OPTARG)
-CHECK_SYMBOL_EXISTS(optind           "unistd.h"   HAVE_DECL_OPTIND)
+CHECK_SYMBOL_EXISTS(EFTYPE           "errno.h"     HAVE_EFTYPE)
+CHECK_SYMBOL_EXISTS(EILSEQ           "errno.h"     HAVE_EILSEQ)
+CHECK_SYMBOL_EXISTS(D_MD_ORDER       "langinfo.h"  HAVE_D_MD_ORDER)
+CHECK_SYMBOL_EXISTS(optarg           "unistd.h"    HAVE_DECL_OPTARG)
+CHECK_SYMBOL_EXISTS(optind           "unistd.h"    HAVE_DECL_OPTIND)
 IF(HAVE_STDINT_H)
-  CHECK_SYMBOL_EXISTS(INT64_MAX      "stdint.h"   HAVE_DECL_INT64_MAX)
-  CHECK_SYMBOL_EXISTS(INT64_MIN      "stdint.h"   HAVE_DECL_INT64_MIN)
-  CHECK_SYMBOL_EXISTS(UINT32_MAX     "stdint.h"   HAVE_DECL_UINT32_MAX)
-  CHECK_SYMBOL_EXISTS(UINT64_MAX     "stdint.h"   HAVE_DECL_UINT64_MAX)
-  CHECK_SYMBOL_EXISTS(SIZE_MAX       "stdint.h"   HAVE_DECL_SIZE_MAX)
+  CHECK_SYMBOL_EXISTS(INT64_MAX      "stdint.h"    HAVE_DECL_INT64_MAX)
+  CHECK_SYMBOL_EXISTS(INT64_MIN      "stdint.h"    HAVE_DECL_INT64_MIN)
+  CHECK_SYMBOL_EXISTS(UINT32_MAX     "stdint.h"    HAVE_DECL_UINT32_MAX)
+  CHECK_SYMBOL_EXISTS(UINT64_MAX     "stdint.h"    HAVE_DECL_UINT64_MAX)
+  CHECK_SYMBOL_EXISTS(SIZE_MAX       "stdint.h"    HAVE_DECL_SIZE_MAX)
 ELSE(HAVE_STDINT_H)
-  CHECK_SYMBOL_EXISTS(INT64_MAX      "limits.h"   HAVE_DECL_INT64_MAX)
-  CHECK_SYMBOL_EXISTS(INT64_MIN      "limits.h"   HAVE_DECL_INT64_MIN)
-  CHECK_SYMBOL_EXISTS(UINT32_MAX     "limits.h"   HAVE_DECL_UINT32_MAX)
-  CHECK_SYMBOL_EXISTS(UINT64_MAX     "limits.h"   HAVE_DECL_UINT64_MAX)
-  CHECK_SYMBOL_EXISTS(SIZE_MAX       "limits.h"   HAVE_DECL_SIZE_MAX)
+  CHECK_SYMBOL_EXISTS(INT64_MAX      "limits.h"    HAVE_DECL_INT64_MAX)
+  CHECK_SYMBOL_EXISTS(INT64_MIN      "limits.h"    HAVE_DECL_INT64_MIN)
+  CHECK_SYMBOL_EXISTS(UINT32_MAX     "limits.h"    HAVE_DECL_UINT32_MAX)
+  CHECK_SYMBOL_EXISTS(UINT64_MAX     "limits.h"    HAVE_DECL_UINT64_MAX)
+  CHECK_SYMBOL_EXISTS(SIZE_MAX       "limits.h"    HAVE_DECL_SIZE_MAX)
 ENDIF(HAVE_STDINT_H)
-CHECK_SYMBOL_EXISTS(SSIZE_MAX        "limits.h"   HAVE_DECL_SSIZE_MAX)
+CHECK_SYMBOL_EXISTS(SSIZE_MAX        "limits.h"    HAVE_DECL_SSIZE_MAX)
+CHECK_SYMBOL_EXISTS(__FBSDID         "sys/cdefs.h" HAVE_DECL_FBSDID)
 
 #
 # Check struct members
