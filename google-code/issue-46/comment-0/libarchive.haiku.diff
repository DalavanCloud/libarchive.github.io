Index: cpio/test/test.h
===================================================================
--- cpio/test/test.h	(revision 1549)
+++ cpio/test/test.h	(working copy)
@@ -101,6 +101,12 @@
 # define NLINKS_INACCURATE_FOR_DIRS
 #endif
 
+/* Haiku OS */
+#if defined(__HAIKU__)
+/* Haiku has typedefs in stdint.h (needed for int64_t) */
+#include <stdint.h>
+#endif
+
 /* FreeBSD */
 #ifdef __FreeBSD__
 #include <sys/cdefs.h>  /* For __FBSDID */
Index: libarchive/archive_platform.h
===================================================================
--- libarchive/archive_platform.h	(revision 1549)
+++ libarchive/archive_platform.h	(working copy)
@@ -60,6 +60,10 @@
 #include "archive_windows.h"
 #endif
 
+#if defined(__HAIKU__)
+#include "archive_haiku.h"
+#endif
+
 /*
  * The config files define a lot of feature macros.  The following
  * uses those macros to select/define replacements and include key
Index: libarchive/archive_haiku.h
===================================================================
--- libarchive/archive_haiku.h	(revision 0)
+++ libarchive/archive_haiku.h	(revision 0)
@@ -0,0 +1,43 @@
+/*-
+ * Copyright (c) 2009 Chris Roberts
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer
+ *    in this position and unchanged.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+ * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * $FreeBSD$
+ */
+
+#ifndef __LIBARCHIVE_BUILD
+#error This header is only to be used internally to libarchive.
+#endif
+
+
+#ifndef LIBARCHIVE_ARCHIVE_HAIKU_H_INCLUDED
+#define LIBARCHIVE_ARCHIVE_HAIKU_H_INCLUDED
+
+/* Replacement for major/minor/makedev. */
+#define major(x) ((int)(0x00ff & ((x) >> 8)))
+#define minor(x) ((int)(0xffff00ff & (x)))
+#define makedev(maj,min) ((0xff00 & ((maj)<<8))|(0xffff00ff & (min)))
+
+
+#endif /* LIBARCHIVE_ARCHIVE_HAIKU_H_INCLUDED */
Index: libarchive/test/test_write_disk_times.c
===================================================================
--- libarchive/test/test_write_disk_times.c	(revision 1549)
+++ libarchive/test/test_write_disk_times.c	(working copy)
@@ -53,7 +53,11 @@
 	assertEqualInt(ARCHIVE_OK, archive_write_finish_entry(a));
 	archive_entry_free(ae);
 	/* Verify */
+#if defined(__HAIKU__)
+	skipping("skipping atime test");
+#else
 	assertFileAtime("file1", 123456, 0);
+#endif
 	assertFileMtime("file1", 234567, 0);
 
 	/*
@@ -67,7 +71,11 @@
 	assertEqualInt(ARCHIVE_OK, archive_write_finish_entry(a));
 	archive_entry_free(ae);
 	assertFileMtime("file2", 234567, 0);
+#if defined(__HAIKU__)
+	skipping("skipping atime test");
+#else
 	assertFileAtimeRecent("file2");
+#endif
 
 	/*
 	 * atime specified, but not mtime
@@ -80,7 +88,11 @@
 	assertEqualInt(ARCHIVE_OK, archive_write_finish_entry(a));
 	archive_entry_free(ae);
 	/* Verify: Current mtime and atime as specified. */
+#if defined(__HAIKU__)
+	skipping("skipping atime test");
+#else
 	assertFileAtime("file3", 345678, 0);
+#endif
 	assertFileMtimeRecent("file3");
 
 	/*
@@ -93,7 +105,11 @@
 	assertEqualInt(ARCHIVE_OK, archive_write_finish_entry(a));
 	archive_entry_free(ae);
 	/* Verify: Current mtime and atime. */
+#if defined(__HAIKU__)
+	skipping("skipping atime test");
+#else
 	assertFileAtimeRecent("file4");
+#endif
 	assertFileMtimeRecent("file4");
 
 #if defined(__FreeBSD__)
Index: libarchive/test/test_read_disk.c
===================================================================
--- libarchive/test/test_read_disk.c	(revision 1549)
+++ libarchive/test/test_read_disk.c	(working copy)
@@ -115,6 +115,10 @@
 		skipping("standard uname/gname lookup; typically no user with uid=0 on cygwin platform");
 		i = 0;
 		p = zero_groups[0]; /* avoid unused warnings */
+#elif defined(__HAIKU__)
+		skipping("standard uname/gname lookup; uid=0 can have any username on Haiku OS");
+		i = 0;
+		p = zero_groups[0]; /* avoid unused warnings */
 #else
 		/* XXX Someday, we may need to generalize this the
 		 * same way we generalized the group name check below.
Index: libarchive/test/test_write_disk_hardlink.c
===================================================================
--- libarchive/test/test_write_disk_hardlink.c	(revision 1549)
+++ libarchive/test/test_write_disk_hardlink.c	(working copy)
@@ -45,6 +45,8 @@
 {
 #if ARCHIVE_VERSION_NUMBER < 1009000
 	skipping("archive_write_disk_hardlink tests");
+#elif defined(__HAIKU__)
+	skipping("archive_write_disk_hardlink; hardlinks are not supported on bfs");
 #else
 	static const char data[]="abcdefghijklmnopqrstuvwxyz";
 	struct archive *ad;
