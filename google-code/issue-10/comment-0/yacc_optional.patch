Index: CMakeLists.txt
===================================================================
--- CMakeLists.txt	(revision 677)
+++ CMakeLists.txt	(working copy)
@@ -66,6 +66,8 @@
   IF ("YACC" MATCHES "^YACC-NOTFOUND$")
     MESSAGE(STATUS "yacc/bison not found; you will not be able to regenerate " ${_cfile} " from " ${_yaccfile})
   ELSE ("YACC" MATCHES "^YACC-NOTFOUND$")
+    SET(HAVE_YACC 1)
+    ADD_DEFINITIONS(-DHAVE_YACC)
     GET_FILENAME_COMPONENT(_path ${_yaccfile} PATH)
     GET_FILENAME_COMPONENT(_name ${_yaccfile} NAME_WE)
     SET(_basename "${_path}/${_name}")
@@ -756,7 +758,6 @@
     tar/bsdtar.h
     tar/bsdtar_platform.h
     tar/cmdline.c
-    tar/getdate.c
     tar/matching.c
     tar/read.c
     tar/siginfo.c
@@ -766,6 +767,9 @@
     tar/util.c
     tar/write.c
   )
+  IF (HAVE_YACC OR EXISTS "tar/getdate.c")
+    LIST(APPEND bsdtar_SOURCES tar/getdate.c)
+  ENDIF (HAVE_YACC OR EXISTS "tar/getdate.c")
   IF(WIN32)
     LIST(APPEND bsdtar_SOURCES tar/bsdtar_windows.c)
     LIST(APPEND bsdtar_SOURCES tar/bsdtar_windows.h)
@@ -787,7 +791,6 @@
 ############################################
 IF(ENABLE_TAR AND ENABLE_TEST)
   SET(bsdtar_test_SOURCES
-    tar/getdate.c
     tar/test/main.c
     tar/test/test.h
     tar/test/test_0.c
@@ -804,6 +807,9 @@
     tar/test/test_symlink_dir.c
     tar/test/test_version.c
   )
+  IF (HAVE_YACC OR EXISTS "tar/getdate.c")
+    LIST(APPEND bsdtar_SOURCES tar/getdate.c)
+  ENDIF (HAVE_YACC OR EXISTS "tar/getdate.c")
   IF(WIN32)
     LIST(APPEND bsdtar_test_SOURCES tar/bsdtar_windows.c)
     LIST(APPEND bsdtar_test_SOURCES tar/bsdtar_windows.h)
Index: tar/bsdtar.c
===================================================================
--- tar/bsdtar.c	(revision 677)
+++ tar/bsdtar.c	(working copy)
@@ -81,9 +81,20 @@
 #define	_PATH_DEFTAPE "/dev/tape"
 #endif
 
-/* External function to parse a date/time string (from getdate.y) */
-time_t get_date(const char *);
+#ifdef HAVE_YACC
+	/* External function to parse a date/time string (from getdate.y) */
+	time_t get_date(const char *);
+#endif
 
+time_t bsdtar_getdate(struct bsdtar * bsdtar, const char * text) {
+#ifdef HAVE_YACC
+	return get_date(text);
+#else
+	bsdtar_errc(bsdtar, 1, 0, "No get_date() implementation (missing yacc in compile?).");
+	return -1; /* Keeps compiler happy. */
+#endif
+}
+
 static void		 long_help(struct bsdtar *);
 static void		 only_mode(struct bsdtar *, const char *opt,
 			     const char *valid);
@@ -306,7 +317,7 @@
 		 * TODO: Add corresponding "older" options to reverse these.
 		 */
 		case OPTION_NEWER_CTIME: /* GNU tar */
-			bsdtar->newer_ctime_sec = get_date(bsdtar->optarg);
+			bsdtar->newer_ctime_sec = bsdtar_getdate(bsdtar, bsdtar->optarg);
 			break;
 		case OPTION_NEWER_CTIME_THAN:
 			{
@@ -320,7 +331,7 @@
 			}
 			break;
 		case OPTION_NEWER_MTIME: /* GNU tar */
-			bsdtar->newer_mtime_sec = get_date(bsdtar->optarg);
+			bsdtar->newer_mtime_sec = bsdtar_getdate(bsdtar, bsdtar->optarg);
 			break;
 		case OPTION_NEWER_MTIME_THAN:
 			{
Index: tar/test/test_getdate.c
===================================================================
--- tar/test/test_getdate.c	(revision 677)
+++ tar/test/test_getdate.c	(working copy)
@@ -29,7 +29,15 @@
  * Verify that the getdate() function works.
  */
 
-time_t get_date(const char *);
+#ifdef HAVE_YACC
+	/* External function to parse a date/time string (from getdate.y) */
+	time_t get_date(const char *);
+#else
+	time_t get_date(const char * dummy) {
+		/* Fail tests that require getdate.c if it was not generated. */
+		return -12345;
+	}
+#endif
 
 DEFINE_TEST(test_getdate)
 {
