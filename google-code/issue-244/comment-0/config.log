This file contains any messages produced by compilers while
running configure, to aid debugging if configure makes a mistake.

It was created by libarchive configure 3.0.3, which was
generated by GNU Autoconf 2.68.  Invocation command line was

  $ ./configure --prefix=/cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/install

## --------- ##
## Platform. ##
## --------- ##

hostname = WIN-IH1FCG0JVB1
uname -m = i686
uname -r = 1.7.10(0.259/5/3)
uname -s = CYGWIN_NT-6.1-WOW64
uname -v = 2012-02-05 12:36

/usr/bin/uname -p = unknown
/bin/uname -X     = unknown

/bin/arch              = i686
/usr/bin/arch -k       = unknown
/usr/convex/getsysinfo = unknown
/usr/bin/hostinfo      = unknown
/bin/machine           = unknown
/usr/bin/oslevel       = unknown
/bin/universe          = unknown

PATH: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/gdal/install/bin
PATH: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/libtool/install/bin
PATH: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/automake/install/bin
PATH: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/autoconf/install/bin
PATH: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/mpich2/install/bin
PATH: C
PATH: /MATLAB/R2011b/bin
PATH: /usr/local/bin
PATH: /usr/bin
PATH: /cygdrive/c/Windows/Microsoft.NET/Framework64/v4.0.30319
PATH: /cygdrive/c/Windows/Microsoft.NET/Framework/v4.0.30319
PATH: /cygdrive/c/Windows/Microsoft.NET/Framework64/v3.5
PATH: /cygdrive/c/Windows/Microsoft.NET/Framework/v3.5
PATH: /cygdrive/c/Program Files (x86)/Microsoft Visual Studio 10.0/Common7/IDE
PATH: /cygdrive/c/Program Files (x86)/Microsoft Visual Studio 10.0/Common7/Tools
PATH: /cygdrive/c/Program Files (x86)/Microsoft Visual Studio 10.0/VC/Bin/amd64
PATH: /cygdrive/c/Program Files (x86)/Microsoft Visual Studio 10.0/VC/Bin/VCPackages
PATH: /cygdrive/c/Program Files/Microsoft SDKs/Windows/v7.1/Bin/NETFX 4.0 Tools/x64
PATH: /cygdrive/c/Program Files/Microsoft SDKs/Windows/v7.1/Bin/x64
PATH: /cygdrive/c/Program Files/Microsoft SDKs/Windows/v7.1/Bin
PATH: /cygdrive/c/Windows/system32
PATH: /cygdrive/c/Windows
PATH: /cygdrive/c/Windows/System32/Wbem
PATH: /cygdrive/c/Windows/System32/WindowsPowerShell/v1.0
PATH: /cygdrive/c/Program Files/Microsoft Windows Performance Toolkit
PATH: /cygdrive/c/MATLAB/R2011b/runtime/win64
PATH: /cygdrive/c/MATLAB/R2011b/bin
PATH: /cygdrive/c/issm-uci/trunk-jpl/cron
PATH: /cygdrive/c/issm-uci/trunk-jpl/scripts
PATH: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/dakota/install/bin
PATH: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/doxygen/install/bin
PATH: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/mtoc/install
PATH: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/yams/install
PATH: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bamg/install
PATH: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/tex2im/install
PATH: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/sowing/install/bin
PATH: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/chaco/install
PATH: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/meshpart/install
PATH: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/scotch/install
PATH: /Bin
PATH: .
PATH: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/ssh
PATH: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/valgrind/install/bin
PATH: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/graphviz/install/bin
PATH: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/cppcheck/install
PATH: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/mercurial/install/
PATH: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bbftp/install/bin
PATH: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/adic/install/bin
PATH: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/eclipse/install
PATH: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/appscan/install/bin
PATH: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/appscan/bin]
PATH: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/cppcheck/install/bin
PATH: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/rats/install/bin
PATH: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/dyson/
PATH: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/cmake/install/bin
PATH: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/shapelib/install/exec
PATH: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/cccl/install/bin


## ----------- ##
## Core tests. ##
## ----------- ##

configure:2753: checking for a BSD-compatible install
configure:2821: result: /usr/bin/install -c
configure:2832: checking whether build environment is sane
configure:2882: result: yes
configure:3023: checking for a thread-safe mkdir -p
configure:3062: result: /usr/bin/mkdir -p
configure:3075: checking for gawk
configure:3091: found /usr/bin/gawk
configure:3102: result: gawk
configure:3113: checking whether make sets $(MAKE)
configure:3135: result: yes
configure:3277: checking build system type
configure:3291: result: i686-pc-cygwin
configure:3311: checking host system type
configure:3324: result: i686-pc-cygwin
configure:3423: checking for gcc
configure:3453: result: no
configure:3516: checking for cc
configure:3563: result: no
configure:3619: checking for cl.exe
configure:3635: found /cygdrive/c/Program Files (x86)/Microsoft Visual Studio 10.0/VC/Bin/amd64/cl.exe
configure:3646: result: cl.exe
configure:3679: checking for C compiler version
configure:3688: cl.exe --version >&5
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '--version'
cl : Command line error D8003 : missing source filename
configure:3699: $? = 2
configure:3688: cl.exe -v >&5
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-v'
cl : Command line error D8003 : missing source filename
configure:3699: $? = 2
configure:3688: cl.exe -V >&5
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line error D8004 : '/V' requires an argument
configure:3699: $? = 2
configure:3688: cl.exe -qversion >&5
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-qversion'
cl : Command line error D8003 : missing source filename
configure:3699: $? = 2
configure:3719: checking whether the C compiler works
configure:3741: cl.exe    conftest.c  >&5
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
conftest.obj 
configure:3745: $? = 0
configure:3793: result: yes
configure:3796: checking for C compiler default output file name
configure:3798: result: conftest.exe
configure:3804: checking for suffix of executables
configure:3811: cl.exe -o conftest.exe    conftest.c  >&5
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
configure:3815: $? = 0
configure:3837: result: .exe
configure:3859: checking whether we are cross compiling
configure:3867: cl.exe -o conftest.exe    conftest.c  >&5
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
configure:3871: $? = 0
configure:3878: ./conftest.exe
configure:3882: $? = 0
configure:3897: result: no
configure:3902: checking for suffix of object files
configure:3924: cl.exe -c   conftest.c >&5
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

conftest.c
configure:3928: $? = 0
configure:3949: result: obj
configure:3953: checking whether we are using the GNU C compiler
configure:3972: cl.exe -c   conftest.c >&5
conftest.c
conftest.c(20) : error C2065: 'choke' : undeclared identifier
conftest.c(20) : error C2146: syntax error : missing ';' before identifier 'me'
conftest.c(23) : error C2065: 'me' : undeclared identifier
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

configure:3972: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| /* end confdefs.h.  */
| 
| int
| main ()
| {
| #ifndef __GNUC__
|        choke me
| #endif
| 
|   ;
|   return 0;
| }
configure:3981: result: no
configure:3990: checking whether cl.exe accepts -g
configure:4010: cl.exe -c -g  conftest.c >&5
conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:4010: $? = 0
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| /* end confdefs.h.  */
| 
| int
| main ()
| {
| 
|   ;
|   return 0;
| }
configure:4025: cl.exe -c   conftest.c >&5
conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

configure:4025: $? = 0
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| /* end confdefs.h.  */
| 
| int
| main ()
| {
| 
|   ;
|   return 0;
| }
configure:4041: cl.exe -c -g  conftest.c >&5
conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:4041: $? = 0
configure:4051: result: yes
configure:4068: checking for cl.exe option to accept ISO C89
configure:4132: cl.exe  -c -g  conftest.c >&5
conftest.c
conftest.c(61) : warning C4113: 'char *(__cdecl *)()' differs in parameter lists from 'char *(__cdecl *)(char **,int)'
conftest.c(61) : warning C4113: 'char *(__cdecl *)()' differs in parameter lists from 'char *(__cdecl *)(char **,int)'
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:4132: $? = 0
configure:4145: result: none needed
configure:4176: checking for style of include used by make
configure:4204: result: GNU
configure:4229: checking dependency style of cl.exe
configure:4339: result: none
configure:4355: checking whether cl.exe and cc understand -c and -o together
configure:4386: cl.exe -c conftest.c -o conftest2.obj >&5
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
conftest.c
configure:4390: $? = 0
configure:4458: result: no
configure:4486: checking how to run the C preprocessor
configure:4517: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -E  conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

conftest.c
configure:4517: $? = 0
configure:4531: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -E  conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

conftest.c
conftest.c(16) : fatal error C1083: Cannot open include file: 'ac_nonexistent.h': No such file or directory
configure:4531: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| /* end confdefs.h.  */
| #include <ac_nonexistent.h>
configure:4556: result: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -E
configure:4576: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -E  conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

conftest.c
configure:4576: $? = 0
configure:4590: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -E  conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

conftest.c
conftest.c(16) : fatal error C1083: Cannot open include file: 'ac_nonexistent.h': No such file or directory
configure:4590: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| /* end confdefs.h.  */
| #include <ac_nonexistent.h>
configure:4619: checking for grep that handles long lines and -e
configure:4677: result: /usr/bin/grep
configure:4682: checking for egrep
configure:4744: result: /usr/bin/grep -E
configure:4749: checking for ANSI C header files
configure:4769: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:4769: $? = 0
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

conftest.c
configure:4842: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
configure:4842: $? = 0
configure:4842: ./conftest.exe
configure:4842: $? = 0
configure:4853: result: yes
configure:4866: checking for sys/types.h
configure:4866: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:4866: $? = 0
configure:4866: result: yes
configure:4866: checking for sys/stat.h
configure:4866: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:4866: $? = 0
configure:4866: result: yes
configure:4866: checking for stdlib.h
configure:4866: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:4866: $? = 0
configure:4866: result: yes
configure:4866: checking for string.h
configure:4866: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:4866: $? = 0
configure:4866: result: yes
configure:4866: checking for memory.h
configure:4866: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:4866: $? = 0
configure:4866: result: yes
configure:4866: checking for strings.h
configure:4866: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(56) : fatal error C1083: Cannot open include file: 'strings.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:4866: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| 
| #include <strings.h>
configure:4866: result: no
configure:4866: checking for inttypes.h
configure:4866: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(56) : fatal error C1083: Cannot open include file: 'inttypes.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:4866: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| 
| #include <inttypes.h>
configure:4866: result: no
configure:4866: checking for stdint.h
configure:4866: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:4866: $? = 0
configure:4866: result: yes
configure:4866: checking for unistd.h
configure:4866: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(57) : fatal error C1083: Cannot open include file: 'unistd.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:4866: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| 
| #include <unistd.h>
configure:4866: result: no
configure:4879: checking minix/config.h usability
configure:4879: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(56) : fatal error C1083: Cannot open include file: 'minix/config.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:4879: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <minix/config.h>
configure:4879: result: no
configure:4879: checking minix/config.h presence
configure:4879: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -E  conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

conftest.c
conftest.c(23) : fatal error C1083: Cannot open include file: 'minix/config.h': No such file or directory
configure:4879: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| /* end confdefs.h.  */
| #include <minix/config.h>
configure:4879: result: no
configure:4879: checking for minix/config.h
configure:4879: result: no
configure:4900: checking whether it is safe to define __EXTENSIONS__
configure:4918: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:4918: $? = 0
configure:4925: result: yes
configure:4986: checking for as
configure:5002: found /usr/bin/as
configure:5013: result: as
configure:5078: checking for dlltool
configure:5094: found /usr/bin/dlltool
configure:5105: result: dlltool
configure:5170: checking for objdump
configure:5186: found /usr/bin/objdump
configure:5197: result: objdump
configure:5288: checking how to print strings
configure:5315: result: printf
configure:5336: checking for a sed that does not truncate output
configure:5400: result: /usr/bin/sed
configure:5418: checking for fgrep
configure:5480: result: /usr/bin/grep -F
configure:5548: checking for non-GNU ld
configure:5582: result: /Bin/ld
configure:5589: checking if the linker (/Bin/ld) is GNU ld
configure:5604: result: yes
configure:5616: checking for BSD- or MS-compatible name lister (nm)
configure:5665: result: /usr/bin/nm -B
configure:5795: checking the name lister (/usr/bin/nm -B) interface
configure:5802: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:5805: /usr/bin/nm -B "conftest.obj"
/usr/bin/nm: conftest.obj: File format not recognized
configure:5808: output
configure:5815: result: BSD nm
configure:5818: checking whether ln -s works
configure:5822: result: yes
configure:5830: checking the maximum length of command line arguments
configure:5960: result: 8192
configure:5977: checking whether the shell understands some XSI constructs
configure:5987: result: yes
configure:5991: checking whether the shell understands "+="
configure:5997: result: yes
configure:6032: checking how to convert i686-pc-cygwin file names to i686-pc-cygwin format
configure:6072: result: func_convert_file_noop
configure:6079: checking how to convert i686-pc-cygwin file names to toolchain format
configure:6099: result: func_convert_file_noop
configure:6106: checking for /Bin/ld option to reload object files
configure:6113: result: -r
configure:6187: checking for objdump
configure:6214: result: objdump
configure:6243: checking how to recognize dependent libraries
configure:6445: result: file_magic ^x86 archive import|^x86 DLL
configure:6530: checking for dlltool
configure:6557: result: dlltool
configure:6587: checking how to associate runtime and link libraries
configure:6614: result: func_cygming_dll_for_implib
configure:6674: checking for ar
configure:6690: found /usr/bin/ar
configure:6701: result: ar
configure:6738: checking for archiver @FILE support
configure:6755: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:6755: $? = 0
configure:6758: ar cru libconftest.a @conftest.lst >&5
configure:6761: $? = 0
configure:6766: ar cru libconftest.a @conftest.lst >&5
ar: conftest.obj: No such file or directory
configure:6769: $? = 1
configure:6781: result: @
configure:6839: checking for strip
configure:6855: found /usr/bin/strip
configure:6866: result: strip
configure:6938: checking for ranlib
configure:6954: found /usr/bin/ranlib
configure:6965: result: ranlib
configure:7067: checking command to parse /usr/bin/nm -B output from /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe object
configure:7187: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
conftest.c
configure:7190: $? = 0
configure:7194: /usr/bin/nm -B conftest.obj \| sed -n -e 's/^.*[ ]\([ABCDGIRSTW][ABCDGIRSTW]*\)[ ][ ]*\([_A-Za-z][_A-Za-z0-9]*\)$/\1 \2 \2/p' | sed '/ __gnu_lto/d' \> conftest.nm
/usr/bin/nm: conftest.obj: File format not recognized
configure:7197: $? = 0
cannot run sed -n -e 's/^.*[	 ]\([ABCDGIRSTW][ABCDGIRSTW]*\)[	 ][	 ]*\([_A-Za-z][_A-Za-z0-9]*\)$/\1 \2 \2/p' | sed '/ __gnu_lto/d'
configure:7187: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
conftest.c
configure:7190: $? = 0
configure:7194: /usr/bin/nm -B conftest.obj \| sed -n -e 's/^.*[ ]\([ABCDGIRSTW][ABCDGIRSTW]*\)[ ][ ]*_\([_A-Za-z][_A-Za-z0-9]*\)$/\1 _\2 \2/p' | sed '/ __gnu_lto/d' \> conftest.nm
/usr/bin/nm: conftest.obj: File format not recognized
configure:7197: $? = 0
cannot run sed -n -e 's/^.*[	 ]\([ABCDGIRSTW][ABCDGIRSTW]*\)[	 ][	 ]*_\([_A-Za-z][_A-Za-z0-9]*\)$/\1 _\2 \2/p' | sed '/ __gnu_lto/d'
configure:7301: result: failed
configure:7341: checking for sysroot
configure:7371: result: no
configure:7627: checking for mt
configure:7643: found /cygdrive/c/Program Files/Microsoft SDKs/Windows/v7.1/Bin/x64/mt
configure:7654: result: mt
configure:7677: checking if mt is a manifest tool
configure:7683: mt '-?'
configure:7691: result: yes
configure:8330: checking for dlfcn.h
configure:8330: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(62) : fatal error C1083: Cannot open include file: 'dlfcn.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:8330: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| 
| #include <dlfcn.h>
configure:8330: result: no
configure:8534: checking for objdir
configure:8549: result: .libs
conftest.c
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
configure:9178: checking for /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe option to produce PIC
configure:9185: result: -DDLL_EXPORT -DPIC
configure:9193: checking if /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe PIC flag -DDLL_EXPORT -DPIC works
configure:9211: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  -DDLL_EXPORT -DPIC -DPIC conftest.c >&5
conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:9215: $? = 0
configure:9228: result: yes
configure:9257: checking if /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe static flag  works
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:9285: result: yes
configure:9300: checking if /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe supports -c -o file.obj
configure:9321: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  -o out/conftest2.obj conftest.c >&5
conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:9325: $? = 0
configure:9347: result: yes
configure:9355: checking if /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe supports -c -o file.obj
configure:9402: result: yes
configure:9435: checking whether the /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe linker (/Bin/ld) supports shared libraries
configure:10588: result: yes
configure:10828: checking dynamic linker characteristics
configure:11561: result: Win32 link.exe
configure:11668: checking how to hardcode library paths into programs
configure:11693: result: immediate
configure:12233: checking whether stripping libraries is possible
configure:12238: result: yes
configure:12273: checking if libtool supports shared libraries
configure:12275: result: yes
configure:12278: checking whether to build shared libraries
configure:12299: result: yes
configure:12302: checking whether to build static libraries
configure:12306: result: yes
configure:12386: checking for strip
configure:12413: result: strip
configure:12588: checking for dirent.h that defines DIR
configure:12607: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(32) : fatal error C1083: Cannot open include file: 'dirent.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:12607: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| /* end confdefs.h.  */
| #include <sys/types.h>
| #include <dirent.h>
| 
| int
| main ()
| {
| if ((DIR *) 0)
| return 0;
|   ;
|   return 0;
| }
configure:12615: result: no
configure:12588: checking for sys/ndir.h that defines DIR
configure:12607: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(32) : fatal error C1083: Cannot open include file: 'sys/ndir.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:12607: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| /* end confdefs.h.  */
| #include <sys/types.h>
| #include <sys/ndir.h>
| 
| int
| main ()
| {
| if ((DIR *) 0)
| return 0;
|   ;
|   return 0;
| }
configure:12615: result: no
configure:12588: checking for sys/dir.h that defines DIR
configure:12607: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(32) : fatal error C1083: Cannot open include file: 'sys/dir.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:12607: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| /* end confdefs.h.  */
| #include <sys/types.h>
| #include <sys/dir.h>
| 
| int
| main ()
| {
| if ((DIR *) 0)
| return 0;
|   ;
|   return 0;
| }
configure:12615: result: no
configure:12588: checking for ndir.h that defines DIR
configure:12607: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(32) : fatal error C1083: Cannot open include file: 'ndir.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:12607: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| /* end confdefs.h.  */
| #include <sys/types.h>
| #include <ndir.h>
| 
| int
| main ()
| {
| if ((DIR *) 0)
| return 0;
|   ;
|   return 0;
| }
configure:12615: result: no
configure:12685: checking for library containing opendir
configure:12716: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol opendir referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:12716: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| /* end confdefs.h.  */
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char opendir ();
| int
| main ()
| {
| return opendir ();
|   ;
|   return 0;
| }
configure:12716: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c -lx   >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol opendir referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
cl : Command line warning D9002 : ignoring unknown option '-lx'
configure:12716: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| /* end confdefs.h.  */
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char opendir ();
| int
| main ()
| {
| return opendir ();
|   ;
|   return 0;
| }
configure:12733: result: no
configure:12743: checking for sys/wait.h that is POSIX.1 compatible
configure:12769: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(32) : fatal error C1083: Cannot open include file: 'sys/wait.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:12769: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| /* end confdefs.h.  */
| #include <sys/types.h>
| #include <sys/wait.h>
| #ifndef WEXITSTATUS
| # define WEXITSTATUS(stat_val) ((unsigned int) (stat_val) >> 8)
| #endif
| #ifndef WIFEXITED
| # define WIFEXITED(stat_val) (((stat_val) & 255) == 0)
| #endif
| 
| int
| main ()
| {
|   int s;
|   wait (&s);
|   s = WIFEXITED (s) ? WEXITSTATUS (s) : 1;
|   ;
|   return 0;
| }
configure:12776: result: no
configure:12787: checking acl/libacl.h usability
configure:12787: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(64) : fatal error C1083: Cannot open include file: 'acl/libacl.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:12787: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <acl/libacl.h>
configure:12787: result: no
configure:12787: checking acl/libacl.h presence
configure:12787: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -E  conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

conftest.c
conftest.c(31) : fatal error C1083: Cannot open include file: 'acl/libacl.h': No such file or directory
configure:12787: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| /* end confdefs.h.  */
| #include <acl/libacl.h>
configure:12787: result: no
configure:12787: checking for acl/libacl.h
configure:12787: result: no
configure:12787: checking attr/xattr.h usability
configure:12787: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(64) : fatal error C1083: Cannot open include file: 'attr/xattr.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:12787: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <attr/xattr.h>
configure:12787: result: no
configure:12787: checking attr/xattr.h presence
configure:12787: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -E  conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

conftest.c
conftest.c(31) : fatal error C1083: Cannot open include file: 'attr/xattr.h': No such file or directory
configure:12787: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| /* end confdefs.h.  */
| #include <attr/xattr.h>
configure:12787: result: no
configure:12787: checking for attr/xattr.h
configure:12787: result: no
configure:12787: checking copyfile.h usability
configure:12787: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(64) : fatal error C1083: Cannot open include file: 'copyfile.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:12787: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <copyfile.h>
configure:12787: result: no
configure:12787: checking copyfile.h presence
configure:12787: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -E  conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

conftest.c
conftest.c(31) : fatal error C1083: Cannot open include file: 'copyfile.h': No such file or directory
configure:12787: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| /* end confdefs.h.  */
| #include <copyfile.h>
configure:12787: result: no
configure:12787: checking for copyfile.h
configure:12787: result: no
configure:12787: checking ctype.h usability
configure:12787: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:12787: $? = 0
configure:12787: result: yes
configure:12787: checking ctype.h presence
configure:12787: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -E  conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

conftest.c
configure:12787: $? = 0
configure:12787: result: yes
configure:12787: checking for ctype.h
configure:12787: result: yes
configure:12800: checking errno.h usability
configure:12800: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:12800: $? = 0
configure:12800: result: yes
configure:12800: checking errno.h presence
configure:12800: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -E  conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

conftest.c
configure:12800: $? = 0
configure:12800: result: yes
configure:12800: checking for errno.h
configure:12800: result: yes
configure:12800: checking ext2fs/ext2_fs.h usability
configure:12800: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(66) : fatal error C1083: Cannot open include file: 'ext2fs/ext2_fs.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:12800: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <ext2fs/ext2_fs.h>
configure:12800: result: no
configure:12800: checking ext2fs/ext2_fs.h presence
configure:12800: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -E  conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

conftest.c
conftest.c(33) : fatal error C1083: Cannot open include file: 'ext2fs/ext2_fs.h': No such file or directory
configure:12800: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| /* end confdefs.h.  */
| #include <ext2fs/ext2_fs.h>
configure:12800: result: no
configure:12800: checking for ext2fs/ext2_fs.h
configure:12800: result: no
configure:12800: checking fcntl.h usability
configure:12800: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:12800: $? = 0
configure:12800: result: yes
configure:12800: checking fcntl.h presence
configure:12800: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -E  conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

conftest.c
configure:12800: $? = 0
configure:12800: result: yes
configure:12800: checking for fcntl.h
configure:12800: result: yes
configure:12800: checking grp.h usability
configure:12800: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(67) : fatal error C1083: Cannot open include file: 'grp.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:12800: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <grp.h>
configure:12800: result: no
configure:12800: checking grp.h presence
configure:12800: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -E  conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

conftest.c
conftest.c(34) : fatal error C1083: Cannot open include file: 'grp.h': No such file or directory
configure:12800: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| /* end confdefs.h.  */
| #include <grp.h>
configure:12800: result: no
configure:12800: checking for grp.h
configure:12800: result: no
configure:12811: checking whether EXT2_IOC_GETFLAGS is usable
configure:12828: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(34) : fatal error C1083: Cannot open include file: 'sys/ioctl.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:12828: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| /* end confdefs.h.  */
| #include <sys/ioctl.h>
| #include <ext2fs/ext2_fs.h>
| int
| main ()
| {
| int x = EXT2_IOC_GETFLAGS
|   ;
|   return 0;
| }
configure:12835: result: no
configure:12849: checking for inttypes.h
configure:12849: result: no
configure:12849: checking io.h usability
configure:12849: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:12849: $? = 0
configure:12849: result: yes
configure:12849: checking io.h presence
configure:12849: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -E  conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

conftest.c
configure:12849: $? = 0
configure:12849: result: yes
configure:12849: checking for io.h
configure:12849: result: yes
configure:12849: checking langinfo.h usability
configure:12849: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(68) : fatal error C1083: Cannot open include file: 'langinfo.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:12849: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <langinfo.h>
configure:12849: result: no
configure:12849: checking langinfo.h presence
configure:12849: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -E  conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

conftest.c
conftest.c(35) : fatal error C1083: Cannot open include file: 'langinfo.h': No such file or directory
configure:12849: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| /* end confdefs.h.  */
| #include <langinfo.h>
configure:12849: result: no
configure:12849: checking for langinfo.h
configure:12849: result: no
configure:12849: checking limits.h usability
configure:12849: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:12849: $? = 0
configure:12849: result: yes
configure:12849: checking limits.h presence
configure:12849: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -E  conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

conftest.c
configure:12849: $? = 0
configure:12849: result: yes
configure:12849: checking for limits.h
configure:12849: result: yes
configure:12862: checking linux/fiemap.h usability
configure:12862: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(69) : fatal error C1083: Cannot open include file: 'linux/fiemap.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:12862: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <linux/fiemap.h>
configure:12862: result: no
configure:12862: checking linux/fiemap.h presence
configure:12862: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -E  conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

conftest.c
conftest.c(36) : fatal error C1083: Cannot open include file: 'linux/fiemap.h': No such file or directory
configure:12862: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| /* end confdefs.h.  */
| #include <linux/fiemap.h>
configure:12862: result: no
configure:12862: checking for linux/fiemap.h
configure:12862: result: no
configure:12862: checking linux/fs.h usability
configure:12862: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(69) : fatal error C1083: Cannot open include file: 'linux/fs.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:12862: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <linux/fs.h>
configure:12862: result: no
configure:12862: checking linux/fs.h presence
configure:12862: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -E  conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

conftest.c
conftest.c(36) : fatal error C1083: Cannot open include file: 'linux/fs.h': No such file or directory
configure:12862: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| /* end confdefs.h.  */
| #include <linux/fs.h>
configure:12862: result: no
configure:12862: checking for linux/fs.h
configure:12862: result: no
configure:12862: checking linux/magic.h usability
configure:12862: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(69) : fatal error C1083: Cannot open include file: 'linux/magic.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:12862: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <linux/magic.h>
configure:12862: result: no
configure:12862: checking linux/magic.h presence
configure:12862: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -E  conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

conftest.c
conftest.c(36) : fatal error C1083: Cannot open include file: 'linux/magic.h': No such file or directory
configure:12862: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| /* end confdefs.h.  */
| #include <linux/magic.h>
configure:12862: result: no
configure:12862: checking for linux/magic.h
configure:12862: result: no
configure:12875: checking locale.h usability
configure:12875: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:12875: $? = 0
configure:12875: result: yes
configure:12875: checking locale.h presence
configure:12875: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -E  conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

conftest.c
configure:12875: $? = 0
configure:12875: result: yes
configure:12875: checking for locale.h
configure:12875: result: yes
configure:12875: checking paths.h usability
configure:12875: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(70) : fatal error C1083: Cannot open include file: 'paths.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:12875: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <paths.h>
configure:12875: result: no
configure:12875: checking paths.h presence
configure:12875: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -E  conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

conftest.c
conftest.c(37) : fatal error C1083: Cannot open include file: 'paths.h': No such file or directory
configure:12875: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| /* end confdefs.h.  */
| #include <paths.h>
configure:12875: result: no
configure:12875: checking for paths.h
configure:12875: result: no
configure:12875: checking poll.h usability
configure:12875: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(70) : fatal error C1083: Cannot open include file: 'poll.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:12875: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <poll.h>
configure:12875: result: no
configure:12875: checking poll.h presence
configure:12875: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -E  conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

conftest.c
conftest.c(37) : fatal error C1083: Cannot open include file: 'poll.h': No such file or directory
configure:12875: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| /* end confdefs.h.  */
| #include <poll.h>
configure:12875: result: no
configure:12875: checking for poll.h
configure:12875: result: no
configure:12875: checking pwd.h usability
configure:12875: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(70) : fatal error C1083: Cannot open include file: 'pwd.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:12875: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <pwd.h>
configure:12875: result: no
configure:12875: checking pwd.h presence
configure:12875: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -E  conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

conftest.c
conftest.c(37) : fatal error C1083: Cannot open include file: 'pwd.h': No such file or directory
configure:12875: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| /* end confdefs.h.  */
| #include <pwd.h>
configure:12875: result: no
configure:12875: checking for pwd.h
configure:12875: result: no
configure:12875: checking regex.h usability
configure:12875: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(70) : fatal error C1083: Cannot open include file: 'regex.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:12875: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <regex.h>
configure:12875: result: no
configure:12875: checking regex.h presence
configure:12875: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -E  conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

conftest.c
conftest.c(37) : fatal error C1083: Cannot open include file: 'regex.h': No such file or directory
configure:12875: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| /* end confdefs.h.  */
| #include <regex.h>
configure:12875: result: no
configure:12875: checking for regex.h
configure:12875: result: no
configure:12875: checking signal.h usability
configure:12875: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:12875: $? = 0
configure:12875: result: yes
configure:12875: checking signal.h presence
configure:12875: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -E  conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

conftest.c
configure:12875: $? = 0
configure:12875: result: yes
configure:12875: checking for signal.h
configure:12875: result: yes
configure:12875: checking stdarg.h usability
configure:12875: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:12875: $? = 0
configure:12875: result: yes
configure:12875: checking stdarg.h presence
configure:12875: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -E  conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

conftest.c
configure:12875: $? = 0
configure:12875: result: yes
configure:12875: checking for stdarg.h
configure:12875: result: yes
configure:12888: checking for stdint.h
configure:12888: result: yes
configure:12888: checking for stdlib.h
configure:12888: result: yes
configure:12888: checking for string.h
configure:12888: result: yes
configure:12901: checking sys/acl.h usability
configure:12901: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(75) : fatal error C1083: Cannot open include file: 'sys/acl.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:12901: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <sys/acl.h>
configure:12901: result: no
configure:12901: checking sys/acl.h presence
configure:12901: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -E  conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

conftest.c
conftest.c(42) : fatal error C1083: Cannot open include file: 'sys/acl.h': No such file or directory
configure:12901: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| /* end confdefs.h.  */
| #include <sys/acl.h>
configure:12901: result: no
configure:12901: checking for sys/acl.h
configure:12901: result: no
configure:12901: checking sys/cdefs.h usability
configure:12901: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(75) : fatal error C1083: Cannot open include file: 'sys/cdefs.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:12901: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <sys/cdefs.h>
configure:12901: result: no
configure:12901: checking sys/cdefs.h presence
configure:12901: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -E  conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

conftest.c
conftest.c(42) : fatal error C1083: Cannot open include file: 'sys/cdefs.h': No such file or directory
configure:12901: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| /* end confdefs.h.  */
| #include <sys/cdefs.h>
configure:12901: result: no
configure:12901: checking for sys/cdefs.h
configure:12901: result: no
configure:12901: checking sys/extattr.h usability
configure:12901: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(75) : fatal error C1083: Cannot open include file: 'sys/extattr.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:12901: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <sys/extattr.h>
configure:12901: result: no
configure:12901: checking sys/extattr.h presence
configure:12901: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -E  conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

conftest.c
conftest.c(42) : fatal error C1083: Cannot open include file: 'sys/extattr.h': No such file or directory
configure:12901: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| /* end confdefs.h.  */
| #include <sys/extattr.h>
configure:12901: result: no
configure:12901: checking for sys/extattr.h
configure:12901: result: no
configure:12901: checking sys/ioctl.h usability
configure:12901: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(75) : fatal error C1083: Cannot open include file: 'sys/ioctl.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:12901: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <sys/ioctl.h>
configure:12901: result: no
configure:12901: checking sys/ioctl.h presence
configure:12901: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -E  conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

conftest.c
conftest.c(42) : fatal error C1083: Cannot open include file: 'sys/ioctl.h': No such file or directory
configure:12901: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| /* end confdefs.h.  */
| #include <sys/ioctl.h>
configure:12901: result: no
configure:12901: checking for sys/ioctl.h
configure:12901: result: no
configure:12914: checking sys/mkdev.h usability
configure:12914: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(75) : fatal error C1083: Cannot open include file: 'sys/mkdev.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:12914: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <sys/mkdev.h>
configure:12914: result: no
configure:12914: checking sys/mkdev.h presence
configure:12914: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -E  conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

conftest.c
conftest.c(42) : fatal error C1083: Cannot open include file: 'sys/mkdev.h': No such file or directory
configure:12914: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| /* end confdefs.h.  */
| #include <sys/mkdev.h>
configure:12914: result: no
configure:12914: checking for sys/mkdev.h
configure:12914: result: no
configure:12914: checking sys/mount.h usability
configure:12914: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(75) : fatal error C1083: Cannot open include file: 'sys/mount.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:12914: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <sys/mount.h>
configure:12914: result: no
configure:12914: checking sys/mount.h presence
configure:12914: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -E  conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

conftest.c
conftest.c(42) : fatal error C1083: Cannot open include file: 'sys/mount.h': No such file or directory
configure:12914: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| /* end confdefs.h.  */
| #include <sys/mount.h>
configure:12914: result: no
configure:12914: checking for sys/mount.h
configure:12914: result: no
configure:12927: checking sys/param.h usability
configure:12927: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(75) : fatal error C1083: Cannot open include file: 'sys/param.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:12927: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <sys/param.h>
configure:12927: result: no
configure:12927: checking sys/param.h presence
configure:12927: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -E  conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

conftest.c
conftest.c(42) : fatal error C1083: Cannot open include file: 'sys/param.h': No such file or directory
configure:12927: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| /* end confdefs.h.  */
| #include <sys/param.h>
configure:12927: result: no
configure:12927: checking for sys/param.h
configure:12927: result: no
configure:12927: checking sys/poll.h usability
configure:12927: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(75) : fatal error C1083: Cannot open include file: 'sys/poll.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:12927: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <sys/poll.h>
configure:12927: result: no
configure:12927: checking sys/poll.h presence
configure:12927: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -E  conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

conftest.c
conftest.c(42) : fatal error C1083: Cannot open include file: 'sys/poll.h': No such file or directory
configure:12927: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| /* end confdefs.h.  */
| #include <sys/poll.h>
configure:12927: result: no
configure:12927: checking for sys/poll.h
configure:12927: result: no
configure:12927: checking sys/select.h usability
configure:12927: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(75) : fatal error C1083: Cannot open include file: 'sys/select.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:12927: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <sys/select.h>
configure:12927: result: no
configure:12927: checking sys/select.h presence
configure:12927: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -E  conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

conftest.c
conftest.c(42) : fatal error C1083: Cannot open include file: 'sys/select.h': No such file or directory
configure:12927: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| /* end confdefs.h.  */
| #include <sys/select.h>
configure:12927: result: no
configure:12927: checking for sys/select.h
configure:12927: result: no
configure:12927: checking sys/statfs.h usability
configure:12927: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(75) : fatal error C1083: Cannot open include file: 'sys/statfs.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:12927: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <sys/statfs.h>
configure:12927: result: no
configure:12927: checking sys/statfs.h presence
configure:12927: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -E  conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

conftest.c
conftest.c(42) : fatal error C1083: Cannot open include file: 'sys/statfs.h': No such file or directory
configure:12927: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| /* end confdefs.h.  */
| #include <sys/statfs.h>
configure:12927: result: no
configure:12927: checking for sys/statfs.h
configure:12927: result: no
configure:12927: checking sys/statvfs.h usability
configure:12927: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(75) : fatal error C1083: Cannot open include file: 'sys/statvfs.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:12927: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <sys/statvfs.h>
configure:12927: result: no
configure:12927: checking sys/statvfs.h presence
configure:12927: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -E  conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

conftest.c
conftest.c(42) : fatal error C1083: Cannot open include file: 'sys/statvfs.h': No such file or directory
configure:12927: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| /* end confdefs.h.  */
| #include <sys/statvfs.h>
configure:12927: result: no
configure:12927: checking for sys/statvfs.h
configure:12927: result: no
configure:12940: checking sys/time.h usability
configure:12940: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(75) : fatal error C1083: Cannot open include file: 'sys/time.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:12940: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <sys/time.h>
configure:12940: result: no
configure:12940: checking sys/time.h presence
configure:12940: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -E  conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

conftest.c
conftest.c(42) : fatal error C1083: Cannot open include file: 'sys/time.h': No such file or directory
configure:12940: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| /* end confdefs.h.  */
| #include <sys/time.h>
configure:12940: result: no
configure:12940: checking for sys/time.h
configure:12940: result: no
configure:12940: checking sys/utime.h usability
configure:12940: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:12940: $? = 0
configure:12940: result: yes
configure:12940: checking sys/utime.h presence
configure:12940: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -E  conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

conftest.c
configure:12940: $? = 0
configure:12940: result: yes
configure:12940: checking for sys/utime.h
configure:12940: result: yes
configure:12940: checking sys/utsname.h usability
configure:12940: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(76) : fatal error C1083: Cannot open include file: 'sys/utsname.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:12940: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <sys/utsname.h>
configure:12940: result: no
configure:12940: checking sys/utsname.h presence
configure:12940: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -E  conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

conftest.c
conftest.c(43) : fatal error C1083: Cannot open include file: 'sys/utsname.h': No such file or directory
configure:12940: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| /* end confdefs.h.  */
| #include <sys/utsname.h>
configure:12940: result: no
configure:12940: checking for sys/utsname.h
configure:12940: result: no
configure:12940: checking sys/vfs.h usability
configure:12940: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(76) : fatal error C1083: Cannot open include file: 'sys/vfs.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:12940: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <sys/vfs.h>
configure:12940: result: no
configure:12940: checking sys/vfs.h presence
configure:12940: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -E  conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

conftest.c
conftest.c(43) : fatal error C1083: Cannot open include file: 'sys/vfs.h': No such file or directory
configure:12940: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| /* end confdefs.h.  */
| #include <sys/vfs.h>
configure:12940: result: no
configure:12940: checking for sys/vfs.h
configure:12940: result: no
configure:12953: checking time.h usability
configure:12953: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:12953: $? = 0
configure:12953: result: yes
configure:12953: checking time.h presence
configure:12953: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -E  conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

conftest.c
configure:12953: $? = 0
configure:12953: result: yes
configure:12953: checking for time.h
configure:12953: result: yes
configure:12953: checking for unistd.h
configure:12953: result: no
configure:12953: checking utime.h usability
configure:12953: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(77) : fatal error C1083: Cannot open include file: 'utime.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:12953: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <utime.h>
configure:12953: result: no
configure:12953: checking utime.h presence
configure:12953: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -E  conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

conftest.c
conftest.c(44) : fatal error C1083: Cannot open include file: 'utime.h': No such file or directory
configure:12953: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| /* end confdefs.h.  */
| #include <utime.h>
configure:12953: result: no
configure:12953: checking for utime.h
configure:12953: result: no
configure:12953: checking wchar.h usability
configure:12953: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:12953: $? = 0
configure:12953: result: yes
configure:12953: checking wchar.h presence
configure:12953: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -E  conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

conftest.c
configure:12953: $? = 0
configure:12953: result: yes
configure:12953: checking for wchar.h
configure:12953: result: yes
configure:12953: checking wctype.h usability
configure:12953: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:12953: $? = 0
configure:12953: result: yes
configure:12953: checking wctype.h presence
configure:12953: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -E  conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

conftest.c
configure:12953: $? = 0
configure:12953: result: yes
configure:12953: checking for wctype.h
configure:12953: result: yes
configure:12965: checking windows.h usability
configure:12965: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:12965: $? = 0
configure:12965: result: yes
configure:12965: checking windows.h presence
configure:12965: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -E  conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

conftest.c
configure:12965: $? = 0
configure:12965: result: yes
configure:12965: checking for windows.h
configure:12965: result: yes
configure:12979: checking for wincrypt.h
configure:12979: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:12979: $? = 0
configure:12979: result: yes
configure:12979: checking for winioctl.h
configure:12979: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:12979: $? = 0
configure:12979: result: yes
configure:13005: checking zlib.h usability
configure:13005: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(82) : fatal error C1083: Cannot open include file: 'zlib.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:13005: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <zlib.h>
configure:13005: result: no
configure:13005: checking zlib.h presence
configure:13005: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -E  conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

conftest.c
conftest.c(49) : fatal error C1083: Cannot open include file: 'zlib.h': No such file or directory
configure:13005: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| /* end confdefs.h.  */
| #include <zlib.h>
configure:13005: result: no
configure:13005: checking for zlib.h
configure:13005: result: no
configure:13015: checking for inflate in -lz
configure:13040: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c -lz   >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol inflate referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
cl : Command line warning D9002 : ignoring unknown option '-lz'
configure:13040: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| /* end confdefs.h.  */
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char inflate ();
| int
| main ()
| {
| return inflate ();
|   ;
|   return 0;
| }
configure:13049: result: no
configure:13072: checking bzlib.h usability
configure:13072: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(82) : fatal error C1083: Cannot open include file: 'bzlib.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:13072: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <bzlib.h>
configure:13072: result: no
configure:13072: checking bzlib.h presence
configure:13072: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -E  conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

conftest.c
conftest.c(49) : fatal error C1083: Cannot open include file: 'bzlib.h': No such file or directory
configure:13072: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| /* end confdefs.h.  */
| #include <bzlib.h>
configure:13072: result: no
configure:13072: checking for bzlib.h
configure:13072: result: no
configure:13082: checking for BZ2_bzDecompressInit in -lbz2
configure:13107: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c -lbz2   >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol BZ2_bzDecompressInit referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
cl : Command line warning D9002 : ignoring unknown option '-lbz2'
configure:13107: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| /* end confdefs.h.  */
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char BZ2_bzDecompressInit ();
| int
| main ()
| {
| return BZ2_bzDecompressInit ();
|   ;
|   return 0;
| }
configure:13116: result: no
configure:13139: checking lzmadec.h usability
configure:13139: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(82) : fatal error C1083: Cannot open include file: 'lzmadec.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:13139: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <lzmadec.h>
configure:13139: result: no
configure:13139: checking lzmadec.h presence
configure:13139: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -E  conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

conftest.c
conftest.c(49) : fatal error C1083: Cannot open include file: 'lzmadec.h': No such file or directory
configure:13139: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| /* end confdefs.h.  */
| #include <lzmadec.h>
configure:13139: result: no
configure:13139: checking for lzmadec.h
configure:13139: result: no
configure:13149: checking for lzmadec_decode in -llzmadec
configure:13174: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c -llzmadec   >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol lzmadec_decode referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
cl : Command line warning D9002 : ignoring unknown option '-llzmadec'
configure:13174: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| /* end confdefs.h.  */
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char lzmadec_decode ();
| int
| main ()
| {
| return lzmadec_decode ();
|   ;
|   return 0;
| }
configure:13183: result: no
configure:13206: checking for iconv.h
configure:13206: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(51) : fatal error C1083: Cannot open include file: 'iconv.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:13206: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| /* end confdefs.h.  */
| #include <stdlib.h>
| 
| #include <iconv.h>
configure:13206: result: no
configure:13289: checking for non-GNU ld
configure:13320: result: /Bin/ld
configure:13327: checking if the linker (/Bin/ld) is GNU ld
configure:13340: result: yes
configure:13347: checking for shared library run path origin
configure:13360: result: done
configure:13938: checking for iconv
configure:13962: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
conftest.c(51) : fatal error C1083: Cannot open include file: 'iconv.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:13962: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| /* end confdefs.h.  */
| 
| #include <stdlib.h>
| #include <iconv.h>
| 
| int
| main ()
| {
| iconv_t cd = iconv_open("","");
|            iconv(cd,NULL,NULL,NULL,NULL);
|            iconv_close(cd);
|   ;
|   return 0;
| }
configure:13986: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  -liconv >&5
conftest.c
conftest.c(51) : fatal error C1083: Cannot open include file: 'iconv.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
cl : Command line warning D9002 : ignoring unknown option '-liconv'
configure:13986: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| /* end confdefs.h.  */
| 
| #include <stdlib.h>
| #include <iconv.h>
| 
| int
| main ()
| {
| iconv_t cd = iconv_open("","");
|              iconv(cd,NULL,NULL,NULL,NULL);
|              iconv_close(cd);
|   ;
|   return 0;
| }
configure:13996: result: no, consider installing GNU libiconv
configure:14298: checking lzma.h usability
configure:14298: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(82) : fatal error C1083: Cannot open include file: 'lzma.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:14298: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <lzma.h>
configure:14298: result: no
configure:14298: checking lzma.h presence
configure:14298: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -E  conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

conftest.c
conftest.c(49) : fatal error C1083: Cannot open include file: 'lzma.h': No such file or directory
configure:14298: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| /* end confdefs.h.  */
| #include <lzma.h>
configure:14298: result: no
configure:14298: checking for lzma.h
configure:14298: result: no
configure:14308: checking for lzma_stream_decoder in -llzma
configure:14333: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c -llzma   >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol lzma_stream_decoder referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
cl : Command line warning D9002 : ignoring unknown option '-llzma'
configure:14333: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| /* end confdefs.h.  */
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char lzma_stream_decoder ();
| int
| main ()
| {
| return lzma_stream_decoder ();
|   ;
|   return 0;
| }
configure:14342: result: no
configure:14387: checking for xml2-config
configure:14420: result: no
configure:14474: checking for xmlInitParser in -lxml2
configure:14499: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c -lxml2   >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol xmlInitParser referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
cl : Command line warning D9002 : ignoring unknown option '-lxml2'
configure:14499: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| /* end confdefs.h.  */
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char xmlInitParser ();
| int
| main ()
| {
| return xmlInitParser ();
|   ;
|   return 0;
| }
configure:14508: result: no
configure:14523: checking libxml/xmlreader.h usability
configure:14523: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(82) : fatal error C1083: Cannot open include file: 'libxml/xmlreader.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:14523: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <libxml/xmlreader.h>
configure:14523: result: no
configure:14523: checking libxml/xmlreader.h presence
configure:14523: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -E  conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

conftest.c
conftest.c(49) : fatal error C1083: Cannot open include file: 'libxml/xmlreader.h': No such file or directory
configure:14523: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| /* end confdefs.h.  */
| #include <libxml/xmlreader.h>
configure:14523: result: no
configure:14523: checking for libxml/xmlreader.h
configure:14523: result: no
configure:14523: checking libxml/xmlwriter.h usability
configure:14523: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(82) : fatal error C1083: Cannot open include file: 'libxml/xmlwriter.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:14523: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <libxml/xmlwriter.h>
configure:14523: result: no
configure:14523: checking libxml/xmlwriter.h presence
configure:14523: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -E  conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

conftest.c
conftest.c(49) : fatal error C1083: Cannot open include file: 'libxml/xmlwriter.h': No such file or directory
configure:14523: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| /* end confdefs.h.  */
| #include <libxml/xmlwriter.h>
configure:14523: result: no
configure:14523: checking for libxml/xmlwriter.h
configure:14523: result: no
configure:14538: checking expat.h usability
configure:14538: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(82) : fatal error C1083: Cannot open include file: 'expat.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:14538: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <expat.h>
configure:14538: result: no
configure:14538: checking expat.h presence
configure:14538: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -E  conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

conftest.c
conftest.c(49) : fatal error C1083: Cannot open include file: 'expat.h': No such file or directory
configure:14538: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| /* end confdefs.h.  */
| #include <expat.h>
configure:14538: result: no
configure:14538: checking for expat.h
configure:14538: result: no
configure:14548: checking for XML_ParserCreate in -lexpat
configure:14573: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c -lexpat   >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol XML_ParserCreate referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
cl : Command line warning D9002 : ignoring unknown option '-lexpat'
configure:14573: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| /* end confdefs.h.  */
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char XML_ParserCreate ();
| int
| main ()
| {
| return XML_ParserCreate ();
|   ;
|   return 0;
| }
configure:14582: result: no
configure:14604: checking for an ANSI C-conforming const
configure:14669: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\conftest.c(78) : warning C4700: uninitialized local variable 't' used
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\conftest.c(94) : warning C4700: uninitialized local variable 'b' used
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\conftest.c(100) : warning C4700: uninitialized local variable 'cs' used
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:14669: $? = 0
configure:14676: result: yes
configure:14686: checking for uid_t in sys/types.h
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

conftest.c
configure:14705: result: no
configure:14724: checking for mode_t
configure:14724: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(87) : error C2065: 'mode_t' : undeclared identifier
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:14724: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| if (sizeof (mode_t))
| 	 return 0;
|   ;
|   return 0;
| }
configure:14724: result: no
configure:14737: checking for off_t
configure:14737: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:14737: $? = 0
configure:14737: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(88) : error C2059: syntax error : ')'
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:14737: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| if (sizeof ((off_t)))
| 	    return 0;
|   ;
|   return 0;
| }
configure:14737: result: yes
configure:14748: checking for size_t
configure:14748: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:14748: $? = 0
configure:14748: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(88) : error C2059: syntax error : ')'
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:14748: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| if (sizeof ((size_t)))
| 	    return 0;
|   ;
|   return 0;
| }
configure:14748: result: yes
configure:14759: checking for id_t
configure:14759: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(88) : error C2065: 'id_t' : undeclared identifier
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:14759: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| if (sizeof (id_t))
| 	 return 0;
|   ;
|   return 0;
| }
configure:14759: result: no
configure:14770: checking for uintptr_t
configure:14770: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:14770: $? = 0
configure:14770: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(89) : error C2059: syntax error : ')'
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:14770: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| if (sizeof ((uintptr_t)))
| 	    return 0;
|   ;
|   return 0;
| }
configure:14770: result: yes
configure:14783: checking for struct tm.tm_gmtoff
configure:14783: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(61) : error C2039: 'tm_gmtoff' : is not a member of 'tm'
        C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\INCLUDE\time.h(106) : see declaration of 'tm'
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:14783: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| /* end confdefs.h.  */
| 
| #include <time.h>
| 
| 
| int
| main ()
| {
| static struct tm ac_aggr;
| if (ac_aggr.tm_gmtoff)
| return 0;
|   ;
|   return 0;
| }
configure:14783: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(61) : error C2039: 'tm_gmtoff' : is not a member of 'tm'
        C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\INCLUDE\time.h(106) : see declaration of 'tm'
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:14783: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| /* end confdefs.h.  */
| 
| #include <time.h>
| 
| 
| int
| main ()
| {
| static struct tm ac_aggr;
| if (sizeof ac_aggr.tm_gmtoff)
| return 0;
|   ;
|   return 0;
| }
configure:14783: result: no
configure:14795: checking for struct tm.__tm_gmtoff
configure:14795: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(61) : error C2039: '__tm_gmtoff' : is not a member of 'tm'
        C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\INCLUDE\time.h(106) : see declaration of 'tm'
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:14795: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| /* end confdefs.h.  */
| 
| #include <time.h>
| 
| 
| int
| main ()
| {
| static struct tm ac_aggr;
| if (ac_aggr.__tm_gmtoff)
| return 0;
|   ;
|   return 0;
| }
configure:14795: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(61) : error C2039: '__tm_gmtoff' : is not a member of 'tm'
        C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\INCLUDE\time.h(106) : see declaration of 'tm'
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:14795: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| /* end confdefs.h.  */
| 
| #include <time.h>
| 
| 
| int
| main ()
| {
| static struct tm ac_aggr;
| if (sizeof ac_aggr.__tm_gmtoff)
| return 0;
|   ;
|   return 0;
| }
configure:14795: result: no
configure:14810: checking for struct statfs.f_namemax
configure:14810: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(54) : fatal error C1083: Cannot open include file: 'sys/param.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:14810: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| /* end confdefs.h.  */
| 
| #include <sys/param.h>
| #include <sys/mount.h>
| 
| 
| int
| main ()
| {
| static struct statfs ac_aggr;
| if (ac_aggr.f_namemax)
| return 0;
|   ;
|   return 0;
| }
configure:14810: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(54) : fatal error C1083: Cannot open include file: 'sys/param.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:14810: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| /* end confdefs.h.  */
| 
| #include <sys/param.h>
| #include <sys/mount.h>
| 
| 
| int
| main ()
| {
| static struct statfs ac_aggr;
| if (sizeof ac_aggr.f_namemax)
| return 0;
|   ;
|   return 0;
| }
configure:14810: result: no
configure:14826: checking for struct stat.st_birthtime
configure:14826: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(90) : error C2039: 'st_birthtime' : is not a member of 'stat'
        C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\INCLUDE\sys/stat.h(100) : see declaration of 'stat'
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:14826: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| static struct stat ac_aggr;
| if (ac_aggr.st_birthtime)
| return 0;
|   ;
|   return 0;
| }
configure:14826: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(90) : error C2039: 'st_birthtime' : is not a member of 'stat'
        C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\INCLUDE\sys/stat.h(100) : see declaration of 'stat'
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:14826: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| static struct stat ac_aggr;
| if (sizeof ac_aggr.st_birthtime)
| return 0;
|   ;
|   return 0;
| }
configure:14826: result: no
configure:14838: checking for struct stat.st_birthtimespec.tv_nsec
configure:14838: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(90) : error C2039: 'st_birthtimespec' : is not a member of 'stat'
        C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\INCLUDE\sys/stat.h(100) : see declaration of 'stat'
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:14838: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| static struct stat ac_aggr;
| if (ac_aggr.st_birthtimespec.tv_nsec)
| return 0;
|   ;
|   return 0;
| }
configure:14838: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(90) : error C2039: 'st_birthtimespec' : is not a member of 'stat'
        C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\INCLUDE\sys/stat.h(100) : see declaration of 'stat'
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:14838: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| static struct stat ac_aggr;
| if (sizeof ac_aggr.st_birthtimespec.tv_nsec)
| return 0;
|   ;
|   return 0;
| }
configure:14838: result: no
configure:14848: checking for struct stat.st_mtimespec.tv_nsec
configure:14848: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(90) : error C2039: 'st_mtimespec' : is not a member of 'stat'
        C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\INCLUDE\sys/stat.h(100) : see declaration of 'stat'
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:14848: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| static struct stat ac_aggr;
| if (ac_aggr.st_mtimespec.tv_nsec)
| return 0;
|   ;
|   return 0;
| }
configure:14848: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(90) : error C2039: 'st_mtimespec' : is not a member of 'stat'
        C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\INCLUDE\sys/stat.h(100) : see declaration of 'stat'
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:14848: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| static struct stat ac_aggr;
| if (sizeof ac_aggr.st_mtimespec.tv_nsec)
| return 0;
|   ;
|   return 0;
| }
configure:14848: result: no
configure:14858: checking for struct stat.st_mtim.tv_nsec
configure:14858: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(90) : error C2039: 'st_mtim' : is not a member of 'stat'
        C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\INCLUDE\sys/stat.h(100) : see declaration of 'stat'
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:14858: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| static struct stat ac_aggr;
| if (ac_aggr.st_mtim.tv_nsec)
| return 0;
|   ;
|   return 0;
| }
configure:14858: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(90) : error C2039: 'st_mtim' : is not a member of 'stat'
        C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\INCLUDE\sys/stat.h(100) : see declaration of 'stat'
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:14858: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| static struct stat ac_aggr;
| if (sizeof ac_aggr.st_mtim.tv_nsec)
| return 0;
|   ;
|   return 0;
| }
configure:14858: result: no
configure:14868: checking for struct stat.st_mtime_n
configure:14868: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(90) : error C2039: 'st_mtime_n' : is not a member of 'stat'
        C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\INCLUDE\sys/stat.h(100) : see declaration of 'stat'
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:14868: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| static struct stat ac_aggr;
| if (ac_aggr.st_mtime_n)
| return 0;
|   ;
|   return 0;
| }
configure:14868: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(90) : error C2039: 'st_mtime_n' : is not a member of 'stat'
        C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\INCLUDE\sys/stat.h(100) : see declaration of 'stat'
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:14868: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| static struct stat ac_aggr;
| if (sizeof ac_aggr.st_mtime_n)
| return 0;
|   ;
|   return 0;
| }
configure:14868: result: no
configure:14878: checking for struct stat.st_umtime
configure:14878: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(90) : error C2039: 'st_umtime' : is not a member of 'stat'
        C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\INCLUDE\sys/stat.h(100) : see declaration of 'stat'
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:14878: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| static struct stat ac_aggr;
| if (ac_aggr.st_umtime)
| return 0;
|   ;
|   return 0;
| }
configure:14878: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(90) : error C2039: 'st_umtime' : is not a member of 'stat'
        C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\INCLUDE\sys/stat.h(100) : see declaration of 'stat'
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:14878: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| static struct stat ac_aggr;
| if (sizeof ac_aggr.st_umtime)
| return 0;
|   ;
|   return 0;
| }
configure:14878: result: no
configure:14888: checking for struct stat.st_mtime_usec
configure:14888: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(90) : error C2039: 'st_mtime_usec' : is not a member of 'stat'
        C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\INCLUDE\sys/stat.h(100) : see declaration of 'stat'
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:14888: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| static struct stat ac_aggr;
| if (ac_aggr.st_mtime_usec)
| return 0;
|   ;
|   return 0;
| }
configure:14888: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(90) : error C2039: 'st_mtime_usec' : is not a member of 'stat'
        C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\INCLUDE\sys/stat.h(100) : see declaration of 'stat'
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:14888: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| static struct stat ac_aggr;
| if (sizeof ac_aggr.st_mtime_usec)
| return 0;
|   ;
|   return 0;
| }
configure:14888: result: no
configure:14899: checking for struct stat.st_blksize
configure:14899: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(90) : error C2039: 'st_blksize' : is not a member of 'stat'
        C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\INCLUDE\sys/stat.h(100) : see declaration of 'stat'
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:14899: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| static struct stat ac_aggr;
| if (ac_aggr.st_blksize)
| return 0;
|   ;
|   return 0;
| }
configure:14899: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(90) : error C2039: 'st_blksize' : is not a member of 'stat'
        C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\INCLUDE\sys/stat.h(100) : see declaration of 'stat'
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:14899: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| static struct stat ac_aggr;
| if (sizeof ac_aggr.st_blksize)
| return 0;
|   ;
|   return 0;
| }
configure:14899: result: no
configure:14910: checking for struct stat.st_flags
configure:14910: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(90) : error C2039: 'st_flags' : is not a member of 'stat'
        C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\INCLUDE\sys/stat.h(100) : see declaration of 'stat'
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:14910: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| static struct stat ac_aggr;
| if (ac_aggr.st_flags)
| return 0;
|   ;
|   return 0;
| }
configure:14910: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(90) : error C2039: 'st_flags' : is not a member of 'stat'
        C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\INCLUDE\sys/stat.h(100) : see declaration of 'stat'
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:14910: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| static struct stat ac_aggr;
| if (sizeof ac_aggr.st_flags)
| return 0;
|   ;
|   return 0;
| }
configure:14910: result: no
configure:14924: checking for uintmax_t
configure:14924: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:14924: $? = 0
configure:14924: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(89) : error C2059: syntax error : ')'
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:14924: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| if (sizeof ((uintmax_t)))
| 	    return 0;
|   ;
|   return 0;
| }
configure:14924: result: yes
configure:14933: checking for unsigned long long
configure:14933: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:14933: $? = 0
configure:14933: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(90) : error C2059: syntax error : ')'
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:14933: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| if (sizeof ((unsigned long long)))
| 	    return 0;
|   ;
|   return 0;
| }
configure:14933: result: yes
configure:14947: checking for long long int
configure:14984: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:14984: $? = 0
configure:15014: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
configure:15014: $? = 0
configure:15014: ./conftest.exe
configure:15014: $? = 0
configure:15029: result: yes
configure:15039: checking for intmax_t
configure:15039: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:15039: $? = 0
configure:15039: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(92) : error C2059: syntax error : ')'
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:15039: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| if (sizeof ((intmax_t)))
| 	    return 0;
|   ;
|   return 0;
| }
configure:15039: result: yes
configure:15057: checking for unsigned long long int
configure:15094: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:15094: $? = 0
configure:15102: result: yes
configure:15112: checking for uintmax_t
configure:15112: result: yes
configure:15129: checking for int64_t
configure:15129: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:15129: $? = 0
configure:15129: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(97) : error C2118: negative subscript
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:15129: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| 	        enum { N = 64 / 2 - 1 };
| int
| main ()
| {
| static int test_array [1 - 2 * !((int64_t) (((((int64_t) 1 << N) << N) - 1) * 2 + 1)
| 		 < (int64_t) (((((int64_t) 1 << N) << N) - 1) * 2 + 2))];
| test_array [0] = 0
| 
|   ;
|   return 0;
| }
configure:15129: result: yes
configure:15140: checking for uint64_t
configure:15140: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:15140: $? = 0
configure:15140: result: yes
configure:15154: checking for int32_t
configure:15154: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:15154: $? = 0
configure:15154: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(97) : error C2118: negative subscript
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:15154: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| 	        enum { N = 32 / 2 - 1 };
| int
| main ()
| {
| static int test_array [1 - 2 * !((int32_t) (((((int32_t) 1 << N) << N) - 1) * 2 + 1)
| 		 < (int32_t) (((((int32_t) 1 << N) << N) - 1) * 2 + 2))];
| test_array [0] = 0
| 
|   ;
|   return 0;
| }
configure:15154: result: yes
configure:15165: checking for uint32_t
configure:15165: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:15165: $? = 0
configure:15165: result: yes
configure:15179: checking for int16_t
configure:15179: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:15179: $? = 0
configure:15179: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(97) : error C2118: negative subscript
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:15179: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| 	        enum { N = 16 / 2 - 1 };
| int
| main ()
| {
| static int test_array [1 - 2 * !((int16_t) (((((int16_t) 1 << N) << N) - 1) * 2 + 1)
| 		 < (int16_t) (((((int16_t) 1 << N) << N) - 1) * 2 + 2))];
| test_array [0] = 0
| 
|   ;
|   return 0;
| }
configure:15179: result: yes
configure:15190: checking for uint16_t
configure:15190: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:15190: $? = 0
configure:15190: result: yes
configure:15202: checking for uint8_t
configure:15202: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:15202: $? = 0
configure:15202: result: yes
configure:15217: checking whether SIZE_MAX is declared
configure:15217: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:15217: $? = 0
configure:15217: result: yes
configure:15227: checking whether INT64_MAX is declared
configure:15227: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:15227: $? = 0
configure:15227: result: yes
configure:15237: checking whether INT64_MIN is declared
configure:15237: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:15237: $? = 0
configure:15237: result: yes
configure:15247: checking whether UINT64_MAX is declared
configure:15247: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:15247: $? = 0
configure:15247: result: yes
configure:15257: checking whether UINT32_MAX is declared
configure:15257: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:15257: $? = 0
configure:15257: result: yes
configure:15269: checking whether SSIZE_MAX is declared
configure:15269: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(73) : error C2065: 'SSIZE_MAX' : undeclared identifier
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:15269: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| /* end confdefs.h.  */
| #include <limits.h>
| 
| int
| main ()
| {
| #ifndef SSIZE_MAX
| #ifdef __cplusplus
|   (void) SSIZE_MAX;
| #else
|   (void) SSIZE_MAX;
| #endif
| #endif
| 
|   ;
|   return 0;
| }
configure:15269: result: no
configure:15278: checking whether EFTYPE is declared
configure:15278: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(73) : error C2065: 'EFTYPE' : undeclared identifier
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:15278: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| /* end confdefs.h.  */
| #include <errno.h>
| 
| int
| main ()
| {
| #ifndef EFTYPE
| #ifdef __cplusplus
|   (void) EFTYPE;
| #else
|   (void) EFTYPE;
| #endif
| #endif
| 
|   ;
|   return 0;
| }
configure:15278: result: no
configure:15286: checking whether EILSEQ is declared
configure:15286: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:15286: $? = 0
configure:15286: result: yes
configure:15294: checking for wchar_t
configure:15294: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:15294: $? = 0
configure:15294: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(101) : error C2059: syntax error : ')'
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:15294: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| if (sizeof ((wchar_t)))
| 	    return 0;
|   ;
|   return 0;
| }
configure:15294: result: yes
configure:15304: checking size of wchar_t
configure:15309: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
configure:15309: $? = 0
configure:15309: ./conftest.exe
configure:15309: $? = 0
configure:15323: result: 2
configure:15336: checking whether time.h and sys/time.h may both be included
configure:15356: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(68) : fatal error C1083: Cannot open include file: 'sys/time.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:15356: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| /* end confdefs.h.  */
| #include <sys/types.h>
| #include <sys/time.h>
| #include <time.h>
| 
| int
| main ()
| {
| if ((struct tm *) 0)
| return 0;
|   ;
|   return 0;
| }
configure:15363: result: no
configure:15415: checking whether sys/types.h defines makedev
configure:15431: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol makedev referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:15431: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| /* end confdefs.h.  */
| #include <sys/types.h>
| int
| main ()
| {
| return makedev(0, 0);
|   ;
|   return 0;
| }
configure:15440: result: no
configure:15444: checking for sys/mkdev.h
configure:15444: result: no
configure:15454: checking sys/sysmacros.h usability
configure:15454: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(100) : fatal error C1083: Cannot open include file: 'sys/sysmacros.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:15454: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <sys/sysmacros.h>
configure:15454: result: no
configure:15454: checking sys/sysmacros.h presence
configure:15454: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -E  conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

conftest.c
conftest.c(67) : fatal error C1083: Cannot open include file: 'sys/sysmacros.h': No such file or directory
configure:15454: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| /* end confdefs.h.  */
| #include <sys/sysmacros.h>
configure:15454: result: no
configure:15454: checking for sys/sysmacros.h
configure:15454: result: no
configure:15465: checking for _LARGEFILE_SOURCE value needed for large files
configure:15484: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
conftest.c(72) : error C2065: 'fseeko' : undeclared identifier
conftest.c(72) : warning C4047: 'initializing' : 'int (__cdecl *)(FILE *,off_t,int)' differs in levels of indirection from 'int'
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:15484: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| /* end confdefs.h.  */
| #include <sys/types.h> /* for off_t */
|      #include <stdio.h>
| int
| main ()
| {
| int (*fp) (FILE *, off_t, int) = fseeko;
|      return fseeko (stdin, 0, 0) && fp (stdin, 0, 0);
|   ;
|   return 0;
| }
configure:15503: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
conftest.c(73) : error C2065: 'fseeko' : undeclared identifier
conftest.c(73) : warning C4047: 'initializing' : 'int (__cdecl *)(FILE *,off_t,int)' differs in levels of indirection from 'int'
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:15503: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| /* end confdefs.h.  */
| #define _LARGEFILE_SOURCE 1
| #include <sys/types.h> /* for off_t */
|      #include <stdio.h>
| int
| main ()
| {
| int (*fp) (FILE *, off_t, int) = fseeko;
|      return fseeko (stdin, 0, 0) && fp (stdin, 0, 0);
|   ;
|   return 0;
| }
configure:15512: result: unknown
configure:15533: checking for working memcmp
configure:15576: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
configure:15576: $? = 0
configure:15576: ./conftest.exe
configure:15576: $? = 0
configure:15586: result: yes
configure:15595: checking whether lstat correctly handles trailing slash
configure:15621: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol lstat referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
configure:15621: $? = 2
configure: program exited with status 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| struct stat sbuf;
|      /* Linux will dereference the symlink and fail, as required by POSIX.
| 	That is better in the sense that it means we will not
| 	have to compile and use the lstat wrapper.  */
|      return lstat ("conftest.sym/", &sbuf) == 0;
|   ;
|   return 0;
| }
configure:15638: result: no
configure:15657: checking whether lstat accepts an empty string
configure:15677: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol lstat referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
configure:15677: $? = 2
configure: program exited with status 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| struct stat sbuf;
|   return lstat ("", &sbuf) == 0;
|   ;
|   return 0;
| }
configure:15687: result: yes
configure:15703: checking whether stat accepts an empty string
configure:15723: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
configure:15723: $? = 0
configure:15723: ./conftest.exe
configure:15723: $? = 0
configure:15733: result: no
configure:15749: checking whether strerror_r is declared
configure:15749: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(108) : error C2065: 'strerror_r' : undeclared identifier
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:15749: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| #ifndef strerror_r
| #ifdef __cplusplus
|   (void) strerror_r;
| #else
|   (void) strerror_r;
| #endif
| #endif
| 
|   ;
|   return 0;
| }
configure:15749: result: no
configure:15762: checking for strerror_r
configure:15762: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol strerror_r referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:15762: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| /* end confdefs.h.  */
| /* Define strerror_r to an innocuous variant, in case <limits.h> declares strerror_r.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define strerror_r innocuous_strerror_r
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char strerror_r (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef strerror_r
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char strerror_r ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_strerror_r || defined __stub___strerror_r
| choke me
| #endif
| 
| int
| main ()
| {
| return strerror_r ();
|   ;
|   return 0;
| }
configure:15762: result: no
configure:15771: checking whether strerror_r returns char *
configure:15823: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol strerror_r referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
configure:15823: $? = 2
configure: program exited with status 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| 	extern char *strerror_r ();
| int
| main ()
| {
| char buf[100];
| 	  char x = *strerror_r (0, buf, sizeof buf);
| 	  return ! isalpha (x);
|   ;
|   return 0;
| }
configure:15833: result: no
configure:15843: checking for strftime
configure:15843: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:15843: $? = 0
configure:15843: result: yes
configure:15898: checking for vprintf
configure:15898: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:15898: $? = 0
configure:15898: result: yes
configure:15904: checking for _doprnt
configure:15904: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol _doprnt referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:15904: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| /* end confdefs.h.  */
| /* Define _doprnt to an innocuous variant, in case <limits.h> declares _doprnt.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define _doprnt innocuous__doprnt
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char _doprnt (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef _doprnt
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char _doprnt ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub__doprnt || defined __stub____doprnt
| choke me
| #endif
| 
| int
| main ()
| {
| return _doprnt ();
|   ;
|   return 0;
| }
configure:15904: result: no
configure:15919: checking for CreateHardLinkA
configure:15954: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:15954: $? = 0
configure:15962: result: yes
configure:15970: checking for chflags
configure:15970: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol chflags referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:15970: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| /* end confdefs.h.  */
| /* Define chflags to an innocuous variant, in case <limits.h> declares chflags.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define chflags innocuous_chflags
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char chflags (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef chflags
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char chflags ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_chflags || defined __stub___chflags
| choke me
| #endif
| 
| int
| main ()
| {
| return chflags ();
|   ;
|   return 0;
| }
configure:15970: result: no
configure:15970: checking for chown
configure:15970: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol chown referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:15970: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| /* end confdefs.h.  */
| /* Define chown to an innocuous variant, in case <limits.h> declares chown.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define chown innocuous_chown
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char chown (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef chown
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char chown ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_chown || defined __stub___chown
| choke me
| #endif
| 
| int
| main ()
| {
| return chown ();
|   ;
|   return 0;
| }
configure:15970: result: no
configure:15970: checking for chroot
configure:15970: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol chroot referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:15970: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| /* end confdefs.h.  */
| /* Define chroot to an innocuous variant, in case <limits.h> declares chroot.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define chroot innocuous_chroot
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char chroot (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef chroot
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char chroot ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_chroot || defined __stub___chroot
| choke me
| #endif
| 
| int
| main ()
| {
| return chroot ();
|   ;
|   return 0;
| }
configure:15970: result: no
configure:15970: checking for ctime_r
configure:15970: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol ctime_r referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:15970: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| /* end confdefs.h.  */
| /* Define ctime_r to an innocuous variant, in case <limits.h> declares ctime_r.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define ctime_r innocuous_ctime_r
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char ctime_r (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef ctime_r
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char ctime_r ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_ctime_r || defined __stub___ctime_r
| choke me
| #endif
| 
| int
| main ()
| {
| return ctime_r ();
|   ;
|   return 0;
| }
configure:15970: result: no
configure:15982: checking for fchdir
configure:15982: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol fchdir referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:15982: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| /* end confdefs.h.  */
| /* Define fchdir to an innocuous variant, in case <limits.h> declares fchdir.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define fchdir innocuous_fchdir
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char fchdir (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef fchdir
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char fchdir ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_fchdir || defined __stub___fchdir
| choke me
| #endif
| 
| int
| main ()
| {
| return fchdir ();
|   ;
|   return 0;
| }
configure:15982: result: no
configure:15982: checking for fchflags
configure:15982: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol fchflags referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:15982: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| /* end confdefs.h.  */
| /* Define fchflags to an innocuous variant, in case <limits.h> declares fchflags.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define fchflags innocuous_fchflags
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char fchflags (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef fchflags
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char fchflags ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_fchflags || defined __stub___fchflags
| choke me
| #endif
| 
| int
| main ()
| {
| return fchflags ();
|   ;
|   return 0;
| }
configure:15982: result: no
configure:15982: checking for fchmod
configure:15982: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol fchmod referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:15982: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| /* end confdefs.h.  */
| /* Define fchmod to an innocuous variant, in case <limits.h> declares fchmod.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define fchmod innocuous_fchmod
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char fchmod (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef fchmod
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char fchmod ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_fchmod || defined __stub___fchmod
| choke me
| #endif
| 
| int
| main ()
| {
| return fchmod ();
|   ;
|   return 0;
| }
configure:15982: result: no
configure:15982: checking for fchown
configure:15982: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol fchown referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:15982: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| /* end confdefs.h.  */
| /* Define fchown to an innocuous variant, in case <limits.h> declares fchown.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define fchown innocuous_fchown
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char fchown (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef fchown
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char fchown ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_fchown || defined __stub___fchown
| choke me
| #endif
| 
| int
| main ()
| {
| return fchown ();
|   ;
|   return 0;
| }
configure:15982: result: no
configure:15982: checking for fcntl
configure:15982: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol fcntl referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:15982: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| /* end confdefs.h.  */
| /* Define fcntl to an innocuous variant, in case <limits.h> declares fcntl.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define fcntl innocuous_fcntl
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char fcntl (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef fcntl
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char fcntl ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_fcntl || defined __stub___fcntl
| choke me
| #endif
| 
| int
| main ()
| {
| return fcntl ();
|   ;
|   return 0;
| }
configure:15982: result: no
configure:15982: checking for fdopendir
configure:15982: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol fdopendir referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:15982: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| /* end confdefs.h.  */
| /* Define fdopendir to an innocuous variant, in case <limits.h> declares fdopendir.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define fdopendir innocuous_fdopendir
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char fdopendir (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef fdopendir
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char fdopendir ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_fdopendir || defined __stub___fdopendir
| choke me
| #endif
| 
| int
| main ()
| {
| return fdopendir ();
|   ;
|   return 0;
| }
configure:15982: result: no
configure:15982: checking for fork
configure:15982: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol fork referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:15982: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| /* end confdefs.h.  */
| /* Define fork to an innocuous variant, in case <limits.h> declares fork.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define fork innocuous_fork
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char fork (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef fork
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char fork ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_fork || defined __stub___fork
| choke me
| #endif
| 
| int
| main ()
| {
| return fork ();
|   ;
|   return 0;
| }
configure:15982: result: no
configure:15994: checking for fstat
configure:15994: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:15994: $? = 0
configure:15994: result: yes
configure:15994: checking for fstatat
configure:15994: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol fstatat referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:15994: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| /* end confdefs.h.  */
| /* Define fstatat to an innocuous variant, in case <limits.h> declares fstatat.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define fstatat innocuous_fstatat
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char fstatat (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef fstatat
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char fstatat ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_fstatat || defined __stub___fstatat
| choke me
| #endif
| 
| int
| main ()
| {
| return fstatat ();
|   ;
|   return 0;
| }
configure:15994: result: no
configure:15994: checking for fstatfs
configure:15994: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol fstatfs referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:15994: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| /* end confdefs.h.  */
| /* Define fstatfs to an innocuous variant, in case <limits.h> declares fstatfs.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define fstatfs innocuous_fstatfs
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char fstatfs (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef fstatfs
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char fstatfs ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_fstatfs || defined __stub___fstatfs
| choke me
| #endif
| 
| int
| main ()
| {
| return fstatfs ();
|   ;
|   return 0;
| }
configure:15994: result: no
configure:15994: checking for fstatvfs
configure:15994: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol fstatvfs referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:15994: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| /* end confdefs.h.  */
| /* Define fstatvfs to an innocuous variant, in case <limits.h> declares fstatvfs.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define fstatvfs innocuous_fstatvfs
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char fstatvfs (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef fstatvfs
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char fstatvfs ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_fstatvfs || defined __stub___fstatvfs
| choke me
| #endif
| 
| int
| main ()
| {
| return fstatvfs ();
|   ;
|   return 0;
| }
configure:15994: result: no
configure:15994: checking for ftruncate
configure:15994: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol ftruncate referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:15994: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| /* end confdefs.h.  */
| /* Define ftruncate to an innocuous variant, in case <limits.h> declares ftruncate.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define ftruncate innocuous_ftruncate
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char ftruncate (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef ftruncate
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char ftruncate ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_ftruncate || defined __stub___ftruncate
| choke me
| #endif
| 
| int
| main ()
| {
| return ftruncate ();
|   ;
|   return 0;
| }
configure:15994: result: no
configure:16006: checking for futimens
configure:16006: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol futimens referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16006: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| /* end confdefs.h.  */
| /* Define futimens to an innocuous variant, in case <limits.h> declares futimens.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define futimens innocuous_futimens
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char futimens (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef futimens
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char futimens ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_futimens || defined __stub___futimens
| choke me
| #endif
| 
| int
| main ()
| {
| return futimens ();
|   ;
|   return 0;
| }
configure:16006: result: no
configure:16006: checking for futimes
configure:16006: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol futimes referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16006: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| /* end confdefs.h.  */
| /* Define futimes to an innocuous variant, in case <limits.h> declares futimes.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define futimes innocuous_futimes
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char futimes (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef futimes
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char futimes ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_futimes || defined __stub___futimes
| choke me
| #endif
| 
| int
| main ()
| {
| return futimes ();
|   ;
|   return 0;
| }
configure:16006: result: no
configure:16006: checking for futimesat
configure:16006: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol futimesat referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16006: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| /* end confdefs.h.  */
| /* Define futimesat to an innocuous variant, in case <limits.h> declares futimesat.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define futimesat innocuous_futimesat
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char futimesat (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef futimesat
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char futimesat ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_futimesat || defined __stub___futimesat
| choke me
| #endif
| 
| int
| main ()
| {
| return futimesat ();
|   ;
|   return 0;
| }
configure:16006: result: no
configure:16018: checking for geteuid
configure:16018: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol geteuid referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16018: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| /* end confdefs.h.  */
| /* Define geteuid to an innocuous variant, in case <limits.h> declares geteuid.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define geteuid innocuous_geteuid
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char geteuid (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef geteuid
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char geteuid ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_geteuid || defined __stub___geteuid
| choke me
| #endif
| 
| int
| main ()
| {
| return geteuid ();
|   ;
|   return 0;
| }
configure:16018: result: no
configure:16018: checking for getpid
configure:16018: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16018: $? = 0
configure:16018: result: yes
configure:16018: checking for getgrgid_r
configure:16018: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol getgrgid_r referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16018: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| /* end confdefs.h.  */
| /* Define getgrgid_r to an innocuous variant, in case <limits.h> declares getgrgid_r.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define getgrgid_r innocuous_getgrgid_r
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char getgrgid_r (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef getgrgid_r
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char getgrgid_r ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_getgrgid_r || defined __stub___getgrgid_r
| choke me
| #endif
| 
| int
| main ()
| {
| return getgrgid_r ();
|   ;
|   return 0;
| }
configure:16018: result: no
configure:16018: checking for getgrnam_r
configure:16018: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol getgrnam_r referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16018: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| /* end confdefs.h.  */
| /* Define getgrnam_r to an innocuous variant, in case <limits.h> declares getgrnam_r.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define getgrnam_r innocuous_getgrnam_r
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char getgrnam_r (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef getgrnam_r
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char getgrnam_r ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_getgrnam_r || defined __stub___getgrnam_r
| choke me
| #endif
| 
| int
| main ()
| {
| return getgrnam_r ();
|   ;
|   return 0;
| }
configure:16018: result: no
configure:16030: checking for getpwnam_r
configure:16030: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol getpwnam_r referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16030: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| /* end confdefs.h.  */
| /* Define getpwnam_r to an innocuous variant, in case <limits.h> declares getpwnam_r.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define getpwnam_r innocuous_getpwnam_r
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char getpwnam_r (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef getpwnam_r
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char getpwnam_r ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_getpwnam_r || defined __stub___getpwnam_r
| choke me
| #endif
| 
| int
| main ()
| {
| return getpwnam_r ();
|   ;
|   return 0;
| }
configure:16030: result: no
configure:16030: checking for getpwuid_r
configure:16030: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol getpwuid_r referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16030: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| /* end confdefs.h.  */
| /* Define getpwuid_r to an innocuous variant, in case <limits.h> declares getpwuid_r.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define getpwuid_r innocuous_getpwuid_r
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char getpwuid_r (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef getpwuid_r
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char getpwuid_r ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_getpwuid_r || defined __stub___getpwuid_r
| choke me
| #endif
| 
| int
| main ()
| {
| return getpwuid_r ();
|   ;
|   return 0;
| }
configure:16030: result: no
configure:16030: checking for getvfsbyname
configure:16030: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol getvfsbyname referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16030: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| /* end confdefs.h.  */
| /* Define getvfsbyname to an innocuous variant, in case <limits.h> declares getvfsbyname.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define getvfsbyname innocuous_getvfsbyname
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char getvfsbyname (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef getvfsbyname
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char getvfsbyname ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_getvfsbyname || defined __stub___getvfsbyname
| choke me
| #endif
| 
| int
| main ()
| {
| return getvfsbyname ();
|   ;
|   return 0;
| }
configure:16030: result: no
configure:16030: checking for gmtime_r
configure:16030: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol gmtime_r referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16030: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| /* end confdefs.h.  */
| /* Define gmtime_r to an innocuous variant, in case <limits.h> declares gmtime_r.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define gmtime_r innocuous_gmtime_r
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char gmtime_r (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef gmtime_r
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char gmtime_r ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_gmtime_r || defined __stub___gmtime_r
| choke me
| #endif
| 
| int
| main ()
| {
| return gmtime_r ();
|   ;
|   return 0;
| }
configure:16030: result: no
configure:16042: checking for lchflags
configure:16042: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol lchflags referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16042: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| /* end confdefs.h.  */
| /* Define lchflags to an innocuous variant, in case <limits.h> declares lchflags.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define lchflags innocuous_lchflags
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char lchflags (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef lchflags
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char lchflags ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_lchflags || defined __stub___lchflags
| choke me
| #endif
| 
| int
| main ()
| {
| return lchflags ();
|   ;
|   return 0;
| }
configure:16042: result: no
configure:16042: checking for lchmod
configure:16042: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol lchmod referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16042: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| /* end confdefs.h.  */
| /* Define lchmod to an innocuous variant, in case <limits.h> declares lchmod.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define lchmod innocuous_lchmod
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char lchmod (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef lchmod
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char lchmod ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_lchmod || defined __stub___lchmod
| choke me
| #endif
| 
| int
| main ()
| {
| return lchmod ();
|   ;
|   return 0;
| }
configure:16042: result: no
configure:16042: checking for lchown
configure:16042: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol lchown referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16042: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| /* end confdefs.h.  */
| /* Define lchown to an innocuous variant, in case <limits.h> declares lchown.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define lchown innocuous_lchown
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char lchown (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef lchown
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char lchown ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_lchown || defined __stub___lchown
| choke me
| #endif
| 
| int
| main ()
| {
| return lchown ();
|   ;
|   return 0;
| }
configure:16042: result: no
configure:16042: checking for link
configure:16042: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol link referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16042: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| /* end confdefs.h.  */
| /* Define link to an innocuous variant, in case <limits.h> declares link.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define link innocuous_link
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char link (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef link
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char link ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_link || defined __stub___link
| choke me
| #endif
| 
| int
| main ()
| {
| return link ();
|   ;
|   return 0;
| }
configure:16042: result: no
configure:16042: checking for localtime_r
configure:16042: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol localtime_r referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16042: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| /* end confdefs.h.  */
| /* Define localtime_r to an innocuous variant, in case <limits.h> declares localtime_r.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define localtime_r innocuous_localtime_r
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char localtime_r (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef localtime_r
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char localtime_r ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_localtime_r || defined __stub___localtime_r
| choke me
| #endif
| 
| int
| main ()
| {
| return localtime_r ();
|   ;
|   return 0;
| }
configure:16042: result: no
configure:16042: checking for lstat
configure:16042: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol lstat referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16042: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| /* end confdefs.h.  */
| /* Define lstat to an innocuous variant, in case <limits.h> declares lstat.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define lstat innocuous_lstat
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char lstat (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef lstat
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char lstat ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_lstat || defined __stub___lstat
| choke me
| #endif
| 
| int
| main ()
| {
| return lstat ();
|   ;
|   return 0;
| }
configure:16042: result: no
configure:16042: checking for lutimes
configure:16042: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol lutimes referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16042: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| /* end confdefs.h.  */
| /* Define lutimes to an innocuous variant, in case <limits.h> declares lutimes.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define lutimes innocuous_lutimes
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char lutimes (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef lutimes
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char lutimes ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_lutimes || defined __stub___lutimes
| choke me
| #endif
| 
| int
| main ()
| {
| return lutimes ();
|   ;
|   return 0;
| }
configure:16042: result: no
configure:16054: checking for mbrtowc
configure:16054: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16054: $? = 0
configure:16054: result: yes
configure:16054: checking for mbsnrtowcs
configure:16054: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol mbsnrtowcs referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16054: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| /* end confdefs.h.  */
| /* Define mbsnrtowcs to an innocuous variant, in case <limits.h> declares mbsnrtowcs.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define mbsnrtowcs innocuous_mbsnrtowcs
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char mbsnrtowcs (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef mbsnrtowcs
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char mbsnrtowcs ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_mbsnrtowcs || defined __stub___mbsnrtowcs
| choke me
| #endif
| 
| int
| main ()
| {
| return mbsnrtowcs ();
|   ;
|   return 0;
| }
configure:16054: result: no
configure:16054: checking for memmove
configure:16054: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16054: $? = 0
configure:16054: result: yes
configure:16054: checking for memset
configure:16054: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16054: $? = 0
configure:16054: result: yes
configure:16066: checking for mkdir
configure:16066: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16066: $? = 0
configure:16066: result: yes
configure:16066: checking for mkfifo
configure:16066: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol mkfifo referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16066: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| /* end confdefs.h.  */
| /* Define mkfifo to an innocuous variant, in case <limits.h> declares mkfifo.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define mkfifo innocuous_mkfifo
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char mkfifo (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef mkfifo
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char mkfifo ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_mkfifo || defined __stub___mkfifo
| choke me
| #endif
| 
| int
| main ()
| {
| return mkfifo ();
|   ;
|   return 0;
| }
configure:16066: result: no
configure:16066: checking for mknod
configure:16066: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol mknod referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16066: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| /* end confdefs.h.  */
| /* Define mknod to an innocuous variant, in case <limits.h> declares mknod.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define mknod innocuous_mknod
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char mknod (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef mknod
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char mknod ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_mknod || defined __stub___mknod
| choke me
| #endif
| 
| int
| main ()
| {
| return mknod ();
|   ;
|   return 0;
| }
configure:16066: result: no
configure:16066: checking for mkstemp
configure:16066: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol mkstemp referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16066: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| /* end confdefs.h.  */
| /* Define mkstemp to an innocuous variant, in case <limits.h> declares mkstemp.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define mkstemp innocuous_mkstemp
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char mkstemp (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef mkstemp
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char mkstemp ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_mkstemp || defined __stub___mkstemp
| choke me
| #endif
| 
| int
| main ()
| {
| return mkstemp ();
|   ;
|   return 0;
| }
configure:16066: result: no
configure:16078: checking for nl_langinfo
configure:16078: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol nl_langinfo referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16078: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| /* end confdefs.h.  */
| /* Define nl_langinfo to an innocuous variant, in case <limits.h> declares nl_langinfo.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define nl_langinfo innocuous_nl_langinfo
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char nl_langinfo (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef nl_langinfo
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char nl_langinfo ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_nl_langinfo || defined __stub___nl_langinfo
| choke me
| #endif
| 
| int
| main ()
| {
| return nl_langinfo ();
|   ;
|   return 0;
| }
configure:16078: result: no
configure:16078: checking for openat
configure:16078: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol openat referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16078: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| /* end confdefs.h.  */
| /* Define openat to an innocuous variant, in case <limits.h> declares openat.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define openat innocuous_openat
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char openat (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef openat
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char openat ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_openat || defined __stub___openat
| choke me
| #endif
| 
| int
| main ()
| {
| return openat ();
|   ;
|   return 0;
| }
configure:16078: result: no
configure:16078: checking for pipe
configure:16078: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol pipe referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16078: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| /* end confdefs.h.  */
| /* Define pipe to an innocuous variant, in case <limits.h> declares pipe.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define pipe innocuous_pipe
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char pipe (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef pipe
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char pipe ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_pipe || defined __stub___pipe
| choke me
| #endif
| 
| int
| main ()
| {
| return pipe ();
|   ;
|   return 0;
| }
configure:16078: result: no
configure:16078: checking for poll
configure:16078: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol poll referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16078: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| /* end confdefs.h.  */
| /* Define poll to an innocuous variant, in case <limits.h> declares poll.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define poll innocuous_poll
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char poll (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef poll
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char poll ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_poll || defined __stub___poll
| choke me
| #endif
| 
| int
| main ()
| {
| return poll ();
|   ;
|   return 0;
| }
configure:16078: result: no
configure:16078: checking for readlink
configure:16078: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol readlink referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16078: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| /* end confdefs.h.  */
| /* Define readlink to an innocuous variant, in case <limits.h> declares readlink.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define readlink innocuous_readlink
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char readlink (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef readlink
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char readlink ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_readlink || defined __stub___readlink
| choke me
| #endif
| 
| int
| main ()
| {
| return readlink ();
|   ;
|   return 0;
| }
configure:16078: result: no
configure:16078: checking for readlinkat
configure:16078: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol readlinkat referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16078: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| /* end confdefs.h.  */
| /* Define readlinkat to an innocuous variant, in case <limits.h> declares readlinkat.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define readlinkat innocuous_readlinkat
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char readlinkat (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef readlinkat
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char readlinkat ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_readlinkat || defined __stub___readlinkat
| choke me
| #endif
| 
| int
| main ()
| {
| return readlinkat ();
|   ;
|   return 0;
| }
configure:16078: result: no
configure:16090: checking for select
configure:16090: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol select referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16090: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| /* end confdefs.h.  */
| /* Define select to an innocuous variant, in case <limits.h> declares select.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define select innocuous_select
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char select (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef select
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char select ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_select || defined __stub___select
| choke me
| #endif
| 
| int
| main ()
| {
| return select ();
|   ;
|   return 0;
| }
configure:16090: result: no
configure:16090: checking for setenv
configure:16090: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol setenv referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16090: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| /* end confdefs.h.  */
| /* Define setenv to an innocuous variant, in case <limits.h> declares setenv.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define setenv innocuous_setenv
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char setenv (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef setenv
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char setenv ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_setenv || defined __stub___setenv
| choke me
| #endif
| 
| int
| main ()
| {
| return setenv ();
|   ;
|   return 0;
| }
configure:16090: result: no
configure:16090: checking for setlocale
configure:16090: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16090: $? = 0
configure:16090: result: yes
configure:16090: checking for sigaction
configure:16090: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol sigaction referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16090: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| /* end confdefs.h.  */
| /* Define sigaction to an innocuous variant, in case <limits.h> declares sigaction.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define sigaction innocuous_sigaction
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char sigaction (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef sigaction
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char sigaction ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_sigaction || defined __stub___sigaction
| choke me
| #endif
| 
| int
| main ()
| {
| return sigaction ();
|   ;
|   return 0;
| }
configure:16090: result: no
configure:16090: checking for statfs
configure:16090: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol statfs referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16090: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| /* end confdefs.h.  */
| /* Define statfs to an innocuous variant, in case <limits.h> declares statfs.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define statfs innocuous_statfs
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char statfs (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef statfs
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char statfs ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_statfs || defined __stub___statfs
| choke me
| #endif
| 
| int
| main ()
| {
| return statfs ();
|   ;
|   return 0;
| }
configure:16090: result: no
configure:16090: checking for statvfs
configure:16090: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol statvfs referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16090: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| /* end confdefs.h.  */
| /* Define statvfs to an innocuous variant, in case <limits.h> declares statvfs.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define statvfs innocuous_statvfs
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char statvfs (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef statvfs
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char statvfs ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_statvfs || defined __stub___statvfs
| choke me
| #endif
| 
| int
| main ()
| {
| return statvfs ();
|   ;
|   return 0;
| }
configure:16090: result: no
configure:16102: checking for strchr
configure:16102: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16102: $? = 0
configure:16102: result: yes
configure:16102: checking for strdup
configure:16102: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16102: $? = 0
configure:16102: result: yes
configure:16102: checking for strerror
configure:16102: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16102: $? = 0
configure:16102: result: yes
configure:16102: checking for strncpy_s
configure:16102: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16102: $? = 0
configure:16102: result: yes
configure:16102: checking for strrchr
configure:16102: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16102: $? = 0
configure:16102: result: yes
configure:16102: checking for symlink
configure:16102: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol symlink referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16102: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| /* end confdefs.h.  */
| /* Define symlink to an innocuous variant, in case <limits.h> declares symlink.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define symlink innocuous_symlink
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char symlink (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef symlink
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char symlink ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_symlink || defined __stub___symlink
| choke me
| #endif
| 
| int
| main ()
| {
| return symlink ();
|   ;
|   return 0;
| }
configure:16102: result: no
configure:16102: checking for timegm
configure:16102: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol timegm referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16102: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| /* end confdefs.h.  */
| /* Define timegm to an innocuous variant, in case <limits.h> declares timegm.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define timegm innocuous_timegm
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char timegm (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef timegm
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char timegm ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_timegm || defined __stub___timegm
| choke me
| #endif
| 
| int
| main ()
| {
| return timegm ();
|   ;
|   return 0;
| }
configure:16102: result: no
configure:16114: checking for tzset
configure:16114: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16114: $? = 0
configure:16114: result: yes
configure:16114: checking for unsetenv
configure:16114: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol unsetenv referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16114: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| /* end confdefs.h.  */
| /* Define unsetenv to an innocuous variant, in case <limits.h> declares unsetenv.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define unsetenv innocuous_unsetenv
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char unsetenv (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef unsetenv
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char unsetenv ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_unsetenv || defined __stub___unsetenv
| choke me
| #endif
| 
| int
| main ()
| {
| return unsetenv ();
|   ;
|   return 0;
| }
configure:16114: result: no
configure:16114: checking for utime
configure:16114: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16114: $? = 0
configure:16114: result: yes
configure:16114: checking for utimensat
configure:16114: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol utimensat referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16114: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| /* end confdefs.h.  */
| /* Define utimensat to an innocuous variant, in case <limits.h> declares utimensat.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define utimensat innocuous_utimensat
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char utimensat (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef utimensat
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char utimensat ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_utimensat || defined __stub___utimensat
| choke me
| #endif
| 
| int
| main ()
| {
| return utimensat ();
|   ;
|   return 0;
| }
configure:16114: result: no
configure:16114: checking for utimes
configure:16114: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol utimes referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16114: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| /* end confdefs.h.  */
| /* Define utimes to an innocuous variant, in case <limits.h> declares utimes.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define utimes innocuous_utimes
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char utimes (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef utimes
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char utimes ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_utimes || defined __stub___utimes
| choke me
| #endif
| 
| int
| main ()
| {
| return utimes ();
|   ;
|   return 0;
| }
configure:16114: result: no
configure:16114: checking for vfork
configure:16114: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol vfork referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16114: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| /* end confdefs.h.  */
| /* Define vfork to an innocuous variant, in case <limits.h> declares vfork.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define vfork innocuous_vfork
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char vfork (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef vfork
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char vfork ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_vfork || defined __stub___vfork
| choke me
| #endif
| 
| int
| main ()
| {
| return vfork ();
|   ;
|   return 0;
| }
configure:16114: result: no
configure:16126: checking for wcrtomb
configure:16126: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16126: $? = 0
configure:16126: result: yes
configure:16126: checking for wcscmp
configure:16126: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16126: $? = 0
configure:16126: result: yes
configure:16126: checking for wcscpy
configure:16126: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16126: $? = 0
configure:16126: result: yes
configure:16126: checking for wcslen
configure:16126: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16126: $? = 0
configure:16126: result: yes
configure:16126: checking for wcsnrtombs
configure:16126: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol wcsnrtombs referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16126: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| /* end confdefs.h.  */
| /* Define wcsnrtombs to an innocuous variant, in case <limits.h> declares wcsnrtombs.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define wcsnrtombs innocuous_wcsnrtombs
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char wcsnrtombs (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef wcsnrtombs
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char wcsnrtombs ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_wcsnrtombs || defined __stub___wcsnrtombs
| choke me
| #endif
| 
| int
| main ()
| {
| return wcsnrtombs ();
|   ;
|   return 0;
| }
configure:16126: result: no
configure:16126: checking for wctomb
configure:16126: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16126: $? = 0
configure:16126: result: yes
configure:16126: checking for wmemcmp
configure:16126: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol wmemcmp referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16126: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| /* end confdefs.h.  */
| /* Define wmemcmp to an innocuous variant, in case <limits.h> declares wmemcmp.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define wmemcmp innocuous_wmemcmp
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char wmemcmp (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef wmemcmp
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char wmemcmp ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_wmemcmp || defined __stub___wmemcmp
| choke me
| #endif
| 
| int
| main ()
| {
| return wmemcmp ();
|   ;
|   return 0;
| }
configure:16126: result: no
configure:16126: checking for wmemcpy
configure:16126: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16126: $? = 0
configure:16126: result: yes
configure:16138: checking for _ctime64_s
configure:16138: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16138: $? = 0
configure:16138: result: yes
configure:16138: checking for _fseeki64
configure:16138: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16138: $? = 0
configure:16138: result: yes
configure:16150: checking for _get_timezone
configure:16150: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16150: $? = 0
configure:16150: result: yes
configure:16150: checking for _localtime64_s
configure:16150: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16150: $? = 0
configure:16150: result: yes
configure:16150: checking for _mkgmtime64
configure:16150: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16150: $? = 0
configure:16150: result: yes
configure:16162: checking for cygwin_conv_path
configure:16162: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol cygwin_conv_path referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16162: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| /* end confdefs.h.  */
| /* Define cygwin_conv_path to an innocuous variant, in case <limits.h> declares cygwin_conv_path.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define cygwin_conv_path innocuous_cygwin_conv_path
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char cygwin_conv_path (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef cygwin_conv_path
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char cygwin_conv_path ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_cygwin_conv_path || defined __stub___cygwin_conv_path
| choke me
| #endif
| 
| int
| main ()
| {
| return cygwin_conv_path ();
|   ;
|   return 0;
| }
configure:16162: result: no
configure:16186: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(96) : fatal error C1083: Cannot open include file: 'dirent.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16186: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| /* end confdefs.h.  */
| #include <dirent.h>
| int
| main ()
| {
| DIR *dir; struct dirent e, *r;
| 		    return(readdir_r(dir, &e, &r));
|   ;
|   return 0;
| }
configure:16197: checking whether D_MD_ORDER is declared
configure:16197: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(108) : error C2065: 'D_MD_ORDER' : undeclared identifier
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16197: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| /* end confdefs.h.  */
| #if HAVE_LANGINFO_H
| #include <langinfo.h>
| #endif
| 
| 
| int
| main ()
| {
| #ifndef D_MD_ORDER
| #ifdef __cplusplus
|   (void) D_MD_ORDER;
| #else
|   (void) D_MD_ORDER;
| #endif
| #endif
| 
|   ;
|   return 0;
| }
configure:16197: result: no
configure:16212: checking for struct dirent.d_namlen
configure:16212: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(104) : error C2079: 'ac_aggr' uses undefined struct 'dirent'
conftest.c(105) : error C2224: left of '.d_namlen' must have struct/union type
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16212: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| /* end confdefs.h.  */
| #if HAVE_DIRENT_H
| #include <dirent.h>
| #endif
| 
| 
| int
| main ()
| {
| static struct dirent ac_aggr;
| if (ac_aggr.d_namlen)
| return 0;
|   ;
|   return 0;
| }
configure:16212: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(104) : error C2079: 'ac_aggr' uses undefined struct 'dirent'
conftest.c(105) : error C2224: left of '.d_namlen' must have struct/union type
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16212: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| /* end confdefs.h.  */
| #if HAVE_DIRENT_H
| #include <dirent.h>
| #endif
| 
| 
| int
| main ()
| {
| static struct dirent ac_aggr;
| if (sizeof ac_aggr.d_namlen)
| return 0;
|   ;
|   return 0;
| }
configure:16212: result: no
configure:16232: checking for attr/xattr.h
configure:16232: result: no
configure:16245: checking sys/xattr.h usability
configure:16245: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(129) : fatal error C1083: Cannot open include file: 'sys/xattr.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16245: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <sys/xattr.h>
configure:16245: result: no
configure:16245: checking sys/xattr.h presence
configure:16245: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -E  conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

conftest.c
conftest.c(96) : fatal error C1083: Cannot open include file: 'sys/xattr.h': No such file or directory
configure:16245: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| /* end confdefs.h.  */
| #include <sys/xattr.h>
configure:16245: result: no
configure:16245: checking for sys/xattr.h
configure:16245: result: no
configure:16245: checking sys/ea.h usability
configure:16245: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(129) : fatal error C1083: Cannot open include file: 'sys/ea.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16245: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <sys/ea.h>
configure:16245: result: no
configure:16245: checking sys/ea.h presence
configure:16245: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -E  conftest.c
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

conftest.c
conftest.c(96) : fatal error C1083: Cannot open include file: 'sys/ea.h': No such file or directory
configure:16245: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| /* end confdefs.h.  */
| #include <sys/ea.h>
configure:16245: result: no
configure:16245: checking for sys/ea.h
configure:16245: result: no
configure:16255: checking for setxattr in -lattr
configure:16280: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c -lattr   >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol setxattr referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
cl : Command line warning D9002 : ignoring unknown option '-lattr'
configure:16280: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| /* end confdefs.h.  */
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char setxattr ();
| int
| main ()
| {
| return setxattr ();
|   ;
|   return 0;
| }
configure:16289: result: no
configure:16303: checking for extattr_get_file
configure:16303: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol extattr_get_file referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16303: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| /* end confdefs.h.  */
| /* Define extattr_get_file to an innocuous variant, in case <limits.h> declares extattr_get_file.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define extattr_get_file innocuous_extattr_get_file
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char extattr_get_file (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef extattr_get_file
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char extattr_get_file ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_extattr_get_file || defined __stub___extattr_get_file
| choke me
| #endif
| 
| int
| main ()
| {
| return extattr_get_file ();
|   ;
|   return 0;
| }
configure:16303: result: no
configure:16303: checking for extattr_list_file
configure:16303: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol extattr_list_file referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16303: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| /* end confdefs.h.  */
| /* Define extattr_list_file to an innocuous variant, in case <limits.h> declares extattr_list_file.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define extattr_list_file innocuous_extattr_list_file
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char extattr_list_file (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef extattr_list_file
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char extattr_list_file ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_extattr_list_file || defined __stub___extattr_list_file
| choke me
| #endif
| 
| int
| main ()
| {
| return extattr_list_file ();
|   ;
|   return 0;
| }
configure:16303: result: no
configure:16315: checking for extattr_set_fd
configure:16315: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol extattr_set_fd referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16315: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| /* end confdefs.h.  */
| /* Define extattr_set_fd to an innocuous variant, in case <limits.h> declares extattr_set_fd.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define extattr_set_fd innocuous_extattr_set_fd
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char extattr_set_fd (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef extattr_set_fd
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char extattr_set_fd ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_extattr_set_fd || defined __stub___extattr_set_fd
| choke me
| #endif
| 
| int
| main ()
| {
| return extattr_set_fd ();
|   ;
|   return 0;
| }
configure:16315: result: no
configure:16315: checking for extattr_set_file
configure:16315: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol extattr_set_file referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16315: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| /* end confdefs.h.  */
| /* Define extattr_set_file to an innocuous variant, in case <limits.h> declares extattr_set_file.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define extattr_set_file innocuous_extattr_set_file
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char extattr_set_file (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef extattr_set_file
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char extattr_set_file ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_extattr_set_file || defined __stub___extattr_set_file
| choke me
| #endif
| 
| int
| main ()
| {
| return extattr_set_file ();
|   ;
|   return 0;
| }
configure:16315: result: no
configure:16327: checking for fgetxattr
configure:16327: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol fgetxattr referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16327: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| /* end confdefs.h.  */
| /* Define fgetxattr to an innocuous variant, in case <limits.h> declares fgetxattr.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define fgetxattr innocuous_fgetxattr
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char fgetxattr (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef fgetxattr
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char fgetxattr ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_fgetxattr || defined __stub___fgetxattr
| choke me
| #endif
| 
| int
| main ()
| {
| return fgetxattr ();
|   ;
|   return 0;
| }
configure:16327: result: no
configure:16327: checking for flistxattr
configure:16327: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol flistxattr referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16327: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| /* end confdefs.h.  */
| /* Define flistxattr to an innocuous variant, in case <limits.h> declares flistxattr.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define flistxattr innocuous_flistxattr
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char flistxattr (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef flistxattr
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char flistxattr ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_flistxattr || defined __stub___flistxattr
| choke me
| #endif
| 
| int
| main ()
| {
| return flistxattr ();
|   ;
|   return 0;
| }
configure:16327: result: no
configure:16327: checking for fsetxattr
configure:16327: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol fsetxattr referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16327: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| /* end confdefs.h.  */
| /* Define fsetxattr to an innocuous variant, in case <limits.h> declares fsetxattr.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define fsetxattr innocuous_fsetxattr
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char fsetxattr (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef fsetxattr
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char fsetxattr ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_fsetxattr || defined __stub___fsetxattr
| choke me
| #endif
| 
| int
| main ()
| {
| return fsetxattr ();
|   ;
|   return 0;
| }
configure:16327: result: no
configure:16327: checking for getxattr
configure:16327: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol getxattr referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16327: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| /* end confdefs.h.  */
| /* Define getxattr to an innocuous variant, in case <limits.h> declares getxattr.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define getxattr innocuous_getxattr
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char getxattr (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef getxattr
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char getxattr ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_getxattr || defined __stub___getxattr
| choke me
| #endif
| 
| int
| main ()
| {
| return getxattr ();
|   ;
|   return 0;
| }
configure:16327: result: no
configure:16339: checking for lgetxattr
configure:16339: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol lgetxattr referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16339: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| /* end confdefs.h.  */
| /* Define lgetxattr to an innocuous variant, in case <limits.h> declares lgetxattr.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define lgetxattr innocuous_lgetxattr
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char lgetxattr (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef lgetxattr
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char lgetxattr ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_lgetxattr || defined __stub___lgetxattr
| choke me
| #endif
| 
| int
| main ()
| {
| return lgetxattr ();
|   ;
|   return 0;
| }
configure:16339: result: no
configure:16339: checking for listxattr
configure:16339: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol listxattr referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16339: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| /* end confdefs.h.  */
| /* Define listxattr to an innocuous variant, in case <limits.h> declares listxattr.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define listxattr innocuous_listxattr
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char listxattr (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef listxattr
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char listxattr ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_listxattr || defined __stub___listxattr
| choke me
| #endif
| 
| int
| main ()
| {
| return listxattr ();
|   ;
|   return 0;
| }
configure:16339: result: no
configure:16339: checking for llistxattr
configure:16339: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol llistxattr referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16339: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| /* end confdefs.h.  */
| /* Define llistxattr to an innocuous variant, in case <limits.h> declares llistxattr.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define llistxattr innocuous_llistxattr
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char llistxattr (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef llistxattr
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char llistxattr ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_llistxattr || defined __stub___llistxattr
| choke me
| #endif
| 
| int
| main ()
| {
| return llistxattr ();
|   ;
|   return 0;
| }
configure:16339: result: no
configure:16339: checking for lsetxattr
configure:16339: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol lsetxattr referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16339: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| /* end confdefs.h.  */
| /* Define lsetxattr to an innocuous variant, in case <limits.h> declares lsetxattr.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define lsetxattr innocuous_lsetxattr
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char lsetxattr (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef lsetxattr
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char lsetxattr ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_lsetxattr || defined __stub___lsetxattr
| choke me
| #endif
| 
| int
| main ()
| {
| return lsetxattr ();
|   ;
|   return 0;
| }
configure:16339: result: no
configure:16351: checking for fgetea
configure:16351: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol fgetea referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16351: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| /* end confdefs.h.  */
| /* Define fgetea to an innocuous variant, in case <limits.h> declares fgetea.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define fgetea innocuous_fgetea
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char fgetea (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef fgetea
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char fgetea ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_fgetea || defined __stub___fgetea
| choke me
| #endif
| 
| int
| main ()
| {
| return fgetea ();
|   ;
|   return 0;
| }
configure:16351: result: no
configure:16351: checking for flistea
configure:16351: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol flistea referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16351: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| /* end confdefs.h.  */
| /* Define flistea to an innocuous variant, in case <limits.h> declares flistea.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define flistea innocuous_flistea
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char flistea (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef flistea
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char flistea ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_flistea || defined __stub___flistea
| choke me
| #endif
| 
| int
| main ()
| {
| return flistea ();
|   ;
|   return 0;
| }
configure:16351: result: no
configure:16351: checking for fsetea
configure:16351: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol fsetea referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16351: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| /* end confdefs.h.  */
| /* Define fsetea to an innocuous variant, in case <limits.h> declares fsetea.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define fsetea innocuous_fsetea
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char fsetea (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef fsetea
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char fsetea ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_fsetea || defined __stub___fsetea
| choke me
| #endif
| 
| int
| main ()
| {
| return fsetea ();
|   ;
|   return 0;
| }
configure:16351: result: no
configure:16351: checking for getea
configure:16351: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol getea referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16351: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| /* end confdefs.h.  */
| /* Define getea to an innocuous variant, in case <limits.h> declares getea.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define getea innocuous_getea
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char getea (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef getea
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char getea ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_getea || defined __stub___getea
| choke me
| #endif
| 
| int
| main ()
| {
| return getea ();
|   ;
|   return 0;
| }
configure:16351: result: no
configure:16363: checking for lgetea
configure:16363: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol lgetea referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16363: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| /* end confdefs.h.  */
| /* Define lgetea to an innocuous variant, in case <limits.h> declares lgetea.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define lgetea innocuous_lgetea
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char lgetea (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef lgetea
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char lgetea ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_lgetea || defined __stub___lgetea
| choke me
| #endif
| 
| int
| main ()
| {
| return lgetea ();
|   ;
|   return 0;
| }
configure:16363: result: no
configure:16363: checking for listea
configure:16363: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol listea referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16363: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| /* end confdefs.h.  */
| /* Define listea to an innocuous variant, in case <limits.h> declares listea.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define listea innocuous_listea
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char listea (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef listea
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char listea ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_listea || defined __stub___listea
| choke me
| #endif
| 
| int
| main ()
| {
| return listea ();
|   ;
|   return 0;
| }
configure:16363: result: no
configure:16363: checking for llistea
configure:16363: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol llistea referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16363: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| /* end confdefs.h.  */
| /* Define llistea to an innocuous variant, in case <limits.h> declares llistea.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define llistea innocuous_llistea
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char llistea (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef llistea
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char llistea ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_llistea || defined __stub___llistea
| choke me
| #endif
| 
| int
| main ()
| {
| return llistea ();
|   ;
|   return 0;
| }
configure:16363: result: no
configure:16363: checking for lsetea
configure:16363: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol lsetea referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16363: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| /* end confdefs.h.  */
| /* Define lsetea to an innocuous variant, in case <limits.h> declares lsetea.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define lsetea innocuous_lsetea
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char lsetea (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef lsetea
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char lsetea ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_lsetea || defined __stub___lsetea
| choke me
| #endif
| 
| int
| main ()
| {
| return lsetea ();
|   ;
|   return 0;
| }
configure:16363: result: no
configure:16372: checking whether EXTATTR_NAMESPACE_USER is declared
configure:16372: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(97) : fatal error C1083: Cannot open include file: 'sys/extattr.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16372: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| /* end confdefs.h.  */
| #include <sys/types.h>
| #include <sys/extattr.h>
| 
| 
| int
| main ()
| {
| #ifndef EXTATTR_NAMESPACE_USER
| #ifdef __cplusplus
|   (void) EXTATTR_NAMESPACE_USER;
| #else
|   (void) EXTATTR_NAMESPACE_USER;
| #endif
| #endif
| 
|   ;
|   return 0;
| }
configure:16372: result: no
configure:16404: checking for sys/acl.h
configure:16404: result: no
configure:16414: checking for acl_get_file in -lacl
configure:16439: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c -lacl   >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol acl_get_file referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
cl : Command line warning D9002 : ignoring unknown option '-lacl'
configure:16439: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char acl_get_file ();
| int
| main ()
| {
| return acl_get_file ();
|   ;
|   return 0;
| }
configure:16448: result: no
configure:16462: checking for acl_create_entry
configure:16462: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol acl_create_entry referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16462: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| /* Define acl_create_entry to an innocuous variant, in case <limits.h> declares acl_create_entry.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define acl_create_entry innocuous_acl_create_entry
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char acl_create_entry (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef acl_create_entry
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char acl_create_entry ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_acl_create_entry || defined __stub___acl_create_entry
| choke me
| #endif
| 
| int
| main ()
| {
| return acl_create_entry ();
|   ;
|   return 0;
| }
configure:16462: result: no
configure:16462: checking for acl_init
configure:16462: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol acl_init referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16462: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| /* Define acl_init to an innocuous variant, in case <limits.h> declares acl_init.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define acl_init innocuous_acl_init
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char acl_init (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef acl_init
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char acl_init ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_acl_init || defined __stub___acl_init
| choke me
| #endif
| 
| int
| main ()
| {
| return acl_init ();
|   ;
|   return 0;
| }
configure:16462: result: no
configure:16462: checking for acl_set_fd
configure:16462: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol acl_set_fd referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16462: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| /* Define acl_set_fd to an innocuous variant, in case <limits.h> declares acl_set_fd.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define acl_set_fd innocuous_acl_set_fd
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char acl_set_fd (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef acl_set_fd
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char acl_set_fd ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_acl_set_fd || defined __stub___acl_set_fd
| choke me
| #endif
| 
| int
| main ()
| {
| return acl_set_fd ();
|   ;
|   return 0;
| }
configure:16462: result: no
configure:16462: checking for acl_set_fd_np
configure:16462: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol acl_set_fd_np referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16462: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| /* Define acl_set_fd_np to an innocuous variant, in case <limits.h> declares acl_set_fd_np.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define acl_set_fd_np innocuous_acl_set_fd_np
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char acl_set_fd_np (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef acl_set_fd_np
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char acl_set_fd_np ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_acl_set_fd_np || defined __stub___acl_set_fd_np
| choke me
| #endif
| 
| int
| main ()
| {
| return acl_set_fd_np ();
|   ;
|   return 0;
| }
configure:16462: result: no
configure:16462: checking for acl_set_file
configure:16462: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol acl_set_file referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16462: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| /* Define acl_set_file to an innocuous variant, in case <limits.h> declares acl_set_file.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define acl_set_file innocuous_acl_set_file
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char acl_set_file (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef acl_set_file
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char acl_set_file ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_acl_set_file || defined __stub___acl_set_file
| choke me
| #endif
| 
| int
| main ()
| {
| return acl_set_file ();
|   ;
|   return 0;
| }
configure:16462: result: no
configure:16472: checking for acl_permset_t
configure:16472: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(108) : error C2065: 'acl_permset_t' : undeclared identifier
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16472: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| #if HAVE_SYS_TYPES_H
| 	#include <sys/types.h>
| 	#endif
| 	#if HAVE_SYS_ACL_H
| 	#include <sys/acl.h>
| 	#endif
| 
| 
| int
| main ()
| {
| if (sizeof (acl_permset_t))
| 	 return 0;
|   ;
|   return 0;
| }
configure:16472: result: no
configure:16498: checking for acl_get_perm_np
configure:16498: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol acl_get_perm_np referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16498: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| /* Define acl_get_perm_np to an innocuous variant, in case <limits.h> declares acl_get_perm_np.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define acl_get_perm_np innocuous_acl_get_perm_np
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char acl_get_perm_np (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef acl_get_perm_np
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char acl_get_perm_np ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_acl_get_perm_np || defined __stub___acl_get_perm_np
| choke me
| #endif
| 
| int
| main ()
| {
| return acl_get_perm_np ();
|   ;
|   return 0;
| }
configure:16498: result: no
configure:16498: checking for acl_get_perm
configure:16498: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol acl_get_perm referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16498: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| /* Define acl_get_perm to an innocuous variant, in case <limits.h> declares acl_get_perm.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define acl_get_perm innocuous_acl_get_perm
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char acl_get_perm (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef acl_get_perm
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char acl_get_perm ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_acl_get_perm || defined __stub___acl_get_perm
| choke me
| #endif
| 
| int
| main ()
| {
| return acl_get_perm ();
|   ;
|   return 0;
| }
configure:16498: result: no
configure:16498: checking for acl_get_link
configure:16498: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol acl_get_link referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16498: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| /* Define acl_get_link to an innocuous variant, in case <limits.h> declares acl_get_link.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define acl_get_link innocuous_acl_get_link
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char acl_get_link (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef acl_get_link
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char acl_get_link ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_acl_get_link || defined __stub___acl_get_link
| choke me
| #endif
| 
| int
| main ()
| {
| return acl_get_link ();
|   ;
|   return 0;
| }
configure:16498: result: no
configure:16498: checking for acl_get_link_np
configure:16498: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g   conftest.c  >&5
conftest.c
Microsoft (R) Incremental Linker Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:conftest.exe 
/out:conftest.exe 
conftest.obj 
conftest.obj : error LNK2019: unresolved external symbol acl_get_link_np referenced in function main
conftest.exe : fatal error LNK1120: 1 unresolved externals
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16498: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| /* Define acl_get_link_np to an innocuous variant, in case <limits.h> declares acl_get_link_np.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define acl_get_link_np innocuous_acl_get_link_np
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char acl_get_link_np (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef acl_get_link_np
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char acl_get_link_np ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_acl_get_link_np || defined __stub___acl_get_link_np
| choke me
| #endif
| 
| int
| main ()
| {
| return acl_get_link_np ();
|   ;
|   return 0;
| }
configure:16498: result: no
configure:16510: checking whether ACL_USER is declared
configure:16510: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(97) : fatal error C1083: Cannot open include file: 'sys/acl.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16510: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| #include <sys/acl.h>
| 
| int
| main ()
| {
| #ifndef ACL_USER
| #ifdef __cplusplus
|   (void) ACL_USER;
| #else
|   (void) ACL_USER;
| #endif
| #endif
| 
|   ;
|   return 0;
| }
configure:16510: result: no
configure:16528: checking for special C compiler options needed for large files
configure:16558: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(103) : warning C4293: '<<' : shift count negative or too big, undefined behavior
conftest.c(103) : warning C4293: '<<' : shift count negative or too big, undefined behavior
conftest.c(104) : warning C4293: '<<' : shift count negative or too big, undefined behavior
conftest.c(104) : warning C4293: '<<' : shift count negative or too big, undefined behavior
conftest.c(105) : error C2118: negative subscript
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16558: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| #include <sys/types.h>
|  /* Check that off_t can represent 2**63 - 1 correctly.
|     We can't simply define LARGE_OFF_T to be 9223372036854775807,
|     since some C++ compilers masquerading as C compilers
|     incorrectly reject 9223372036854775807.  */
| #define LARGE_OFF_T (((off_t) 1 << 62) - 1 + ((off_t) 1 << 62))
|   int off_t_is_large[(LARGE_OFF_T % 2147483629 == 721
| 		       && LARGE_OFF_T % 2147483647 == 1)
| 		      ? 1 : -1];
| int
| main ()
| {
| 
|   ;
|   return 0;
| }
configure:16563: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -n32 -c -g  conftest.c >&5
conftest.c
conftest.c(103) : warning C4293: '<<' : shift count negative or too big, undefined behavior
conftest.c(103) : warning C4293: '<<' : shift count negative or too big, undefined behavior
conftest.c(104) : warning C4293: '<<' : shift count negative or too big, undefined behavior
conftest.c(104) : warning C4293: '<<' : shift count negative or too big, undefined behavior
conftest.c(105) : error C2118: negative subscript
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-n32'
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16563: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| #include <sys/types.h>
|  /* Check that off_t can represent 2**63 - 1 correctly.
|     We can't simply define LARGE_OFF_T to be 9223372036854775807,
|     since some C++ compilers masquerading as C compilers
|     incorrectly reject 9223372036854775807.  */
| #define LARGE_OFF_T (((off_t) 1 << 62) - 1 + ((off_t) 1 << 62))
|   int off_t_is_large[(LARGE_OFF_T % 2147483629 == 721
| 		       && LARGE_OFF_T % 2147483647 == 1)
| 		      ? 1 : -1];
| int
| main ()
| {
| 
|   ;
|   return 0;
| }
configure:16573: result: no
configure:16579: checking for _FILE_OFFSET_BITS value needed for large files
configure:16604: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(103) : warning C4293: '<<' : shift count negative or too big, undefined behavior
conftest.c(103) : warning C4293: '<<' : shift count negative or too big, undefined behavior
conftest.c(104) : warning C4293: '<<' : shift count negative or too big, undefined behavior
conftest.c(104) : warning C4293: '<<' : shift count negative or too big, undefined behavior
conftest.c(105) : error C2118: negative subscript
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16604: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| #include <sys/types.h>
|  /* Check that off_t can represent 2**63 - 1 correctly.
|     We can't simply define LARGE_OFF_T to be 9223372036854775807,
|     since some C++ compilers masquerading as C compilers
|     incorrectly reject 9223372036854775807.  */
| #define LARGE_OFF_T (((off_t) 1 << 62) - 1 + ((off_t) 1 << 62))
|   int off_t_is_large[(LARGE_OFF_T % 2147483629 == 721
| 		       && LARGE_OFF_T % 2147483647 == 1)
| 		      ? 1 : -1];
| int
| main ()
| {
| 
|   ;
|   return 0;
| }
configure:16628: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(104) : warning C4293: '<<' : shift count negative or too big, undefined behavior
conftest.c(104) : warning C4293: '<<' : shift count negative or too big, undefined behavior
conftest.c(105) : warning C4293: '<<' : shift count negative or too big, undefined behavior
conftest.c(105) : warning C4293: '<<' : shift count negative or too big, undefined behavior
conftest.c(106) : error C2118: negative subscript
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16628: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| #define _FILE_OFFSET_BITS 64
| #include <sys/types.h>
|  /* Check that off_t can represent 2**63 - 1 correctly.
|     We can't simply define LARGE_OFF_T to be 9223372036854775807,
|     since some C++ compilers masquerading as C compilers
|     incorrectly reject 9223372036854775807.  */
| #define LARGE_OFF_T (((off_t) 1 << 62) - 1 + ((off_t) 1 << 62))
|   int off_t_is_large[(LARGE_OFF_T % 2147483629 == 721
| 		       && LARGE_OFF_T % 2147483647 == 1)
| 		      ? 1 : -1];
| int
| main ()
| {
| 
|   ;
|   return 0;
| }
configure:16636: result: unknown
configure:16648: checking for _LARGE_FILES value needed for large files
configure:16673: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(103) : warning C4293: '<<' : shift count negative or too big, undefined behavior
conftest.c(103) : warning C4293: '<<' : shift count negative or too big, undefined behavior
conftest.c(104) : warning C4293: '<<' : shift count negative or too big, undefined behavior
conftest.c(104) : warning C4293: '<<' : shift count negative or too big, undefined behavior
conftest.c(105) : error C2118: negative subscript
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16673: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| #include <sys/types.h>
|  /* Check that off_t can represent 2**63 - 1 correctly.
|     We can't simply define LARGE_OFF_T to be 9223372036854775807,
|     since some C++ compilers masquerading as C compilers
|     incorrectly reject 9223372036854775807.  */
| #define LARGE_OFF_T (((off_t) 1 << 62) - 1 + ((off_t) 1 << 62))
|   int off_t_is_large[(LARGE_OFF_T % 2147483629 == 721
| 		       && LARGE_OFF_T % 2147483647 == 1)
| 		      ? 1 : -1];
| int
| main ()
| {
| 
|   ;
|   return 0;
| }
configure:16697: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -c -g  conftest.c >&5
conftest.c
conftest.c(104) : warning C4293: '<<' : shift count negative or too big, undefined behavior
conftest.c(104) : warning C4293: '<<' : shift count negative or too big, undefined behavior
conftest.c(105) : warning C4293: '<<' : shift count negative or too big, undefined behavior
conftest.c(105) : warning C4293: '<<' : shift count negative or too big, undefined behavior
conftest.c(106) : error C2118: negative subscript
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16697: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| #define _LARGE_FILES 1
| #include <sys/types.h>
|  /* Check that off_t can represent 2**63 - 1 correctly.
|     We can't simply define LARGE_OFF_T to be 9223372036854775807,
|     since some C++ compilers masquerading as C compilers
|     incorrectly reject 9223372036854775807.  */
| #define LARGE_OFF_T (((off_t) 1 << 62) - 1 + ((off_t) 1 << 62))
|   int off_t_is_large[(LARGE_OFF_T % 2147483629 == 721
| 		       && LARGE_OFF_T % 2147483647 == 1)
| 		      ? 1 : -1];
| int
| main ()
| {
| 
|   ;
|   return 0;
| }
configure:16705: result: unknown
configure:16729: checking support for ARCHIVE_CRYPTO_MD5_LIBC
configure:16751: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g  -I. -I. -I./libarchive  conftest.c    >&5
conftest.c
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2061: syntax error : identifier '__la_read'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2059: syntax error : 'type'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2061: syntax error : identifier '__la_waitpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2146: syntax error : missing ')' before identifier 'wpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2061: syntax error : identifier 'wpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ','
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ')'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2061: syntax error : identifier '__la_write'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2059: syntax error : 'type'
./libarchive\archive_crypto_private.h(61) : fatal error C1083: Cannot open include file: 'md5.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16751: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| 
| #define ARCHIVE_MD5_COMPILE_TEST
| #define ARCHIVE_CRYPTO_MD5_LIBC
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_crypto_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| static int
| win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| 	DWORD siglen = bufsize;
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_libc_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_libmd_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_libsystem_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_nettle_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_openssl_md5init(archive_md5_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_md5());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (ctx->digest)
|     EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_windowsapi_md5init(archive_md5_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_MD5));
| }
| 
| static int
| __archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_ripemd160());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_libc_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_libmd_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_nettle_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_openssl_sha1init(archive_sha1_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha1());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (ctx->digest)
|     EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA1));
| }
| 
| static int
| __archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_libc_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_libc2_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_libc3_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_libmd_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_nettle_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_openssl_sha256init(archive_sha256_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha256());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_256));
| }
| 
| static int
| __archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_libc_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_libc2_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_libc3_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_nettle_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_openssl_sha384init(archive_sha384_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha384());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_384));
| }
| 
| static int
| __archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_libc_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_libc2_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_libc3_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_libmd_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_nettle_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_openssl_sha512init(archive_sha512_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha512());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_512));
| }
| 
| static int
| __archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Crypto functions are set based on availability and by the following
|  * order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. OpenSSL
|  * 6. Windows API
|  */
| const struct archive_crypto __archive_crypto =
| {
| /* MD5 */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
|   &__archive_libc_md5init,
|   &__archive_libc_md5update,
|   &__archive_libc_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
|   &__archive_libmd_md5init,
|   &__archive_libmd_md5update,
|   &__archive_libmd_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
|   &__archive_libsystem_md5init,
|   &__archive_libsystem_md5update,
|   &__archive_libsystem_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
|   &__archive_nettle_md5init,
|   &__archive_nettle_md5update,
|   &__archive_nettle_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
|   &__archive_openssl_md5init,
|   &__archive_openssl_md5update,
|   &__archive_openssl_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
|   &__archive_windowsapi_md5init,
|   &__archive_windowsapi_md5update,
|   &__archive_windowsapi_md5final,
| #elif !defined(ARCHIVE_MD5_COMPILE_TEST)
|   &__archive_stub_md5init,
|   &__archive_stub_md5update,
|   &__archive_stub_md5final,
| #endif
| 
| /* RIPEMD160 */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
|   &__archive_libc_ripemd160init,
|   &__archive_libc_ripemd160update,
|   &__archive_libc_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
|   &__archive_libmd_ripemd160init,
|   &__archive_libmd_ripemd160update,
|   &__archive_libmd_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
|   &__archive_nettle_ripemd160init,
|   &__archive_nettle_ripemd160update,
|   &__archive_nettle_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
|   &__archive_openssl_ripemd160init,
|   &__archive_openssl_ripemd160update,
|   &__archive_openssl_ripemd160final,
| #elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
|   &__archive_stub_ripemd160init,
|   &__archive_stub_ripemd160update,
|   &__archive_stub_ripemd160final,
| #endif
| 
| /* SHA1 */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
|   &__archive_libc_sha1init,
|   &__archive_libc_sha1update,
|   &__archive_libc_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
|   &__archive_libmd_sha1init,
|   &__archive_libmd_sha1update,
|   &__archive_libmd_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
|   &__archive_libsystem_sha1init,
|   &__archive_libsystem_sha1update,
|   &__archive_libsystem_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
|   &__archive_nettle_sha1init,
|   &__archive_nettle_sha1update,
|   &__archive_nettle_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
|   &__archive_openssl_sha1init,
|   &__archive_openssl_sha1update,
|   &__archive_openssl_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
|   &__archive_windowsapi_sha1init,
|   &__archive_windowsapi_sha1update,
|   &__archive_windowsapi_sha1final,
| #elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
|   &__archive_stub_sha1init,
|   &__archive_stub_sha1update,
|   &__archive_stub_sha1final,
| #endif
| 
| /* SHA256 */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
|   &__archive_libc_sha256init,
|   &__archive_libc_sha256update,
|   &__archive_libc_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
|   &__archive_libc2_sha256init,
|   &__archive_libc2_sha256update,
|   &__archive_libc2_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
|   &__archive_libc3_sha256init,
|   &__archive_libc3_sha256update,
|   &__archive_libc3_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
|   &__archive_libmd_sha256init,
|   &__archive_libmd_sha256update,
|   &__archive_libmd_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
|   &__archive_libsystem_sha256init,
|   &__archive_libsystem_sha256update,
|   &__archive_libsystem_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
|   &__archive_nettle_sha256init,
|   &__archive_nettle_sha256update,
|   &__archive_nettle_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
|   &__archive_openssl_sha256init,
|   &__archive_openssl_sha256update,
|   &__archive_openssl_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
|   &__archive_windowsapi_sha256init,
|   &__archive_windowsapi_sha256update,
|   &__archive_windowsapi_sha256final,
| #elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
|   &__archive_stub_sha256init,
|   &__archive_stub_sha256update,
|   &__archive_stub_sha256final,
| #endif
| 
| /* SHA384 */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
|   &__archive_libc_sha384init,
|   &__archive_libc_sha384update,
|   &__archive_libc_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
|   &__archive_libc2_sha384init,
|   &__archive_libc2_sha384update,
|   &__archive_libc2_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
|   &__archive_libc3_sha384init,
|   &__archive_libc3_sha384update,
|   &__archive_libc3_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
|   &__archive_libsystem_sha384init,
|   &__archive_libsystem_sha384update,
|   &__archive_libsystem_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
|   &__archive_nettle_sha384init,
|   &__archive_nettle_sha384update,
|   &__archive_nettle_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
|   &__archive_openssl_sha384init,
|   &__archive_openssl_sha384update,
|   &__archive_openssl_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
|   &__archive_windowsapi_sha384init,
|   &__archive_windowsapi_sha384update,
|   &__archive_windowsapi_sha384final,
| #elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
|   &__archive_stub_sha384init,
|   &__archive_stub_sha384update,
|   &__archive_stub_sha384final,
| #endif
| 
| /* SHA512 */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
|   &__archive_libc_sha512init,
|   &__archive_libc_sha512update,
|   &__archive_libc_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
|   &__archive_libc2_sha512init,
|   &__archive_libc2_sha512update,
|   &__archive_libc2_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
|   &__archive_libc3_sha512init,
|   &__archive_libc3_sha512update,
|   &__archive_libc3_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
|   &__archive_libmd_sha512init,
|   &__archive_libmd_sha512update,
|   &__archive_libmd_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
|   &__archive_libsystem_sha512init,
|   &__archive_libsystem_sha512update,
|   &__archive_libsystem_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
|   &__archive_nettle_sha512init,
|   &__archive_nettle_sha512update,
|   &__archive_nettle_sha512final,
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
|   &__archive_openssl_sha512init,
|   &__archive_openssl_sha512update,
|   &__archive_openssl_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
|   &__archive_windowsapi_sha512init,
|   &__archive_windowsapi_sha512update,
|   &__archive_windowsapi_sha512final
| #elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
|   &__archive_stub_sha512init,
|   &__archive_stub_sha512update,
|   &__archive_stub_sha512final
| #endif
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_md5_ctx ctx;
|   archive_md5_init(&ctx);
|   archive_md5_update(&ctx, *argv, argc);
|   archive_md5_final(&ctx, NULL);
|   return 0;
| }
| 
configure:16765: result: no
configure:16782: checking support for ARCHIVE_CRYPTO_MD5_LIBSYSTEM
configure:16804: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g  -I. -I. -I./libarchive  conftest.c    >&5
conftest.c
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2061: syntax error : identifier '__la_read'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2059: syntax error : 'type'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2061: syntax error : identifier '__la_waitpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2146: syntax error : missing ')' before identifier 'wpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2061: syntax error : identifier 'wpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ','
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ')'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2061: syntax error : identifier '__la_write'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2059: syntax error : 'type'
./libarchive\archive_crypto_private.h(112) : fatal error C1083: Cannot open include file: 'CommonCrypto/CommonDigest.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16804: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| 
| #define ARCHIVE_MD5_COMPILE_TEST
| #define ARCHIVE_CRYPTO_MD5_LIBSYSTEM
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_crypto_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| static int
| win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| 	DWORD siglen = bufsize;
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_libc_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_libmd_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_libsystem_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_nettle_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_openssl_md5init(archive_md5_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_md5());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (ctx->digest)
|     EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_windowsapi_md5init(archive_md5_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_MD5));
| }
| 
| static int
| __archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_ripemd160());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_libc_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_libmd_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_nettle_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_openssl_sha1init(archive_sha1_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha1());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (ctx->digest)
|     EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA1));
| }
| 
| static int
| __archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_libc_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_libc2_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_libc3_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_libmd_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_nettle_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_openssl_sha256init(archive_sha256_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha256());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_256));
| }
| 
| static int
| __archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_libc_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_libc2_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_libc3_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_nettle_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_openssl_sha384init(archive_sha384_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha384());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_384));
| }
| 
| static int
| __archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_libc_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_libc2_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_libc3_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_libmd_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_nettle_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_openssl_sha512init(archive_sha512_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha512());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_512));
| }
| 
| static int
| __archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Crypto functions are set based on availability and by the following
|  * order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. OpenSSL
|  * 6. Windows API
|  */
| const struct archive_crypto __archive_crypto =
| {
| /* MD5 */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
|   &__archive_libc_md5init,
|   &__archive_libc_md5update,
|   &__archive_libc_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
|   &__archive_libmd_md5init,
|   &__archive_libmd_md5update,
|   &__archive_libmd_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
|   &__archive_libsystem_md5init,
|   &__archive_libsystem_md5update,
|   &__archive_libsystem_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
|   &__archive_nettle_md5init,
|   &__archive_nettle_md5update,
|   &__archive_nettle_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
|   &__archive_openssl_md5init,
|   &__archive_openssl_md5update,
|   &__archive_openssl_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
|   &__archive_windowsapi_md5init,
|   &__archive_windowsapi_md5update,
|   &__archive_windowsapi_md5final,
| #elif !defined(ARCHIVE_MD5_COMPILE_TEST)
|   &__archive_stub_md5init,
|   &__archive_stub_md5update,
|   &__archive_stub_md5final,
| #endif
| 
| /* RIPEMD160 */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
|   &__archive_libc_ripemd160init,
|   &__archive_libc_ripemd160update,
|   &__archive_libc_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
|   &__archive_libmd_ripemd160init,
|   &__archive_libmd_ripemd160update,
|   &__archive_libmd_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
|   &__archive_nettle_ripemd160init,
|   &__archive_nettle_ripemd160update,
|   &__archive_nettle_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
|   &__archive_openssl_ripemd160init,
|   &__archive_openssl_ripemd160update,
|   &__archive_openssl_ripemd160final,
| #elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
|   &__archive_stub_ripemd160init,
|   &__archive_stub_ripemd160update,
|   &__archive_stub_ripemd160final,
| #endif
| 
| /* SHA1 */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
|   &__archive_libc_sha1init,
|   &__archive_libc_sha1update,
|   &__archive_libc_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
|   &__archive_libmd_sha1init,
|   &__archive_libmd_sha1update,
|   &__archive_libmd_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
|   &__archive_libsystem_sha1init,
|   &__archive_libsystem_sha1update,
|   &__archive_libsystem_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
|   &__archive_nettle_sha1init,
|   &__archive_nettle_sha1update,
|   &__archive_nettle_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
|   &__archive_openssl_sha1init,
|   &__archive_openssl_sha1update,
|   &__archive_openssl_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
|   &__archive_windowsapi_sha1init,
|   &__archive_windowsapi_sha1update,
|   &__archive_windowsapi_sha1final,
| #elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
|   &__archive_stub_sha1init,
|   &__archive_stub_sha1update,
|   &__archive_stub_sha1final,
| #endif
| 
| /* SHA256 */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
|   &__archive_libc_sha256init,
|   &__archive_libc_sha256update,
|   &__archive_libc_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
|   &__archive_libc2_sha256init,
|   &__archive_libc2_sha256update,
|   &__archive_libc2_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
|   &__archive_libc3_sha256init,
|   &__archive_libc3_sha256update,
|   &__archive_libc3_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
|   &__archive_libmd_sha256init,
|   &__archive_libmd_sha256update,
|   &__archive_libmd_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
|   &__archive_libsystem_sha256init,
|   &__archive_libsystem_sha256update,
|   &__archive_libsystem_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
|   &__archive_nettle_sha256init,
|   &__archive_nettle_sha256update,
|   &__archive_nettle_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
|   &__archive_openssl_sha256init,
|   &__archive_openssl_sha256update,
|   &__archive_openssl_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
|   &__archive_windowsapi_sha256init,
|   &__archive_windowsapi_sha256update,
|   &__archive_windowsapi_sha256final,
| #elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
|   &__archive_stub_sha256init,
|   &__archive_stub_sha256update,
|   &__archive_stub_sha256final,
| #endif
| 
| /* SHA384 */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
|   &__archive_libc_sha384init,
|   &__archive_libc_sha384update,
|   &__archive_libc_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
|   &__archive_libc2_sha384init,
|   &__archive_libc2_sha384update,
|   &__archive_libc2_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
|   &__archive_libc3_sha384init,
|   &__archive_libc3_sha384update,
|   &__archive_libc3_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
|   &__archive_libsystem_sha384init,
|   &__archive_libsystem_sha384update,
|   &__archive_libsystem_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
|   &__archive_nettle_sha384init,
|   &__archive_nettle_sha384update,
|   &__archive_nettle_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
|   &__archive_openssl_sha384init,
|   &__archive_openssl_sha384update,
|   &__archive_openssl_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
|   &__archive_windowsapi_sha384init,
|   &__archive_windowsapi_sha384update,
|   &__archive_windowsapi_sha384final,
| #elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
|   &__archive_stub_sha384init,
|   &__archive_stub_sha384update,
|   &__archive_stub_sha384final,
| #endif
| 
| /* SHA512 */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
|   &__archive_libc_sha512init,
|   &__archive_libc_sha512update,
|   &__archive_libc_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
|   &__archive_libc2_sha512init,
|   &__archive_libc2_sha512update,
|   &__archive_libc2_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
|   &__archive_libc3_sha512init,
|   &__archive_libc3_sha512update,
|   &__archive_libc3_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
|   &__archive_libmd_sha512init,
|   &__archive_libmd_sha512update,
|   &__archive_libmd_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
|   &__archive_libsystem_sha512init,
|   &__archive_libsystem_sha512update,
|   &__archive_libsystem_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
|   &__archive_nettle_sha512init,
|   &__archive_nettle_sha512update,
|   &__archive_nettle_sha512final,
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
|   &__archive_openssl_sha512init,
|   &__archive_openssl_sha512update,
|   &__archive_openssl_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
|   &__archive_windowsapi_sha512init,
|   &__archive_windowsapi_sha512update,
|   &__archive_windowsapi_sha512final
| #elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
|   &__archive_stub_sha512init,
|   &__archive_stub_sha512update,
|   &__archive_stub_sha512final
| #endif
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_md5_ctx ctx;
|   archive_md5_init(&ctx);
|   archive_md5_update(&ctx, *argv, argc);
|   archive_md5_final(&ctx, NULL);
|   return 0;
| }
| 
configure:16818: result: no
configure:16835: checking support for ARCHIVE_CRYPTO_RMD160_LIBC
configure:16857: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g  -I. -I. -I./libarchive  conftest.c    >&5
conftest.c
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2061: syntax error : identifier '__la_read'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2059: syntax error : 'type'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2061: syntax error : identifier '__la_waitpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2146: syntax error : missing ')' before identifier 'wpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2061: syntax error : identifier 'wpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ','
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ')'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2061: syntax error : identifier '__la_write'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2059: syntax error : 'type'
./libarchive\archive_crypto_private.h(64) : fatal error C1083: Cannot open include file: 'rmd160.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16857: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| 
| #define ARCHIVE_RMD160_COMPILE_TEST
| #define ARCHIVE_CRYPTO_RMD160_LIBC
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_crypto_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| static int
| win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| 	DWORD siglen = bufsize;
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_libc_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_libmd_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_libsystem_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_nettle_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_openssl_md5init(archive_md5_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_md5());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (ctx->digest)
|     EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_windowsapi_md5init(archive_md5_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_MD5));
| }
| 
| static int
| __archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_ripemd160());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_libc_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_libmd_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_nettle_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_openssl_sha1init(archive_sha1_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha1());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (ctx->digest)
|     EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA1));
| }
| 
| static int
| __archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_libc_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_libc2_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_libc3_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_libmd_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_nettle_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_openssl_sha256init(archive_sha256_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha256());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_256));
| }
| 
| static int
| __archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_libc_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_libc2_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_libc3_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_nettle_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_openssl_sha384init(archive_sha384_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha384());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_384));
| }
| 
| static int
| __archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_libc_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_libc2_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_libc3_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_libmd_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_nettle_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_openssl_sha512init(archive_sha512_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha512());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_512));
| }
| 
| static int
| __archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Crypto functions are set based on availability and by the following
|  * order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. OpenSSL
|  * 6. Windows API
|  */
| const struct archive_crypto __archive_crypto =
| {
| /* MD5 */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
|   &__archive_libc_md5init,
|   &__archive_libc_md5update,
|   &__archive_libc_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
|   &__archive_libmd_md5init,
|   &__archive_libmd_md5update,
|   &__archive_libmd_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
|   &__archive_libsystem_md5init,
|   &__archive_libsystem_md5update,
|   &__archive_libsystem_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
|   &__archive_nettle_md5init,
|   &__archive_nettle_md5update,
|   &__archive_nettle_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
|   &__archive_openssl_md5init,
|   &__archive_openssl_md5update,
|   &__archive_openssl_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
|   &__archive_windowsapi_md5init,
|   &__archive_windowsapi_md5update,
|   &__archive_windowsapi_md5final,
| #elif !defined(ARCHIVE_MD5_COMPILE_TEST)
|   &__archive_stub_md5init,
|   &__archive_stub_md5update,
|   &__archive_stub_md5final,
| #endif
| 
| /* RIPEMD160 */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
|   &__archive_libc_ripemd160init,
|   &__archive_libc_ripemd160update,
|   &__archive_libc_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
|   &__archive_libmd_ripemd160init,
|   &__archive_libmd_ripemd160update,
|   &__archive_libmd_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
|   &__archive_nettle_ripemd160init,
|   &__archive_nettle_ripemd160update,
|   &__archive_nettle_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
|   &__archive_openssl_ripemd160init,
|   &__archive_openssl_ripemd160update,
|   &__archive_openssl_ripemd160final,
| #elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
|   &__archive_stub_ripemd160init,
|   &__archive_stub_ripemd160update,
|   &__archive_stub_ripemd160final,
| #endif
| 
| /* SHA1 */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
|   &__archive_libc_sha1init,
|   &__archive_libc_sha1update,
|   &__archive_libc_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
|   &__archive_libmd_sha1init,
|   &__archive_libmd_sha1update,
|   &__archive_libmd_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
|   &__archive_libsystem_sha1init,
|   &__archive_libsystem_sha1update,
|   &__archive_libsystem_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
|   &__archive_nettle_sha1init,
|   &__archive_nettle_sha1update,
|   &__archive_nettle_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
|   &__archive_openssl_sha1init,
|   &__archive_openssl_sha1update,
|   &__archive_openssl_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
|   &__archive_windowsapi_sha1init,
|   &__archive_windowsapi_sha1update,
|   &__archive_windowsapi_sha1final,
| #elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
|   &__archive_stub_sha1init,
|   &__archive_stub_sha1update,
|   &__archive_stub_sha1final,
| #endif
| 
| /* SHA256 */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
|   &__archive_libc_sha256init,
|   &__archive_libc_sha256update,
|   &__archive_libc_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
|   &__archive_libc2_sha256init,
|   &__archive_libc2_sha256update,
|   &__archive_libc2_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
|   &__archive_libc3_sha256init,
|   &__archive_libc3_sha256update,
|   &__archive_libc3_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
|   &__archive_libmd_sha256init,
|   &__archive_libmd_sha256update,
|   &__archive_libmd_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
|   &__archive_libsystem_sha256init,
|   &__archive_libsystem_sha256update,
|   &__archive_libsystem_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
|   &__archive_nettle_sha256init,
|   &__archive_nettle_sha256update,
|   &__archive_nettle_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
|   &__archive_openssl_sha256init,
|   &__archive_openssl_sha256update,
|   &__archive_openssl_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
|   &__archive_windowsapi_sha256init,
|   &__archive_windowsapi_sha256update,
|   &__archive_windowsapi_sha256final,
| #elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
|   &__archive_stub_sha256init,
|   &__archive_stub_sha256update,
|   &__archive_stub_sha256final,
| #endif
| 
| /* SHA384 */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
|   &__archive_libc_sha384init,
|   &__archive_libc_sha384update,
|   &__archive_libc_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
|   &__archive_libc2_sha384init,
|   &__archive_libc2_sha384update,
|   &__archive_libc2_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
|   &__archive_libc3_sha384init,
|   &__archive_libc3_sha384update,
|   &__archive_libc3_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
|   &__archive_libsystem_sha384init,
|   &__archive_libsystem_sha384update,
|   &__archive_libsystem_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
|   &__archive_nettle_sha384init,
|   &__archive_nettle_sha384update,
|   &__archive_nettle_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
|   &__archive_openssl_sha384init,
|   &__archive_openssl_sha384update,
|   &__archive_openssl_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
|   &__archive_windowsapi_sha384init,
|   &__archive_windowsapi_sha384update,
|   &__archive_windowsapi_sha384final,
| #elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
|   &__archive_stub_sha384init,
|   &__archive_stub_sha384update,
|   &__archive_stub_sha384final,
| #endif
| 
| /* SHA512 */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
|   &__archive_libc_sha512init,
|   &__archive_libc_sha512update,
|   &__archive_libc_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
|   &__archive_libc2_sha512init,
|   &__archive_libc2_sha512update,
|   &__archive_libc2_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
|   &__archive_libc3_sha512init,
|   &__archive_libc3_sha512update,
|   &__archive_libc3_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
|   &__archive_libmd_sha512init,
|   &__archive_libmd_sha512update,
|   &__archive_libmd_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
|   &__archive_libsystem_sha512init,
|   &__archive_libsystem_sha512update,
|   &__archive_libsystem_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
|   &__archive_nettle_sha512init,
|   &__archive_nettle_sha512update,
|   &__archive_nettle_sha512final,
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
|   &__archive_openssl_sha512init,
|   &__archive_openssl_sha512update,
|   &__archive_openssl_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
|   &__archive_windowsapi_sha512init,
|   &__archive_windowsapi_sha512update,
|   &__archive_windowsapi_sha512final
| #elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
|   &__archive_stub_sha512init,
|   &__archive_stub_sha512update,
|   &__archive_stub_sha512final
| #endif
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_rmd160_ctx ctx;
|   archive_rmd160_init(&ctx);
|   archive_rmd160_update(&ctx, *argv, argc);
|   archive_rmd160_final(&ctx, NULL);
|   return 0;
| }
| 
configure:16871: result: no
configure:16888: checking support for ARCHIVE_CRYPTO_SHA1_LIBC
configure:16910: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g  -I. -I. -I./libarchive  conftest.c    >&5
conftest.c
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2061: syntax error : identifier '__la_read'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2059: syntax error : 'type'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2061: syntax error : identifier '__la_waitpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2146: syntax error : missing ')' before identifier 'wpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2061: syntax error : identifier 'wpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ','
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ')'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2061: syntax error : identifier '__la_write'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2059: syntax error : 'type'
./libarchive\archive_crypto_private.h(67) : fatal error C1083: Cannot open include file: 'sha1.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16910: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| 
| #define ARCHIVE_SHA1_COMPILE_TEST
| #define ARCHIVE_CRYPTO_SHA1_LIBC
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_crypto_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| static int
| win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| 	DWORD siglen = bufsize;
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_libc_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_libmd_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_libsystem_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_nettle_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_openssl_md5init(archive_md5_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_md5());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (ctx->digest)
|     EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_windowsapi_md5init(archive_md5_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_MD5));
| }
| 
| static int
| __archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_ripemd160());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_libc_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_libmd_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_nettle_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_openssl_sha1init(archive_sha1_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha1());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (ctx->digest)
|     EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA1));
| }
| 
| static int
| __archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_libc_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_libc2_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_libc3_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_libmd_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_nettle_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_openssl_sha256init(archive_sha256_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha256());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_256));
| }
| 
| static int
| __archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_libc_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_libc2_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_libc3_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_nettle_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_openssl_sha384init(archive_sha384_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha384());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_384));
| }
| 
| static int
| __archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_libc_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_libc2_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_libc3_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_libmd_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_nettle_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_openssl_sha512init(archive_sha512_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha512());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_512));
| }
| 
| static int
| __archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Crypto functions are set based on availability and by the following
|  * order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. OpenSSL
|  * 6. Windows API
|  */
| const struct archive_crypto __archive_crypto =
| {
| /* MD5 */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
|   &__archive_libc_md5init,
|   &__archive_libc_md5update,
|   &__archive_libc_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
|   &__archive_libmd_md5init,
|   &__archive_libmd_md5update,
|   &__archive_libmd_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
|   &__archive_libsystem_md5init,
|   &__archive_libsystem_md5update,
|   &__archive_libsystem_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
|   &__archive_nettle_md5init,
|   &__archive_nettle_md5update,
|   &__archive_nettle_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
|   &__archive_openssl_md5init,
|   &__archive_openssl_md5update,
|   &__archive_openssl_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
|   &__archive_windowsapi_md5init,
|   &__archive_windowsapi_md5update,
|   &__archive_windowsapi_md5final,
| #elif !defined(ARCHIVE_MD5_COMPILE_TEST)
|   &__archive_stub_md5init,
|   &__archive_stub_md5update,
|   &__archive_stub_md5final,
| #endif
| 
| /* RIPEMD160 */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
|   &__archive_libc_ripemd160init,
|   &__archive_libc_ripemd160update,
|   &__archive_libc_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
|   &__archive_libmd_ripemd160init,
|   &__archive_libmd_ripemd160update,
|   &__archive_libmd_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
|   &__archive_nettle_ripemd160init,
|   &__archive_nettle_ripemd160update,
|   &__archive_nettle_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
|   &__archive_openssl_ripemd160init,
|   &__archive_openssl_ripemd160update,
|   &__archive_openssl_ripemd160final,
| #elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
|   &__archive_stub_ripemd160init,
|   &__archive_stub_ripemd160update,
|   &__archive_stub_ripemd160final,
| #endif
| 
| /* SHA1 */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
|   &__archive_libc_sha1init,
|   &__archive_libc_sha1update,
|   &__archive_libc_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
|   &__archive_libmd_sha1init,
|   &__archive_libmd_sha1update,
|   &__archive_libmd_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
|   &__archive_libsystem_sha1init,
|   &__archive_libsystem_sha1update,
|   &__archive_libsystem_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
|   &__archive_nettle_sha1init,
|   &__archive_nettle_sha1update,
|   &__archive_nettle_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
|   &__archive_openssl_sha1init,
|   &__archive_openssl_sha1update,
|   &__archive_openssl_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
|   &__archive_windowsapi_sha1init,
|   &__archive_windowsapi_sha1update,
|   &__archive_windowsapi_sha1final,
| #elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
|   &__archive_stub_sha1init,
|   &__archive_stub_sha1update,
|   &__archive_stub_sha1final,
| #endif
| 
| /* SHA256 */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
|   &__archive_libc_sha256init,
|   &__archive_libc_sha256update,
|   &__archive_libc_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
|   &__archive_libc2_sha256init,
|   &__archive_libc2_sha256update,
|   &__archive_libc2_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
|   &__archive_libc3_sha256init,
|   &__archive_libc3_sha256update,
|   &__archive_libc3_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
|   &__archive_libmd_sha256init,
|   &__archive_libmd_sha256update,
|   &__archive_libmd_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
|   &__archive_libsystem_sha256init,
|   &__archive_libsystem_sha256update,
|   &__archive_libsystem_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
|   &__archive_nettle_sha256init,
|   &__archive_nettle_sha256update,
|   &__archive_nettle_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
|   &__archive_openssl_sha256init,
|   &__archive_openssl_sha256update,
|   &__archive_openssl_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
|   &__archive_windowsapi_sha256init,
|   &__archive_windowsapi_sha256update,
|   &__archive_windowsapi_sha256final,
| #elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
|   &__archive_stub_sha256init,
|   &__archive_stub_sha256update,
|   &__archive_stub_sha256final,
| #endif
| 
| /* SHA384 */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
|   &__archive_libc_sha384init,
|   &__archive_libc_sha384update,
|   &__archive_libc_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
|   &__archive_libc2_sha384init,
|   &__archive_libc2_sha384update,
|   &__archive_libc2_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
|   &__archive_libc3_sha384init,
|   &__archive_libc3_sha384update,
|   &__archive_libc3_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
|   &__archive_libsystem_sha384init,
|   &__archive_libsystem_sha384update,
|   &__archive_libsystem_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
|   &__archive_nettle_sha384init,
|   &__archive_nettle_sha384update,
|   &__archive_nettle_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
|   &__archive_openssl_sha384init,
|   &__archive_openssl_sha384update,
|   &__archive_openssl_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
|   &__archive_windowsapi_sha384init,
|   &__archive_windowsapi_sha384update,
|   &__archive_windowsapi_sha384final,
| #elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
|   &__archive_stub_sha384init,
|   &__archive_stub_sha384update,
|   &__archive_stub_sha384final,
| #endif
| 
| /* SHA512 */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
|   &__archive_libc_sha512init,
|   &__archive_libc_sha512update,
|   &__archive_libc_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
|   &__archive_libc2_sha512init,
|   &__archive_libc2_sha512update,
|   &__archive_libc2_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
|   &__archive_libc3_sha512init,
|   &__archive_libc3_sha512update,
|   &__archive_libc3_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
|   &__archive_libmd_sha512init,
|   &__archive_libmd_sha512update,
|   &__archive_libmd_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
|   &__archive_libsystem_sha512init,
|   &__archive_libsystem_sha512update,
|   &__archive_libsystem_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
|   &__archive_nettle_sha512init,
|   &__archive_nettle_sha512update,
|   &__archive_nettle_sha512final,
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
|   &__archive_openssl_sha512init,
|   &__archive_openssl_sha512update,
|   &__archive_openssl_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
|   &__archive_windowsapi_sha512init,
|   &__archive_windowsapi_sha512update,
|   &__archive_windowsapi_sha512final
| #elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
|   &__archive_stub_sha512init,
|   &__archive_stub_sha512update,
|   &__archive_stub_sha512final
| #endif
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_sha1_ctx ctx;
|   archive_sha1_init(&ctx);
|   archive_sha1_update(&ctx, *argv, argc);
|   archive_sha1_final(&ctx, NULL);
|   return 0;
| }
| 
configure:16924: result: no
configure:16941: checking support for ARCHIVE_CRYPTO_SHA1_LIBSYSTEM
configure:16963: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g  -I. -I. -I./libarchive  conftest.c    >&5
conftest.c
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2061: syntax error : identifier '__la_read'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2059: syntax error : 'type'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2061: syntax error : identifier '__la_waitpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2146: syntax error : missing ')' before identifier 'wpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2061: syntax error : identifier 'wpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ','
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ')'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2061: syntax error : identifier '__la_write'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2059: syntax error : 'type'
./libarchive\archive_crypto_private.h(112) : fatal error C1083: Cannot open include file: 'CommonCrypto/CommonDigest.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:16963: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| 
| #define ARCHIVE_SHA1_COMPILE_TEST
| #define ARCHIVE_CRYPTO_SHA1_LIBSYSTEM
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_crypto_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| static int
| win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| 	DWORD siglen = bufsize;
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_libc_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_libmd_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_libsystem_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_nettle_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_openssl_md5init(archive_md5_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_md5());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (ctx->digest)
|     EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_windowsapi_md5init(archive_md5_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_MD5));
| }
| 
| static int
| __archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_ripemd160());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_libc_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_libmd_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_nettle_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_openssl_sha1init(archive_sha1_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha1());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (ctx->digest)
|     EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA1));
| }
| 
| static int
| __archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_libc_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_libc2_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_libc3_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_libmd_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_nettle_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_openssl_sha256init(archive_sha256_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha256());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_256));
| }
| 
| static int
| __archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_libc_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_libc2_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_libc3_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_nettle_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_openssl_sha384init(archive_sha384_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha384());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_384));
| }
| 
| static int
| __archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_libc_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_libc2_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_libc3_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_libmd_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_nettle_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_openssl_sha512init(archive_sha512_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha512());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_512));
| }
| 
| static int
| __archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Crypto functions are set based on availability and by the following
|  * order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. OpenSSL
|  * 6. Windows API
|  */
| const struct archive_crypto __archive_crypto =
| {
| /* MD5 */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
|   &__archive_libc_md5init,
|   &__archive_libc_md5update,
|   &__archive_libc_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
|   &__archive_libmd_md5init,
|   &__archive_libmd_md5update,
|   &__archive_libmd_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
|   &__archive_libsystem_md5init,
|   &__archive_libsystem_md5update,
|   &__archive_libsystem_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
|   &__archive_nettle_md5init,
|   &__archive_nettle_md5update,
|   &__archive_nettle_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
|   &__archive_openssl_md5init,
|   &__archive_openssl_md5update,
|   &__archive_openssl_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
|   &__archive_windowsapi_md5init,
|   &__archive_windowsapi_md5update,
|   &__archive_windowsapi_md5final,
| #elif !defined(ARCHIVE_MD5_COMPILE_TEST)
|   &__archive_stub_md5init,
|   &__archive_stub_md5update,
|   &__archive_stub_md5final,
| #endif
| 
| /* RIPEMD160 */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
|   &__archive_libc_ripemd160init,
|   &__archive_libc_ripemd160update,
|   &__archive_libc_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
|   &__archive_libmd_ripemd160init,
|   &__archive_libmd_ripemd160update,
|   &__archive_libmd_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
|   &__archive_nettle_ripemd160init,
|   &__archive_nettle_ripemd160update,
|   &__archive_nettle_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
|   &__archive_openssl_ripemd160init,
|   &__archive_openssl_ripemd160update,
|   &__archive_openssl_ripemd160final,
| #elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
|   &__archive_stub_ripemd160init,
|   &__archive_stub_ripemd160update,
|   &__archive_stub_ripemd160final,
| #endif
| 
| /* SHA1 */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
|   &__archive_libc_sha1init,
|   &__archive_libc_sha1update,
|   &__archive_libc_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
|   &__archive_libmd_sha1init,
|   &__archive_libmd_sha1update,
|   &__archive_libmd_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
|   &__archive_libsystem_sha1init,
|   &__archive_libsystem_sha1update,
|   &__archive_libsystem_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
|   &__archive_nettle_sha1init,
|   &__archive_nettle_sha1update,
|   &__archive_nettle_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
|   &__archive_openssl_sha1init,
|   &__archive_openssl_sha1update,
|   &__archive_openssl_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
|   &__archive_windowsapi_sha1init,
|   &__archive_windowsapi_sha1update,
|   &__archive_windowsapi_sha1final,
| #elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
|   &__archive_stub_sha1init,
|   &__archive_stub_sha1update,
|   &__archive_stub_sha1final,
| #endif
| 
| /* SHA256 */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
|   &__archive_libc_sha256init,
|   &__archive_libc_sha256update,
|   &__archive_libc_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
|   &__archive_libc2_sha256init,
|   &__archive_libc2_sha256update,
|   &__archive_libc2_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
|   &__archive_libc3_sha256init,
|   &__archive_libc3_sha256update,
|   &__archive_libc3_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
|   &__archive_libmd_sha256init,
|   &__archive_libmd_sha256update,
|   &__archive_libmd_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
|   &__archive_libsystem_sha256init,
|   &__archive_libsystem_sha256update,
|   &__archive_libsystem_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
|   &__archive_nettle_sha256init,
|   &__archive_nettle_sha256update,
|   &__archive_nettle_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
|   &__archive_openssl_sha256init,
|   &__archive_openssl_sha256update,
|   &__archive_openssl_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
|   &__archive_windowsapi_sha256init,
|   &__archive_windowsapi_sha256update,
|   &__archive_windowsapi_sha256final,
| #elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
|   &__archive_stub_sha256init,
|   &__archive_stub_sha256update,
|   &__archive_stub_sha256final,
| #endif
| 
| /* SHA384 */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
|   &__archive_libc_sha384init,
|   &__archive_libc_sha384update,
|   &__archive_libc_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
|   &__archive_libc2_sha384init,
|   &__archive_libc2_sha384update,
|   &__archive_libc2_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
|   &__archive_libc3_sha384init,
|   &__archive_libc3_sha384update,
|   &__archive_libc3_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
|   &__archive_libsystem_sha384init,
|   &__archive_libsystem_sha384update,
|   &__archive_libsystem_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
|   &__archive_nettle_sha384init,
|   &__archive_nettle_sha384update,
|   &__archive_nettle_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
|   &__archive_openssl_sha384init,
|   &__archive_openssl_sha384update,
|   &__archive_openssl_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
|   &__archive_windowsapi_sha384init,
|   &__archive_windowsapi_sha384update,
|   &__archive_windowsapi_sha384final,
| #elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
|   &__archive_stub_sha384init,
|   &__archive_stub_sha384update,
|   &__archive_stub_sha384final,
| #endif
| 
| /* SHA512 */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
|   &__archive_libc_sha512init,
|   &__archive_libc_sha512update,
|   &__archive_libc_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
|   &__archive_libc2_sha512init,
|   &__archive_libc2_sha512update,
|   &__archive_libc2_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
|   &__archive_libc3_sha512init,
|   &__archive_libc3_sha512update,
|   &__archive_libc3_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
|   &__archive_libmd_sha512init,
|   &__archive_libmd_sha512update,
|   &__archive_libmd_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
|   &__archive_libsystem_sha512init,
|   &__archive_libsystem_sha512update,
|   &__archive_libsystem_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
|   &__archive_nettle_sha512init,
|   &__archive_nettle_sha512update,
|   &__archive_nettle_sha512final,
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
|   &__archive_openssl_sha512init,
|   &__archive_openssl_sha512update,
|   &__archive_openssl_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
|   &__archive_windowsapi_sha512init,
|   &__archive_windowsapi_sha512update,
|   &__archive_windowsapi_sha512final
| #elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
|   &__archive_stub_sha512init,
|   &__archive_stub_sha512update,
|   &__archive_stub_sha512final
| #endif
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_sha1_ctx ctx;
|   archive_sha1_init(&ctx);
|   archive_sha1_update(&ctx, *argv, argc);
|   archive_sha1_final(&ctx, NULL);
|   return 0;
| }
| 
configure:16977: result: no
configure:16994: checking support for ARCHIVE_CRYPTO_SHA256_LIBC
configure:17016: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g  -I. -I. -I./libarchive  conftest.c    >&5
conftest.c
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2061: syntax error : identifier '__la_read'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2059: syntax error : 'type'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2061: syntax error : identifier '__la_waitpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2146: syntax error : missing ')' before identifier 'wpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2061: syntax error : identifier 'wpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ','
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ')'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2061: syntax error : identifier '__la_write'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2059: syntax error : 'type'
./libarchive\archive_crypto_private.h(78) : fatal error C1083: Cannot open include file: 'sha2.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:17016: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| 
| #define ARCHIVE_SHA256_COMPILE_TEST
| #define ARCHIVE_CRYPTO_SHA256_LIBC
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_crypto_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| static int
| win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| 	DWORD siglen = bufsize;
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_libc_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_libmd_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_libsystem_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_nettle_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_openssl_md5init(archive_md5_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_md5());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (ctx->digest)
|     EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_windowsapi_md5init(archive_md5_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_MD5));
| }
| 
| static int
| __archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_ripemd160());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_libc_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_libmd_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_nettle_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_openssl_sha1init(archive_sha1_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha1());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (ctx->digest)
|     EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA1));
| }
| 
| static int
| __archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_libc_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_libc2_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_libc3_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_libmd_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_nettle_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_openssl_sha256init(archive_sha256_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha256());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_256));
| }
| 
| static int
| __archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_libc_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_libc2_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_libc3_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_nettle_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_openssl_sha384init(archive_sha384_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha384());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_384));
| }
| 
| static int
| __archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_libc_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_libc2_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_libc3_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_libmd_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_nettle_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_openssl_sha512init(archive_sha512_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha512());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_512));
| }
| 
| static int
| __archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Crypto functions are set based on availability and by the following
|  * order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. OpenSSL
|  * 6. Windows API
|  */
| const struct archive_crypto __archive_crypto =
| {
| /* MD5 */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
|   &__archive_libc_md5init,
|   &__archive_libc_md5update,
|   &__archive_libc_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
|   &__archive_libmd_md5init,
|   &__archive_libmd_md5update,
|   &__archive_libmd_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
|   &__archive_libsystem_md5init,
|   &__archive_libsystem_md5update,
|   &__archive_libsystem_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
|   &__archive_nettle_md5init,
|   &__archive_nettle_md5update,
|   &__archive_nettle_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
|   &__archive_openssl_md5init,
|   &__archive_openssl_md5update,
|   &__archive_openssl_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
|   &__archive_windowsapi_md5init,
|   &__archive_windowsapi_md5update,
|   &__archive_windowsapi_md5final,
| #elif !defined(ARCHIVE_MD5_COMPILE_TEST)
|   &__archive_stub_md5init,
|   &__archive_stub_md5update,
|   &__archive_stub_md5final,
| #endif
| 
| /* RIPEMD160 */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
|   &__archive_libc_ripemd160init,
|   &__archive_libc_ripemd160update,
|   &__archive_libc_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
|   &__archive_libmd_ripemd160init,
|   &__archive_libmd_ripemd160update,
|   &__archive_libmd_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
|   &__archive_nettle_ripemd160init,
|   &__archive_nettle_ripemd160update,
|   &__archive_nettle_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
|   &__archive_openssl_ripemd160init,
|   &__archive_openssl_ripemd160update,
|   &__archive_openssl_ripemd160final,
| #elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
|   &__archive_stub_ripemd160init,
|   &__archive_stub_ripemd160update,
|   &__archive_stub_ripemd160final,
| #endif
| 
| /* SHA1 */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
|   &__archive_libc_sha1init,
|   &__archive_libc_sha1update,
|   &__archive_libc_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
|   &__archive_libmd_sha1init,
|   &__archive_libmd_sha1update,
|   &__archive_libmd_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
|   &__archive_libsystem_sha1init,
|   &__archive_libsystem_sha1update,
|   &__archive_libsystem_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
|   &__archive_nettle_sha1init,
|   &__archive_nettle_sha1update,
|   &__archive_nettle_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
|   &__archive_openssl_sha1init,
|   &__archive_openssl_sha1update,
|   &__archive_openssl_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
|   &__archive_windowsapi_sha1init,
|   &__archive_windowsapi_sha1update,
|   &__archive_windowsapi_sha1final,
| #elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
|   &__archive_stub_sha1init,
|   &__archive_stub_sha1update,
|   &__archive_stub_sha1final,
| #endif
| 
| /* SHA256 */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
|   &__archive_libc_sha256init,
|   &__archive_libc_sha256update,
|   &__archive_libc_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
|   &__archive_libc2_sha256init,
|   &__archive_libc2_sha256update,
|   &__archive_libc2_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
|   &__archive_libc3_sha256init,
|   &__archive_libc3_sha256update,
|   &__archive_libc3_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
|   &__archive_libmd_sha256init,
|   &__archive_libmd_sha256update,
|   &__archive_libmd_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
|   &__archive_libsystem_sha256init,
|   &__archive_libsystem_sha256update,
|   &__archive_libsystem_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
|   &__archive_nettle_sha256init,
|   &__archive_nettle_sha256update,
|   &__archive_nettle_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
|   &__archive_openssl_sha256init,
|   &__archive_openssl_sha256update,
|   &__archive_openssl_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
|   &__archive_windowsapi_sha256init,
|   &__archive_windowsapi_sha256update,
|   &__archive_windowsapi_sha256final,
| #elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
|   &__archive_stub_sha256init,
|   &__archive_stub_sha256update,
|   &__archive_stub_sha256final,
| #endif
| 
| /* SHA384 */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
|   &__archive_libc_sha384init,
|   &__archive_libc_sha384update,
|   &__archive_libc_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
|   &__archive_libc2_sha384init,
|   &__archive_libc2_sha384update,
|   &__archive_libc2_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
|   &__archive_libc3_sha384init,
|   &__archive_libc3_sha384update,
|   &__archive_libc3_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
|   &__archive_libsystem_sha384init,
|   &__archive_libsystem_sha384update,
|   &__archive_libsystem_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
|   &__archive_nettle_sha384init,
|   &__archive_nettle_sha384update,
|   &__archive_nettle_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
|   &__archive_openssl_sha384init,
|   &__archive_openssl_sha384update,
|   &__archive_openssl_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
|   &__archive_windowsapi_sha384init,
|   &__archive_windowsapi_sha384update,
|   &__archive_windowsapi_sha384final,
| #elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
|   &__archive_stub_sha384init,
|   &__archive_stub_sha384update,
|   &__archive_stub_sha384final,
| #endif
| 
| /* SHA512 */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
|   &__archive_libc_sha512init,
|   &__archive_libc_sha512update,
|   &__archive_libc_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
|   &__archive_libc2_sha512init,
|   &__archive_libc2_sha512update,
|   &__archive_libc2_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
|   &__archive_libc3_sha512init,
|   &__archive_libc3_sha512update,
|   &__archive_libc3_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
|   &__archive_libmd_sha512init,
|   &__archive_libmd_sha512update,
|   &__archive_libmd_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
|   &__archive_libsystem_sha512init,
|   &__archive_libsystem_sha512update,
|   &__archive_libsystem_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
|   &__archive_nettle_sha512init,
|   &__archive_nettle_sha512update,
|   &__archive_nettle_sha512final,
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
|   &__archive_openssl_sha512init,
|   &__archive_openssl_sha512update,
|   &__archive_openssl_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
|   &__archive_windowsapi_sha512init,
|   &__archive_windowsapi_sha512update,
|   &__archive_windowsapi_sha512final
| #elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
|   &__archive_stub_sha512init,
|   &__archive_stub_sha512update,
|   &__archive_stub_sha512final
| #endif
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_sha256_ctx ctx;
|   archive_sha256_init(&ctx);
|   archive_sha256_update(&ctx, *argv, argc);
|   archive_sha256_final(&ctx, NULL);
|   return 0;
| }
| 
configure:17030: result: no
configure:17047: checking support for ARCHIVE_CRYPTO_SHA256_LIBC2
configure:17069: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g  -I. -I. -I./libarchive  conftest.c    >&5
conftest.c
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2061: syntax error : identifier '__la_read'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2059: syntax error : 'type'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2061: syntax error : identifier '__la_waitpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2146: syntax error : missing ')' before identifier 'wpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2061: syntax error : identifier 'wpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ','
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ')'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2061: syntax error : identifier '__la_write'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2059: syntax error : 'type'
./libarchive\archive_crypto_private.h(78) : fatal error C1083: Cannot open include file: 'sha2.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:17069: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| 
| #define ARCHIVE_SHA256_COMPILE_TEST
| #define ARCHIVE_CRYPTO_SHA256_LIBC2
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_crypto_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| static int
| win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| 	DWORD siglen = bufsize;
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_libc_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_libmd_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_libsystem_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_nettle_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_openssl_md5init(archive_md5_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_md5());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (ctx->digest)
|     EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_windowsapi_md5init(archive_md5_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_MD5));
| }
| 
| static int
| __archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_ripemd160());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_libc_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_libmd_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_nettle_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_openssl_sha1init(archive_sha1_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha1());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (ctx->digest)
|     EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA1));
| }
| 
| static int
| __archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_libc_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_libc2_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_libc3_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_libmd_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_nettle_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_openssl_sha256init(archive_sha256_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha256());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_256));
| }
| 
| static int
| __archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_libc_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_libc2_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_libc3_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_nettle_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_openssl_sha384init(archive_sha384_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha384());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_384));
| }
| 
| static int
| __archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_libc_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_libc2_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_libc3_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_libmd_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_nettle_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_openssl_sha512init(archive_sha512_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha512());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_512));
| }
| 
| static int
| __archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Crypto functions are set based on availability and by the following
|  * order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. OpenSSL
|  * 6. Windows API
|  */
| const struct archive_crypto __archive_crypto =
| {
| /* MD5 */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
|   &__archive_libc_md5init,
|   &__archive_libc_md5update,
|   &__archive_libc_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
|   &__archive_libmd_md5init,
|   &__archive_libmd_md5update,
|   &__archive_libmd_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
|   &__archive_libsystem_md5init,
|   &__archive_libsystem_md5update,
|   &__archive_libsystem_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
|   &__archive_nettle_md5init,
|   &__archive_nettle_md5update,
|   &__archive_nettle_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
|   &__archive_openssl_md5init,
|   &__archive_openssl_md5update,
|   &__archive_openssl_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
|   &__archive_windowsapi_md5init,
|   &__archive_windowsapi_md5update,
|   &__archive_windowsapi_md5final,
| #elif !defined(ARCHIVE_MD5_COMPILE_TEST)
|   &__archive_stub_md5init,
|   &__archive_stub_md5update,
|   &__archive_stub_md5final,
| #endif
| 
| /* RIPEMD160 */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
|   &__archive_libc_ripemd160init,
|   &__archive_libc_ripemd160update,
|   &__archive_libc_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
|   &__archive_libmd_ripemd160init,
|   &__archive_libmd_ripemd160update,
|   &__archive_libmd_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
|   &__archive_nettle_ripemd160init,
|   &__archive_nettle_ripemd160update,
|   &__archive_nettle_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
|   &__archive_openssl_ripemd160init,
|   &__archive_openssl_ripemd160update,
|   &__archive_openssl_ripemd160final,
| #elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
|   &__archive_stub_ripemd160init,
|   &__archive_stub_ripemd160update,
|   &__archive_stub_ripemd160final,
| #endif
| 
| /* SHA1 */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
|   &__archive_libc_sha1init,
|   &__archive_libc_sha1update,
|   &__archive_libc_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
|   &__archive_libmd_sha1init,
|   &__archive_libmd_sha1update,
|   &__archive_libmd_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
|   &__archive_libsystem_sha1init,
|   &__archive_libsystem_sha1update,
|   &__archive_libsystem_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
|   &__archive_nettle_sha1init,
|   &__archive_nettle_sha1update,
|   &__archive_nettle_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
|   &__archive_openssl_sha1init,
|   &__archive_openssl_sha1update,
|   &__archive_openssl_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
|   &__archive_windowsapi_sha1init,
|   &__archive_windowsapi_sha1update,
|   &__archive_windowsapi_sha1final,
| #elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
|   &__archive_stub_sha1init,
|   &__archive_stub_sha1update,
|   &__archive_stub_sha1final,
| #endif
| 
| /* SHA256 */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
|   &__archive_libc_sha256init,
|   &__archive_libc_sha256update,
|   &__archive_libc_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
|   &__archive_libc2_sha256init,
|   &__archive_libc2_sha256update,
|   &__archive_libc2_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
|   &__archive_libc3_sha256init,
|   &__archive_libc3_sha256update,
|   &__archive_libc3_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
|   &__archive_libmd_sha256init,
|   &__archive_libmd_sha256update,
|   &__archive_libmd_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
|   &__archive_libsystem_sha256init,
|   &__archive_libsystem_sha256update,
|   &__archive_libsystem_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
|   &__archive_nettle_sha256init,
|   &__archive_nettle_sha256update,
|   &__archive_nettle_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
|   &__archive_openssl_sha256init,
|   &__archive_openssl_sha256update,
|   &__archive_openssl_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
|   &__archive_windowsapi_sha256init,
|   &__archive_windowsapi_sha256update,
|   &__archive_windowsapi_sha256final,
| #elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
|   &__archive_stub_sha256init,
|   &__archive_stub_sha256update,
|   &__archive_stub_sha256final,
| #endif
| 
| /* SHA384 */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
|   &__archive_libc_sha384init,
|   &__archive_libc_sha384update,
|   &__archive_libc_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
|   &__archive_libc2_sha384init,
|   &__archive_libc2_sha384update,
|   &__archive_libc2_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
|   &__archive_libc3_sha384init,
|   &__archive_libc3_sha384update,
|   &__archive_libc3_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
|   &__archive_libsystem_sha384init,
|   &__archive_libsystem_sha384update,
|   &__archive_libsystem_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
|   &__archive_nettle_sha384init,
|   &__archive_nettle_sha384update,
|   &__archive_nettle_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
|   &__archive_openssl_sha384init,
|   &__archive_openssl_sha384update,
|   &__archive_openssl_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
|   &__archive_windowsapi_sha384init,
|   &__archive_windowsapi_sha384update,
|   &__archive_windowsapi_sha384final,
| #elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
|   &__archive_stub_sha384init,
|   &__archive_stub_sha384update,
|   &__archive_stub_sha384final,
| #endif
| 
| /* SHA512 */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
|   &__archive_libc_sha512init,
|   &__archive_libc_sha512update,
|   &__archive_libc_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
|   &__archive_libc2_sha512init,
|   &__archive_libc2_sha512update,
|   &__archive_libc2_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
|   &__archive_libc3_sha512init,
|   &__archive_libc3_sha512update,
|   &__archive_libc3_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
|   &__archive_libmd_sha512init,
|   &__archive_libmd_sha512update,
|   &__archive_libmd_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
|   &__archive_libsystem_sha512init,
|   &__archive_libsystem_sha512update,
|   &__archive_libsystem_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
|   &__archive_nettle_sha512init,
|   &__archive_nettle_sha512update,
|   &__archive_nettle_sha512final,
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
|   &__archive_openssl_sha512init,
|   &__archive_openssl_sha512update,
|   &__archive_openssl_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
|   &__archive_windowsapi_sha512init,
|   &__archive_windowsapi_sha512update,
|   &__archive_windowsapi_sha512final
| #elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
|   &__archive_stub_sha512init,
|   &__archive_stub_sha512update,
|   &__archive_stub_sha512final
| #endif
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_sha256_ctx ctx;
|   archive_sha256_init(&ctx);
|   archive_sha256_update(&ctx, *argv, argc);
|   archive_sha256_final(&ctx, NULL);
|   return 0;
| }
| 
configure:17083: result: no
configure:17100: checking support for ARCHIVE_CRYPTO_SHA256_LIBC3
configure:17122: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g  -I. -I. -I./libarchive  conftest.c    >&5
conftest.c
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2061: syntax error : identifier '__la_read'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2059: syntax error : 'type'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2061: syntax error : identifier '__la_waitpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2146: syntax error : missing ')' before identifier 'wpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2061: syntax error : identifier 'wpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ','
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ')'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2061: syntax error : identifier '__la_write'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2059: syntax error : 'type'
./libarchive\archive_crypto_private.h(78) : fatal error C1083: Cannot open include file: 'sha2.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:17122: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| 
| #define ARCHIVE_SHA256_COMPILE_TEST
| #define ARCHIVE_CRYPTO_SHA256_LIBC3
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_crypto_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| static int
| win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| 	DWORD siglen = bufsize;
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_libc_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_libmd_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_libsystem_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_nettle_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_openssl_md5init(archive_md5_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_md5());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (ctx->digest)
|     EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_windowsapi_md5init(archive_md5_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_MD5));
| }
| 
| static int
| __archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_ripemd160());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_libc_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_libmd_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_nettle_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_openssl_sha1init(archive_sha1_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha1());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (ctx->digest)
|     EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA1));
| }
| 
| static int
| __archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_libc_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_libc2_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_libc3_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_libmd_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_nettle_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_openssl_sha256init(archive_sha256_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha256());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_256));
| }
| 
| static int
| __archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_libc_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_libc2_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_libc3_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_nettle_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_openssl_sha384init(archive_sha384_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha384());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_384));
| }
| 
| static int
| __archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_libc_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_libc2_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_libc3_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_libmd_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_nettle_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_openssl_sha512init(archive_sha512_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha512());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_512));
| }
| 
| static int
| __archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Crypto functions are set based on availability and by the following
|  * order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. OpenSSL
|  * 6. Windows API
|  */
| const struct archive_crypto __archive_crypto =
| {
| /* MD5 */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
|   &__archive_libc_md5init,
|   &__archive_libc_md5update,
|   &__archive_libc_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
|   &__archive_libmd_md5init,
|   &__archive_libmd_md5update,
|   &__archive_libmd_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
|   &__archive_libsystem_md5init,
|   &__archive_libsystem_md5update,
|   &__archive_libsystem_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
|   &__archive_nettle_md5init,
|   &__archive_nettle_md5update,
|   &__archive_nettle_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
|   &__archive_openssl_md5init,
|   &__archive_openssl_md5update,
|   &__archive_openssl_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
|   &__archive_windowsapi_md5init,
|   &__archive_windowsapi_md5update,
|   &__archive_windowsapi_md5final,
| #elif !defined(ARCHIVE_MD5_COMPILE_TEST)
|   &__archive_stub_md5init,
|   &__archive_stub_md5update,
|   &__archive_stub_md5final,
| #endif
| 
| /* RIPEMD160 */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
|   &__archive_libc_ripemd160init,
|   &__archive_libc_ripemd160update,
|   &__archive_libc_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
|   &__archive_libmd_ripemd160init,
|   &__archive_libmd_ripemd160update,
|   &__archive_libmd_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
|   &__archive_nettle_ripemd160init,
|   &__archive_nettle_ripemd160update,
|   &__archive_nettle_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
|   &__archive_openssl_ripemd160init,
|   &__archive_openssl_ripemd160update,
|   &__archive_openssl_ripemd160final,
| #elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
|   &__archive_stub_ripemd160init,
|   &__archive_stub_ripemd160update,
|   &__archive_stub_ripemd160final,
| #endif
| 
| /* SHA1 */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
|   &__archive_libc_sha1init,
|   &__archive_libc_sha1update,
|   &__archive_libc_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
|   &__archive_libmd_sha1init,
|   &__archive_libmd_sha1update,
|   &__archive_libmd_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
|   &__archive_libsystem_sha1init,
|   &__archive_libsystem_sha1update,
|   &__archive_libsystem_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
|   &__archive_nettle_sha1init,
|   &__archive_nettle_sha1update,
|   &__archive_nettle_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
|   &__archive_openssl_sha1init,
|   &__archive_openssl_sha1update,
|   &__archive_openssl_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
|   &__archive_windowsapi_sha1init,
|   &__archive_windowsapi_sha1update,
|   &__archive_windowsapi_sha1final,
| #elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
|   &__archive_stub_sha1init,
|   &__archive_stub_sha1update,
|   &__archive_stub_sha1final,
| #endif
| 
| /* SHA256 */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
|   &__archive_libc_sha256init,
|   &__archive_libc_sha256update,
|   &__archive_libc_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
|   &__archive_libc2_sha256init,
|   &__archive_libc2_sha256update,
|   &__archive_libc2_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
|   &__archive_libc3_sha256init,
|   &__archive_libc3_sha256update,
|   &__archive_libc3_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
|   &__archive_libmd_sha256init,
|   &__archive_libmd_sha256update,
|   &__archive_libmd_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
|   &__archive_libsystem_sha256init,
|   &__archive_libsystem_sha256update,
|   &__archive_libsystem_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
|   &__archive_nettle_sha256init,
|   &__archive_nettle_sha256update,
|   &__archive_nettle_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
|   &__archive_openssl_sha256init,
|   &__archive_openssl_sha256update,
|   &__archive_openssl_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
|   &__archive_windowsapi_sha256init,
|   &__archive_windowsapi_sha256update,
|   &__archive_windowsapi_sha256final,
| #elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
|   &__archive_stub_sha256init,
|   &__archive_stub_sha256update,
|   &__archive_stub_sha256final,
| #endif
| 
| /* SHA384 */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
|   &__archive_libc_sha384init,
|   &__archive_libc_sha384update,
|   &__archive_libc_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
|   &__archive_libc2_sha384init,
|   &__archive_libc2_sha384update,
|   &__archive_libc2_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
|   &__archive_libc3_sha384init,
|   &__archive_libc3_sha384update,
|   &__archive_libc3_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
|   &__archive_libsystem_sha384init,
|   &__archive_libsystem_sha384update,
|   &__archive_libsystem_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
|   &__archive_nettle_sha384init,
|   &__archive_nettle_sha384update,
|   &__archive_nettle_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
|   &__archive_openssl_sha384init,
|   &__archive_openssl_sha384update,
|   &__archive_openssl_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
|   &__archive_windowsapi_sha384init,
|   &__archive_windowsapi_sha384update,
|   &__archive_windowsapi_sha384final,
| #elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
|   &__archive_stub_sha384init,
|   &__archive_stub_sha384update,
|   &__archive_stub_sha384final,
| #endif
| 
| /* SHA512 */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
|   &__archive_libc_sha512init,
|   &__archive_libc_sha512update,
|   &__archive_libc_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
|   &__archive_libc2_sha512init,
|   &__archive_libc2_sha512update,
|   &__archive_libc2_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
|   &__archive_libc3_sha512init,
|   &__archive_libc3_sha512update,
|   &__archive_libc3_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
|   &__archive_libmd_sha512init,
|   &__archive_libmd_sha512update,
|   &__archive_libmd_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
|   &__archive_libsystem_sha512init,
|   &__archive_libsystem_sha512update,
|   &__archive_libsystem_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
|   &__archive_nettle_sha512init,
|   &__archive_nettle_sha512update,
|   &__archive_nettle_sha512final,
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
|   &__archive_openssl_sha512init,
|   &__archive_openssl_sha512update,
|   &__archive_openssl_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
|   &__archive_windowsapi_sha512init,
|   &__archive_windowsapi_sha512update,
|   &__archive_windowsapi_sha512final
| #elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
|   &__archive_stub_sha512init,
|   &__archive_stub_sha512update,
|   &__archive_stub_sha512final
| #endif
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_sha256_ctx ctx;
|   archive_sha256_init(&ctx);
|   archive_sha256_update(&ctx, *argv, argc);
|   archive_sha256_final(&ctx, NULL);
|   return 0;
| }
| 
configure:17136: result: no
configure:17153: checking support for ARCHIVE_CRYPTO_SHA256_LIBSYSTEM
configure:17175: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g  -I. -I. -I./libarchive  conftest.c    >&5
conftest.c
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2061: syntax error : identifier '__la_read'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2059: syntax error : 'type'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2061: syntax error : identifier '__la_waitpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2146: syntax error : missing ')' before identifier 'wpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2061: syntax error : identifier 'wpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ','
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ')'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2061: syntax error : identifier '__la_write'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2059: syntax error : 'type'
./libarchive\archive_crypto_private.h(112) : fatal error C1083: Cannot open include file: 'CommonCrypto/CommonDigest.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:17175: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| 
| #define ARCHIVE_SHA256_COMPILE_TEST
| #define ARCHIVE_CRYPTO_SHA256_LIBSYSTEM
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_crypto_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| static int
| win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| 	DWORD siglen = bufsize;
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_libc_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_libmd_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_libsystem_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_nettle_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_openssl_md5init(archive_md5_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_md5());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (ctx->digest)
|     EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_windowsapi_md5init(archive_md5_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_MD5));
| }
| 
| static int
| __archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_ripemd160());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_libc_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_libmd_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_nettle_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_openssl_sha1init(archive_sha1_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha1());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (ctx->digest)
|     EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA1));
| }
| 
| static int
| __archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_libc_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_libc2_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_libc3_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_libmd_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_nettle_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_openssl_sha256init(archive_sha256_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha256());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_256));
| }
| 
| static int
| __archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_libc_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_libc2_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_libc3_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_nettle_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_openssl_sha384init(archive_sha384_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha384());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_384));
| }
| 
| static int
| __archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_libc_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_libc2_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_libc3_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_libmd_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_nettle_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_openssl_sha512init(archive_sha512_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha512());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_512));
| }
| 
| static int
| __archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Crypto functions are set based on availability and by the following
|  * order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. OpenSSL
|  * 6. Windows API
|  */
| const struct archive_crypto __archive_crypto =
| {
| /* MD5 */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
|   &__archive_libc_md5init,
|   &__archive_libc_md5update,
|   &__archive_libc_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
|   &__archive_libmd_md5init,
|   &__archive_libmd_md5update,
|   &__archive_libmd_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
|   &__archive_libsystem_md5init,
|   &__archive_libsystem_md5update,
|   &__archive_libsystem_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
|   &__archive_nettle_md5init,
|   &__archive_nettle_md5update,
|   &__archive_nettle_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
|   &__archive_openssl_md5init,
|   &__archive_openssl_md5update,
|   &__archive_openssl_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
|   &__archive_windowsapi_md5init,
|   &__archive_windowsapi_md5update,
|   &__archive_windowsapi_md5final,
| #elif !defined(ARCHIVE_MD5_COMPILE_TEST)
|   &__archive_stub_md5init,
|   &__archive_stub_md5update,
|   &__archive_stub_md5final,
| #endif
| 
| /* RIPEMD160 */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
|   &__archive_libc_ripemd160init,
|   &__archive_libc_ripemd160update,
|   &__archive_libc_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
|   &__archive_libmd_ripemd160init,
|   &__archive_libmd_ripemd160update,
|   &__archive_libmd_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
|   &__archive_nettle_ripemd160init,
|   &__archive_nettle_ripemd160update,
|   &__archive_nettle_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
|   &__archive_openssl_ripemd160init,
|   &__archive_openssl_ripemd160update,
|   &__archive_openssl_ripemd160final,
| #elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
|   &__archive_stub_ripemd160init,
|   &__archive_stub_ripemd160update,
|   &__archive_stub_ripemd160final,
| #endif
| 
| /* SHA1 */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
|   &__archive_libc_sha1init,
|   &__archive_libc_sha1update,
|   &__archive_libc_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
|   &__archive_libmd_sha1init,
|   &__archive_libmd_sha1update,
|   &__archive_libmd_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
|   &__archive_libsystem_sha1init,
|   &__archive_libsystem_sha1update,
|   &__archive_libsystem_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
|   &__archive_nettle_sha1init,
|   &__archive_nettle_sha1update,
|   &__archive_nettle_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
|   &__archive_openssl_sha1init,
|   &__archive_openssl_sha1update,
|   &__archive_openssl_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
|   &__archive_windowsapi_sha1init,
|   &__archive_windowsapi_sha1update,
|   &__archive_windowsapi_sha1final,
| #elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
|   &__archive_stub_sha1init,
|   &__archive_stub_sha1update,
|   &__archive_stub_sha1final,
| #endif
| 
| /* SHA256 */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
|   &__archive_libc_sha256init,
|   &__archive_libc_sha256update,
|   &__archive_libc_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
|   &__archive_libc2_sha256init,
|   &__archive_libc2_sha256update,
|   &__archive_libc2_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
|   &__archive_libc3_sha256init,
|   &__archive_libc3_sha256update,
|   &__archive_libc3_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
|   &__archive_libmd_sha256init,
|   &__archive_libmd_sha256update,
|   &__archive_libmd_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
|   &__archive_libsystem_sha256init,
|   &__archive_libsystem_sha256update,
|   &__archive_libsystem_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
|   &__archive_nettle_sha256init,
|   &__archive_nettle_sha256update,
|   &__archive_nettle_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
|   &__archive_openssl_sha256init,
|   &__archive_openssl_sha256update,
|   &__archive_openssl_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
|   &__archive_windowsapi_sha256init,
|   &__archive_windowsapi_sha256update,
|   &__archive_windowsapi_sha256final,
| #elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
|   &__archive_stub_sha256init,
|   &__archive_stub_sha256update,
|   &__archive_stub_sha256final,
| #endif
| 
| /* SHA384 */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
|   &__archive_libc_sha384init,
|   &__archive_libc_sha384update,
|   &__archive_libc_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
|   &__archive_libc2_sha384init,
|   &__archive_libc2_sha384update,
|   &__archive_libc2_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
|   &__archive_libc3_sha384init,
|   &__archive_libc3_sha384update,
|   &__archive_libc3_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
|   &__archive_libsystem_sha384init,
|   &__archive_libsystem_sha384update,
|   &__archive_libsystem_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
|   &__archive_nettle_sha384init,
|   &__archive_nettle_sha384update,
|   &__archive_nettle_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
|   &__archive_openssl_sha384init,
|   &__archive_openssl_sha384update,
|   &__archive_openssl_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
|   &__archive_windowsapi_sha384init,
|   &__archive_windowsapi_sha384update,
|   &__archive_windowsapi_sha384final,
| #elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
|   &__archive_stub_sha384init,
|   &__archive_stub_sha384update,
|   &__archive_stub_sha384final,
| #endif
| 
| /* SHA512 */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
|   &__archive_libc_sha512init,
|   &__archive_libc_sha512update,
|   &__archive_libc_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
|   &__archive_libc2_sha512init,
|   &__archive_libc2_sha512update,
|   &__archive_libc2_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
|   &__archive_libc3_sha512init,
|   &__archive_libc3_sha512update,
|   &__archive_libc3_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
|   &__archive_libmd_sha512init,
|   &__archive_libmd_sha512update,
|   &__archive_libmd_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
|   &__archive_libsystem_sha512init,
|   &__archive_libsystem_sha512update,
|   &__archive_libsystem_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
|   &__archive_nettle_sha512init,
|   &__archive_nettle_sha512update,
|   &__archive_nettle_sha512final,
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
|   &__archive_openssl_sha512init,
|   &__archive_openssl_sha512update,
|   &__archive_openssl_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
|   &__archive_windowsapi_sha512init,
|   &__archive_windowsapi_sha512update,
|   &__archive_windowsapi_sha512final
| #elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
|   &__archive_stub_sha512init,
|   &__archive_stub_sha512update,
|   &__archive_stub_sha512final
| #endif
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_sha256_ctx ctx;
|   archive_sha256_init(&ctx);
|   archive_sha256_update(&ctx, *argv, argc);
|   archive_sha256_final(&ctx, NULL);
|   return 0;
| }
| 
configure:17189: result: no
configure:17206: checking support for ARCHIVE_CRYPTO_SHA384_LIBC
configure:17228: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g  -I. -I. -I./libarchive  conftest.c    >&5
conftest.c
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2061: syntax error : identifier '__la_read'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2059: syntax error : 'type'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2061: syntax error : identifier '__la_waitpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2146: syntax error : missing ')' before identifier 'wpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2061: syntax error : identifier 'wpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ','
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ')'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2061: syntax error : identifier '__la_write'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2059: syntax error : 'type'
./libarchive\archive_crypto_private.h(78) : fatal error C1083: Cannot open include file: 'sha2.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:17228: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| 
| #define ARCHIVE_SHA384_COMPILE_TEST
| #define ARCHIVE_CRYPTO_SHA384_LIBC
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_crypto_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| static int
| win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| 	DWORD siglen = bufsize;
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_libc_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_libmd_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_libsystem_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_nettle_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_openssl_md5init(archive_md5_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_md5());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (ctx->digest)
|     EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_windowsapi_md5init(archive_md5_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_MD5));
| }
| 
| static int
| __archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_ripemd160());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_libc_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_libmd_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_nettle_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_openssl_sha1init(archive_sha1_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha1());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (ctx->digest)
|     EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA1));
| }
| 
| static int
| __archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_libc_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_libc2_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_libc3_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_libmd_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_nettle_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_openssl_sha256init(archive_sha256_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha256());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_256));
| }
| 
| static int
| __archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_libc_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_libc2_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_libc3_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_nettle_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_openssl_sha384init(archive_sha384_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha384());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_384));
| }
| 
| static int
| __archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_libc_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_libc2_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_libc3_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_libmd_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_nettle_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_openssl_sha512init(archive_sha512_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha512());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_512));
| }
| 
| static int
| __archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Crypto functions are set based on availability and by the following
|  * order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. OpenSSL
|  * 6. Windows API
|  */
| const struct archive_crypto __archive_crypto =
| {
| /* MD5 */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
|   &__archive_libc_md5init,
|   &__archive_libc_md5update,
|   &__archive_libc_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
|   &__archive_libmd_md5init,
|   &__archive_libmd_md5update,
|   &__archive_libmd_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
|   &__archive_libsystem_md5init,
|   &__archive_libsystem_md5update,
|   &__archive_libsystem_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
|   &__archive_nettle_md5init,
|   &__archive_nettle_md5update,
|   &__archive_nettle_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
|   &__archive_openssl_md5init,
|   &__archive_openssl_md5update,
|   &__archive_openssl_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
|   &__archive_windowsapi_md5init,
|   &__archive_windowsapi_md5update,
|   &__archive_windowsapi_md5final,
| #elif !defined(ARCHIVE_MD5_COMPILE_TEST)
|   &__archive_stub_md5init,
|   &__archive_stub_md5update,
|   &__archive_stub_md5final,
| #endif
| 
| /* RIPEMD160 */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
|   &__archive_libc_ripemd160init,
|   &__archive_libc_ripemd160update,
|   &__archive_libc_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
|   &__archive_libmd_ripemd160init,
|   &__archive_libmd_ripemd160update,
|   &__archive_libmd_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
|   &__archive_nettle_ripemd160init,
|   &__archive_nettle_ripemd160update,
|   &__archive_nettle_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
|   &__archive_openssl_ripemd160init,
|   &__archive_openssl_ripemd160update,
|   &__archive_openssl_ripemd160final,
| #elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
|   &__archive_stub_ripemd160init,
|   &__archive_stub_ripemd160update,
|   &__archive_stub_ripemd160final,
| #endif
| 
| /* SHA1 */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
|   &__archive_libc_sha1init,
|   &__archive_libc_sha1update,
|   &__archive_libc_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
|   &__archive_libmd_sha1init,
|   &__archive_libmd_sha1update,
|   &__archive_libmd_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
|   &__archive_libsystem_sha1init,
|   &__archive_libsystem_sha1update,
|   &__archive_libsystem_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
|   &__archive_nettle_sha1init,
|   &__archive_nettle_sha1update,
|   &__archive_nettle_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
|   &__archive_openssl_sha1init,
|   &__archive_openssl_sha1update,
|   &__archive_openssl_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
|   &__archive_windowsapi_sha1init,
|   &__archive_windowsapi_sha1update,
|   &__archive_windowsapi_sha1final,
| #elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
|   &__archive_stub_sha1init,
|   &__archive_stub_sha1update,
|   &__archive_stub_sha1final,
| #endif
| 
| /* SHA256 */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
|   &__archive_libc_sha256init,
|   &__archive_libc_sha256update,
|   &__archive_libc_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
|   &__archive_libc2_sha256init,
|   &__archive_libc2_sha256update,
|   &__archive_libc2_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
|   &__archive_libc3_sha256init,
|   &__archive_libc3_sha256update,
|   &__archive_libc3_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
|   &__archive_libmd_sha256init,
|   &__archive_libmd_sha256update,
|   &__archive_libmd_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
|   &__archive_libsystem_sha256init,
|   &__archive_libsystem_sha256update,
|   &__archive_libsystem_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
|   &__archive_nettle_sha256init,
|   &__archive_nettle_sha256update,
|   &__archive_nettle_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
|   &__archive_openssl_sha256init,
|   &__archive_openssl_sha256update,
|   &__archive_openssl_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
|   &__archive_windowsapi_sha256init,
|   &__archive_windowsapi_sha256update,
|   &__archive_windowsapi_sha256final,
| #elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
|   &__archive_stub_sha256init,
|   &__archive_stub_sha256update,
|   &__archive_stub_sha256final,
| #endif
| 
| /* SHA384 */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
|   &__archive_libc_sha384init,
|   &__archive_libc_sha384update,
|   &__archive_libc_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
|   &__archive_libc2_sha384init,
|   &__archive_libc2_sha384update,
|   &__archive_libc2_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
|   &__archive_libc3_sha384init,
|   &__archive_libc3_sha384update,
|   &__archive_libc3_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
|   &__archive_libsystem_sha384init,
|   &__archive_libsystem_sha384update,
|   &__archive_libsystem_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
|   &__archive_nettle_sha384init,
|   &__archive_nettle_sha384update,
|   &__archive_nettle_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
|   &__archive_openssl_sha384init,
|   &__archive_openssl_sha384update,
|   &__archive_openssl_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
|   &__archive_windowsapi_sha384init,
|   &__archive_windowsapi_sha384update,
|   &__archive_windowsapi_sha384final,
| #elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
|   &__archive_stub_sha384init,
|   &__archive_stub_sha384update,
|   &__archive_stub_sha384final,
| #endif
| 
| /* SHA512 */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
|   &__archive_libc_sha512init,
|   &__archive_libc_sha512update,
|   &__archive_libc_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
|   &__archive_libc2_sha512init,
|   &__archive_libc2_sha512update,
|   &__archive_libc2_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
|   &__archive_libc3_sha512init,
|   &__archive_libc3_sha512update,
|   &__archive_libc3_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
|   &__archive_libmd_sha512init,
|   &__archive_libmd_sha512update,
|   &__archive_libmd_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
|   &__archive_libsystem_sha512init,
|   &__archive_libsystem_sha512update,
|   &__archive_libsystem_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
|   &__archive_nettle_sha512init,
|   &__archive_nettle_sha512update,
|   &__archive_nettle_sha512final,
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
|   &__archive_openssl_sha512init,
|   &__archive_openssl_sha512update,
|   &__archive_openssl_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
|   &__archive_windowsapi_sha512init,
|   &__archive_windowsapi_sha512update,
|   &__archive_windowsapi_sha512final
| #elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
|   &__archive_stub_sha512init,
|   &__archive_stub_sha512update,
|   &__archive_stub_sha512final
| #endif
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_sha384_ctx ctx;
|   archive_sha384_init(&ctx);
|   archive_sha384_update(&ctx, *argv, argc);
|   archive_sha384_final(&ctx, NULL);
|   return 0;
| }
| 
configure:17242: result: no
configure:17259: checking support for ARCHIVE_CRYPTO_SHA384_LIBC2
configure:17281: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g  -I. -I. -I./libarchive  conftest.c    >&5
conftest.c
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2061: syntax error : identifier '__la_read'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2059: syntax error : 'type'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2061: syntax error : identifier '__la_waitpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2146: syntax error : missing ')' before identifier 'wpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2061: syntax error : identifier 'wpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ','
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ')'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2061: syntax error : identifier '__la_write'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2059: syntax error : 'type'
./libarchive\archive_crypto_private.h(78) : fatal error C1083: Cannot open include file: 'sha2.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:17281: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| 
| #define ARCHIVE_SHA384_COMPILE_TEST
| #define ARCHIVE_CRYPTO_SHA384_LIBC2
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_crypto_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| static int
| win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| 	DWORD siglen = bufsize;
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_libc_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_libmd_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_libsystem_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_nettle_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_openssl_md5init(archive_md5_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_md5());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (ctx->digest)
|     EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_windowsapi_md5init(archive_md5_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_MD5));
| }
| 
| static int
| __archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_ripemd160());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_libc_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_libmd_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_nettle_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_openssl_sha1init(archive_sha1_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha1());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (ctx->digest)
|     EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA1));
| }
| 
| static int
| __archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_libc_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_libc2_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_libc3_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_libmd_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_nettle_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_openssl_sha256init(archive_sha256_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha256());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_256));
| }
| 
| static int
| __archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_libc_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_libc2_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_libc3_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_nettle_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_openssl_sha384init(archive_sha384_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha384());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_384));
| }
| 
| static int
| __archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_libc_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_libc2_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_libc3_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_libmd_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_nettle_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_openssl_sha512init(archive_sha512_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha512());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_512));
| }
| 
| static int
| __archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Crypto functions are set based on availability and by the following
|  * order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. OpenSSL
|  * 6. Windows API
|  */
| const struct archive_crypto __archive_crypto =
| {
| /* MD5 */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
|   &__archive_libc_md5init,
|   &__archive_libc_md5update,
|   &__archive_libc_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
|   &__archive_libmd_md5init,
|   &__archive_libmd_md5update,
|   &__archive_libmd_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
|   &__archive_libsystem_md5init,
|   &__archive_libsystem_md5update,
|   &__archive_libsystem_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
|   &__archive_nettle_md5init,
|   &__archive_nettle_md5update,
|   &__archive_nettle_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
|   &__archive_openssl_md5init,
|   &__archive_openssl_md5update,
|   &__archive_openssl_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
|   &__archive_windowsapi_md5init,
|   &__archive_windowsapi_md5update,
|   &__archive_windowsapi_md5final,
| #elif !defined(ARCHIVE_MD5_COMPILE_TEST)
|   &__archive_stub_md5init,
|   &__archive_stub_md5update,
|   &__archive_stub_md5final,
| #endif
| 
| /* RIPEMD160 */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
|   &__archive_libc_ripemd160init,
|   &__archive_libc_ripemd160update,
|   &__archive_libc_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
|   &__archive_libmd_ripemd160init,
|   &__archive_libmd_ripemd160update,
|   &__archive_libmd_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
|   &__archive_nettle_ripemd160init,
|   &__archive_nettle_ripemd160update,
|   &__archive_nettle_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
|   &__archive_openssl_ripemd160init,
|   &__archive_openssl_ripemd160update,
|   &__archive_openssl_ripemd160final,
| #elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
|   &__archive_stub_ripemd160init,
|   &__archive_stub_ripemd160update,
|   &__archive_stub_ripemd160final,
| #endif
| 
| /* SHA1 */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
|   &__archive_libc_sha1init,
|   &__archive_libc_sha1update,
|   &__archive_libc_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
|   &__archive_libmd_sha1init,
|   &__archive_libmd_sha1update,
|   &__archive_libmd_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
|   &__archive_libsystem_sha1init,
|   &__archive_libsystem_sha1update,
|   &__archive_libsystem_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
|   &__archive_nettle_sha1init,
|   &__archive_nettle_sha1update,
|   &__archive_nettle_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
|   &__archive_openssl_sha1init,
|   &__archive_openssl_sha1update,
|   &__archive_openssl_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
|   &__archive_windowsapi_sha1init,
|   &__archive_windowsapi_sha1update,
|   &__archive_windowsapi_sha1final,
| #elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
|   &__archive_stub_sha1init,
|   &__archive_stub_sha1update,
|   &__archive_stub_sha1final,
| #endif
| 
| /* SHA256 */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
|   &__archive_libc_sha256init,
|   &__archive_libc_sha256update,
|   &__archive_libc_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
|   &__archive_libc2_sha256init,
|   &__archive_libc2_sha256update,
|   &__archive_libc2_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
|   &__archive_libc3_sha256init,
|   &__archive_libc3_sha256update,
|   &__archive_libc3_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
|   &__archive_libmd_sha256init,
|   &__archive_libmd_sha256update,
|   &__archive_libmd_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
|   &__archive_libsystem_sha256init,
|   &__archive_libsystem_sha256update,
|   &__archive_libsystem_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
|   &__archive_nettle_sha256init,
|   &__archive_nettle_sha256update,
|   &__archive_nettle_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
|   &__archive_openssl_sha256init,
|   &__archive_openssl_sha256update,
|   &__archive_openssl_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
|   &__archive_windowsapi_sha256init,
|   &__archive_windowsapi_sha256update,
|   &__archive_windowsapi_sha256final,
| #elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
|   &__archive_stub_sha256init,
|   &__archive_stub_sha256update,
|   &__archive_stub_sha256final,
| #endif
| 
| /* SHA384 */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
|   &__archive_libc_sha384init,
|   &__archive_libc_sha384update,
|   &__archive_libc_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
|   &__archive_libc2_sha384init,
|   &__archive_libc2_sha384update,
|   &__archive_libc2_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
|   &__archive_libc3_sha384init,
|   &__archive_libc3_sha384update,
|   &__archive_libc3_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
|   &__archive_libsystem_sha384init,
|   &__archive_libsystem_sha384update,
|   &__archive_libsystem_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
|   &__archive_nettle_sha384init,
|   &__archive_nettle_sha384update,
|   &__archive_nettle_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
|   &__archive_openssl_sha384init,
|   &__archive_openssl_sha384update,
|   &__archive_openssl_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
|   &__archive_windowsapi_sha384init,
|   &__archive_windowsapi_sha384update,
|   &__archive_windowsapi_sha384final,
| #elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
|   &__archive_stub_sha384init,
|   &__archive_stub_sha384update,
|   &__archive_stub_sha384final,
| #endif
| 
| /* SHA512 */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
|   &__archive_libc_sha512init,
|   &__archive_libc_sha512update,
|   &__archive_libc_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
|   &__archive_libc2_sha512init,
|   &__archive_libc2_sha512update,
|   &__archive_libc2_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
|   &__archive_libc3_sha512init,
|   &__archive_libc3_sha512update,
|   &__archive_libc3_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
|   &__archive_libmd_sha512init,
|   &__archive_libmd_sha512update,
|   &__archive_libmd_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
|   &__archive_libsystem_sha512init,
|   &__archive_libsystem_sha512update,
|   &__archive_libsystem_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
|   &__archive_nettle_sha512init,
|   &__archive_nettle_sha512update,
|   &__archive_nettle_sha512final,
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
|   &__archive_openssl_sha512init,
|   &__archive_openssl_sha512update,
|   &__archive_openssl_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
|   &__archive_windowsapi_sha512init,
|   &__archive_windowsapi_sha512update,
|   &__archive_windowsapi_sha512final
| #elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
|   &__archive_stub_sha512init,
|   &__archive_stub_sha512update,
|   &__archive_stub_sha512final
| #endif
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_sha384_ctx ctx;
|   archive_sha384_init(&ctx);
|   archive_sha384_update(&ctx, *argv, argc);
|   archive_sha384_final(&ctx, NULL);
|   return 0;
| }
| 
configure:17295: result: no
configure:17312: checking support for ARCHIVE_CRYPTO_SHA384_LIBC3
configure:17334: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g  -I. -I. -I./libarchive  conftest.c    >&5
conftest.c
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2061: syntax error : identifier '__la_read'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2059: syntax error : 'type'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2061: syntax error : identifier '__la_waitpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2146: syntax error : missing ')' before identifier 'wpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2061: syntax error : identifier 'wpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ','
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ')'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2061: syntax error : identifier '__la_write'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2059: syntax error : 'type'
./libarchive\archive_crypto_private.h(78) : fatal error C1083: Cannot open include file: 'sha2.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:17334: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| 
| #define ARCHIVE_SHA384_COMPILE_TEST
| #define ARCHIVE_CRYPTO_SHA384_LIBC3
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_crypto_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| static int
| win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| 	DWORD siglen = bufsize;
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_libc_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_libmd_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_libsystem_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_nettle_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_openssl_md5init(archive_md5_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_md5());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (ctx->digest)
|     EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_windowsapi_md5init(archive_md5_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_MD5));
| }
| 
| static int
| __archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_ripemd160());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_libc_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_libmd_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_nettle_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_openssl_sha1init(archive_sha1_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha1());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (ctx->digest)
|     EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA1));
| }
| 
| static int
| __archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_libc_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_libc2_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_libc3_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_libmd_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_nettle_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_openssl_sha256init(archive_sha256_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha256());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_256));
| }
| 
| static int
| __archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_libc_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_libc2_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_libc3_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_nettle_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_openssl_sha384init(archive_sha384_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha384());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_384));
| }
| 
| static int
| __archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_libc_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_libc2_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_libc3_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_libmd_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_nettle_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_openssl_sha512init(archive_sha512_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha512());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_512));
| }
| 
| static int
| __archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Crypto functions are set based on availability and by the following
|  * order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. OpenSSL
|  * 6. Windows API
|  */
| const struct archive_crypto __archive_crypto =
| {
| /* MD5 */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
|   &__archive_libc_md5init,
|   &__archive_libc_md5update,
|   &__archive_libc_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
|   &__archive_libmd_md5init,
|   &__archive_libmd_md5update,
|   &__archive_libmd_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
|   &__archive_libsystem_md5init,
|   &__archive_libsystem_md5update,
|   &__archive_libsystem_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
|   &__archive_nettle_md5init,
|   &__archive_nettle_md5update,
|   &__archive_nettle_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
|   &__archive_openssl_md5init,
|   &__archive_openssl_md5update,
|   &__archive_openssl_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
|   &__archive_windowsapi_md5init,
|   &__archive_windowsapi_md5update,
|   &__archive_windowsapi_md5final,
| #elif !defined(ARCHIVE_MD5_COMPILE_TEST)
|   &__archive_stub_md5init,
|   &__archive_stub_md5update,
|   &__archive_stub_md5final,
| #endif
| 
| /* RIPEMD160 */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
|   &__archive_libc_ripemd160init,
|   &__archive_libc_ripemd160update,
|   &__archive_libc_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
|   &__archive_libmd_ripemd160init,
|   &__archive_libmd_ripemd160update,
|   &__archive_libmd_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
|   &__archive_nettle_ripemd160init,
|   &__archive_nettle_ripemd160update,
|   &__archive_nettle_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
|   &__archive_openssl_ripemd160init,
|   &__archive_openssl_ripemd160update,
|   &__archive_openssl_ripemd160final,
| #elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
|   &__archive_stub_ripemd160init,
|   &__archive_stub_ripemd160update,
|   &__archive_stub_ripemd160final,
| #endif
| 
| /* SHA1 */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
|   &__archive_libc_sha1init,
|   &__archive_libc_sha1update,
|   &__archive_libc_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
|   &__archive_libmd_sha1init,
|   &__archive_libmd_sha1update,
|   &__archive_libmd_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
|   &__archive_libsystem_sha1init,
|   &__archive_libsystem_sha1update,
|   &__archive_libsystem_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
|   &__archive_nettle_sha1init,
|   &__archive_nettle_sha1update,
|   &__archive_nettle_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
|   &__archive_openssl_sha1init,
|   &__archive_openssl_sha1update,
|   &__archive_openssl_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
|   &__archive_windowsapi_sha1init,
|   &__archive_windowsapi_sha1update,
|   &__archive_windowsapi_sha1final,
| #elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
|   &__archive_stub_sha1init,
|   &__archive_stub_sha1update,
|   &__archive_stub_sha1final,
| #endif
| 
| /* SHA256 */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
|   &__archive_libc_sha256init,
|   &__archive_libc_sha256update,
|   &__archive_libc_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
|   &__archive_libc2_sha256init,
|   &__archive_libc2_sha256update,
|   &__archive_libc2_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
|   &__archive_libc3_sha256init,
|   &__archive_libc3_sha256update,
|   &__archive_libc3_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
|   &__archive_libmd_sha256init,
|   &__archive_libmd_sha256update,
|   &__archive_libmd_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
|   &__archive_libsystem_sha256init,
|   &__archive_libsystem_sha256update,
|   &__archive_libsystem_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
|   &__archive_nettle_sha256init,
|   &__archive_nettle_sha256update,
|   &__archive_nettle_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
|   &__archive_openssl_sha256init,
|   &__archive_openssl_sha256update,
|   &__archive_openssl_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
|   &__archive_windowsapi_sha256init,
|   &__archive_windowsapi_sha256update,
|   &__archive_windowsapi_sha256final,
| #elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
|   &__archive_stub_sha256init,
|   &__archive_stub_sha256update,
|   &__archive_stub_sha256final,
| #endif
| 
| /* SHA384 */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
|   &__archive_libc_sha384init,
|   &__archive_libc_sha384update,
|   &__archive_libc_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
|   &__archive_libc2_sha384init,
|   &__archive_libc2_sha384update,
|   &__archive_libc2_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
|   &__archive_libc3_sha384init,
|   &__archive_libc3_sha384update,
|   &__archive_libc3_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
|   &__archive_libsystem_sha384init,
|   &__archive_libsystem_sha384update,
|   &__archive_libsystem_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
|   &__archive_nettle_sha384init,
|   &__archive_nettle_sha384update,
|   &__archive_nettle_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
|   &__archive_openssl_sha384init,
|   &__archive_openssl_sha384update,
|   &__archive_openssl_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
|   &__archive_windowsapi_sha384init,
|   &__archive_windowsapi_sha384update,
|   &__archive_windowsapi_sha384final,
| #elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
|   &__archive_stub_sha384init,
|   &__archive_stub_sha384update,
|   &__archive_stub_sha384final,
| #endif
| 
| /* SHA512 */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
|   &__archive_libc_sha512init,
|   &__archive_libc_sha512update,
|   &__archive_libc_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
|   &__archive_libc2_sha512init,
|   &__archive_libc2_sha512update,
|   &__archive_libc2_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
|   &__archive_libc3_sha512init,
|   &__archive_libc3_sha512update,
|   &__archive_libc3_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
|   &__archive_libmd_sha512init,
|   &__archive_libmd_sha512update,
|   &__archive_libmd_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
|   &__archive_libsystem_sha512init,
|   &__archive_libsystem_sha512update,
|   &__archive_libsystem_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
|   &__archive_nettle_sha512init,
|   &__archive_nettle_sha512update,
|   &__archive_nettle_sha512final,
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
|   &__archive_openssl_sha512init,
|   &__archive_openssl_sha512update,
|   &__archive_openssl_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
|   &__archive_windowsapi_sha512init,
|   &__archive_windowsapi_sha512update,
|   &__archive_windowsapi_sha512final
| #elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
|   &__archive_stub_sha512init,
|   &__archive_stub_sha512update,
|   &__archive_stub_sha512final
| #endif
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_sha384_ctx ctx;
|   archive_sha384_init(&ctx);
|   archive_sha384_update(&ctx, *argv, argc);
|   archive_sha384_final(&ctx, NULL);
|   return 0;
| }
| 
configure:17348: result: no
configure:17365: checking support for ARCHIVE_CRYPTO_SHA384_LIBSYSTEM
configure:17387: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g  -I. -I. -I./libarchive  conftest.c    >&5
conftest.c
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2061: syntax error : identifier '__la_read'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2059: syntax error : 'type'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2061: syntax error : identifier '__la_waitpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2146: syntax error : missing ')' before identifier 'wpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2061: syntax error : identifier 'wpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ','
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ')'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2061: syntax error : identifier '__la_write'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2059: syntax error : 'type'
./libarchive\archive_crypto_private.h(112) : fatal error C1083: Cannot open include file: 'CommonCrypto/CommonDigest.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:17387: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| 
| #define ARCHIVE_SHA384_COMPILE_TEST
| #define ARCHIVE_CRYPTO_SHA384_LIBSYSTEM
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_crypto_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| static int
| win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| 	DWORD siglen = bufsize;
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_libc_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_libmd_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_libsystem_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_nettle_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_openssl_md5init(archive_md5_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_md5());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (ctx->digest)
|     EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_windowsapi_md5init(archive_md5_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_MD5));
| }
| 
| static int
| __archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_ripemd160());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_libc_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_libmd_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_nettle_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_openssl_sha1init(archive_sha1_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha1());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (ctx->digest)
|     EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA1));
| }
| 
| static int
| __archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_libc_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_libc2_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_libc3_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_libmd_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_nettle_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_openssl_sha256init(archive_sha256_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha256());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_256));
| }
| 
| static int
| __archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_libc_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_libc2_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_libc3_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_nettle_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_openssl_sha384init(archive_sha384_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha384());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_384));
| }
| 
| static int
| __archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_libc_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_libc2_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_libc3_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_libmd_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_nettle_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_openssl_sha512init(archive_sha512_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha512());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_512));
| }
| 
| static int
| __archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Crypto functions are set based on availability and by the following
|  * order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. OpenSSL
|  * 6. Windows API
|  */
| const struct archive_crypto __archive_crypto =
| {
| /* MD5 */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
|   &__archive_libc_md5init,
|   &__archive_libc_md5update,
|   &__archive_libc_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
|   &__archive_libmd_md5init,
|   &__archive_libmd_md5update,
|   &__archive_libmd_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
|   &__archive_libsystem_md5init,
|   &__archive_libsystem_md5update,
|   &__archive_libsystem_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
|   &__archive_nettle_md5init,
|   &__archive_nettle_md5update,
|   &__archive_nettle_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
|   &__archive_openssl_md5init,
|   &__archive_openssl_md5update,
|   &__archive_openssl_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
|   &__archive_windowsapi_md5init,
|   &__archive_windowsapi_md5update,
|   &__archive_windowsapi_md5final,
| #elif !defined(ARCHIVE_MD5_COMPILE_TEST)
|   &__archive_stub_md5init,
|   &__archive_stub_md5update,
|   &__archive_stub_md5final,
| #endif
| 
| /* RIPEMD160 */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
|   &__archive_libc_ripemd160init,
|   &__archive_libc_ripemd160update,
|   &__archive_libc_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
|   &__archive_libmd_ripemd160init,
|   &__archive_libmd_ripemd160update,
|   &__archive_libmd_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
|   &__archive_nettle_ripemd160init,
|   &__archive_nettle_ripemd160update,
|   &__archive_nettle_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
|   &__archive_openssl_ripemd160init,
|   &__archive_openssl_ripemd160update,
|   &__archive_openssl_ripemd160final,
| #elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
|   &__archive_stub_ripemd160init,
|   &__archive_stub_ripemd160update,
|   &__archive_stub_ripemd160final,
| #endif
| 
| /* SHA1 */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
|   &__archive_libc_sha1init,
|   &__archive_libc_sha1update,
|   &__archive_libc_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
|   &__archive_libmd_sha1init,
|   &__archive_libmd_sha1update,
|   &__archive_libmd_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
|   &__archive_libsystem_sha1init,
|   &__archive_libsystem_sha1update,
|   &__archive_libsystem_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
|   &__archive_nettle_sha1init,
|   &__archive_nettle_sha1update,
|   &__archive_nettle_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
|   &__archive_openssl_sha1init,
|   &__archive_openssl_sha1update,
|   &__archive_openssl_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
|   &__archive_windowsapi_sha1init,
|   &__archive_windowsapi_sha1update,
|   &__archive_windowsapi_sha1final,
| #elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
|   &__archive_stub_sha1init,
|   &__archive_stub_sha1update,
|   &__archive_stub_sha1final,
| #endif
| 
| /* SHA256 */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
|   &__archive_libc_sha256init,
|   &__archive_libc_sha256update,
|   &__archive_libc_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
|   &__archive_libc2_sha256init,
|   &__archive_libc2_sha256update,
|   &__archive_libc2_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
|   &__archive_libc3_sha256init,
|   &__archive_libc3_sha256update,
|   &__archive_libc3_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
|   &__archive_libmd_sha256init,
|   &__archive_libmd_sha256update,
|   &__archive_libmd_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
|   &__archive_libsystem_sha256init,
|   &__archive_libsystem_sha256update,
|   &__archive_libsystem_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
|   &__archive_nettle_sha256init,
|   &__archive_nettle_sha256update,
|   &__archive_nettle_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
|   &__archive_openssl_sha256init,
|   &__archive_openssl_sha256update,
|   &__archive_openssl_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
|   &__archive_windowsapi_sha256init,
|   &__archive_windowsapi_sha256update,
|   &__archive_windowsapi_sha256final,
| #elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
|   &__archive_stub_sha256init,
|   &__archive_stub_sha256update,
|   &__archive_stub_sha256final,
| #endif
| 
| /* SHA384 */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
|   &__archive_libc_sha384init,
|   &__archive_libc_sha384update,
|   &__archive_libc_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
|   &__archive_libc2_sha384init,
|   &__archive_libc2_sha384update,
|   &__archive_libc2_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
|   &__archive_libc3_sha384init,
|   &__archive_libc3_sha384update,
|   &__archive_libc3_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
|   &__archive_libsystem_sha384init,
|   &__archive_libsystem_sha384update,
|   &__archive_libsystem_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
|   &__archive_nettle_sha384init,
|   &__archive_nettle_sha384update,
|   &__archive_nettle_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
|   &__archive_openssl_sha384init,
|   &__archive_openssl_sha384update,
|   &__archive_openssl_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
|   &__archive_windowsapi_sha384init,
|   &__archive_windowsapi_sha384update,
|   &__archive_windowsapi_sha384final,
| #elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
|   &__archive_stub_sha384init,
|   &__archive_stub_sha384update,
|   &__archive_stub_sha384final,
| #endif
| 
| /* SHA512 */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
|   &__archive_libc_sha512init,
|   &__archive_libc_sha512update,
|   &__archive_libc_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
|   &__archive_libc2_sha512init,
|   &__archive_libc2_sha512update,
|   &__archive_libc2_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
|   &__archive_libc3_sha512init,
|   &__archive_libc3_sha512update,
|   &__archive_libc3_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
|   &__archive_libmd_sha512init,
|   &__archive_libmd_sha512update,
|   &__archive_libmd_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
|   &__archive_libsystem_sha512init,
|   &__archive_libsystem_sha512update,
|   &__archive_libsystem_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
|   &__archive_nettle_sha512init,
|   &__archive_nettle_sha512update,
|   &__archive_nettle_sha512final,
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
|   &__archive_openssl_sha512init,
|   &__archive_openssl_sha512update,
|   &__archive_openssl_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
|   &__archive_windowsapi_sha512init,
|   &__archive_windowsapi_sha512update,
|   &__archive_windowsapi_sha512final
| #elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
|   &__archive_stub_sha512init,
|   &__archive_stub_sha512update,
|   &__archive_stub_sha512final
| #endif
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_sha384_ctx ctx;
|   archive_sha384_init(&ctx);
|   archive_sha384_update(&ctx, *argv, argc);
|   archive_sha384_final(&ctx, NULL);
|   return 0;
| }
| 
configure:17401: result: no
configure:17418: checking support for ARCHIVE_CRYPTO_SHA512_LIBC
configure:17440: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g  -I. -I. -I./libarchive  conftest.c    >&5
conftest.c
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2061: syntax error : identifier '__la_read'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2059: syntax error : 'type'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2061: syntax error : identifier '__la_waitpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2146: syntax error : missing ')' before identifier 'wpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2061: syntax error : identifier 'wpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ','
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ')'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2061: syntax error : identifier '__la_write'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2059: syntax error : 'type'
./libarchive\archive_crypto_private.h(78) : fatal error C1083: Cannot open include file: 'sha2.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:17440: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| 
| #define ARCHIVE_SHA512_COMPILE_TEST
| #define ARCHIVE_CRYPTO_SHA512_LIBC
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_crypto_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| static int
| win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| 	DWORD siglen = bufsize;
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_libc_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_libmd_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_libsystem_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_nettle_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_openssl_md5init(archive_md5_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_md5());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (ctx->digest)
|     EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_windowsapi_md5init(archive_md5_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_MD5));
| }
| 
| static int
| __archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_ripemd160());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_libc_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_libmd_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_nettle_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_openssl_sha1init(archive_sha1_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha1());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (ctx->digest)
|     EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA1));
| }
| 
| static int
| __archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_libc_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_libc2_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_libc3_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_libmd_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_nettle_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_openssl_sha256init(archive_sha256_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha256());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_256));
| }
| 
| static int
| __archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_libc_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_libc2_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_libc3_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_nettle_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_openssl_sha384init(archive_sha384_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha384());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_384));
| }
| 
| static int
| __archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_libc_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_libc2_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_libc3_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_libmd_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_nettle_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_openssl_sha512init(archive_sha512_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha512());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_512));
| }
| 
| static int
| __archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Crypto functions are set based on availability and by the following
|  * order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. OpenSSL
|  * 6. Windows API
|  */
| const struct archive_crypto __archive_crypto =
| {
| /* MD5 */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
|   &__archive_libc_md5init,
|   &__archive_libc_md5update,
|   &__archive_libc_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
|   &__archive_libmd_md5init,
|   &__archive_libmd_md5update,
|   &__archive_libmd_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
|   &__archive_libsystem_md5init,
|   &__archive_libsystem_md5update,
|   &__archive_libsystem_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
|   &__archive_nettle_md5init,
|   &__archive_nettle_md5update,
|   &__archive_nettle_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
|   &__archive_openssl_md5init,
|   &__archive_openssl_md5update,
|   &__archive_openssl_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
|   &__archive_windowsapi_md5init,
|   &__archive_windowsapi_md5update,
|   &__archive_windowsapi_md5final,
| #elif !defined(ARCHIVE_MD5_COMPILE_TEST)
|   &__archive_stub_md5init,
|   &__archive_stub_md5update,
|   &__archive_stub_md5final,
| #endif
| 
| /* RIPEMD160 */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
|   &__archive_libc_ripemd160init,
|   &__archive_libc_ripemd160update,
|   &__archive_libc_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
|   &__archive_libmd_ripemd160init,
|   &__archive_libmd_ripemd160update,
|   &__archive_libmd_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
|   &__archive_nettle_ripemd160init,
|   &__archive_nettle_ripemd160update,
|   &__archive_nettle_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
|   &__archive_openssl_ripemd160init,
|   &__archive_openssl_ripemd160update,
|   &__archive_openssl_ripemd160final,
| #elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
|   &__archive_stub_ripemd160init,
|   &__archive_stub_ripemd160update,
|   &__archive_stub_ripemd160final,
| #endif
| 
| /* SHA1 */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
|   &__archive_libc_sha1init,
|   &__archive_libc_sha1update,
|   &__archive_libc_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
|   &__archive_libmd_sha1init,
|   &__archive_libmd_sha1update,
|   &__archive_libmd_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
|   &__archive_libsystem_sha1init,
|   &__archive_libsystem_sha1update,
|   &__archive_libsystem_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
|   &__archive_nettle_sha1init,
|   &__archive_nettle_sha1update,
|   &__archive_nettle_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
|   &__archive_openssl_sha1init,
|   &__archive_openssl_sha1update,
|   &__archive_openssl_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
|   &__archive_windowsapi_sha1init,
|   &__archive_windowsapi_sha1update,
|   &__archive_windowsapi_sha1final,
| #elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
|   &__archive_stub_sha1init,
|   &__archive_stub_sha1update,
|   &__archive_stub_sha1final,
| #endif
| 
| /* SHA256 */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
|   &__archive_libc_sha256init,
|   &__archive_libc_sha256update,
|   &__archive_libc_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
|   &__archive_libc2_sha256init,
|   &__archive_libc2_sha256update,
|   &__archive_libc2_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
|   &__archive_libc3_sha256init,
|   &__archive_libc3_sha256update,
|   &__archive_libc3_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
|   &__archive_libmd_sha256init,
|   &__archive_libmd_sha256update,
|   &__archive_libmd_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
|   &__archive_libsystem_sha256init,
|   &__archive_libsystem_sha256update,
|   &__archive_libsystem_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
|   &__archive_nettle_sha256init,
|   &__archive_nettle_sha256update,
|   &__archive_nettle_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
|   &__archive_openssl_sha256init,
|   &__archive_openssl_sha256update,
|   &__archive_openssl_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
|   &__archive_windowsapi_sha256init,
|   &__archive_windowsapi_sha256update,
|   &__archive_windowsapi_sha256final,
| #elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
|   &__archive_stub_sha256init,
|   &__archive_stub_sha256update,
|   &__archive_stub_sha256final,
| #endif
| 
| /* SHA384 */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
|   &__archive_libc_sha384init,
|   &__archive_libc_sha384update,
|   &__archive_libc_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
|   &__archive_libc2_sha384init,
|   &__archive_libc2_sha384update,
|   &__archive_libc2_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
|   &__archive_libc3_sha384init,
|   &__archive_libc3_sha384update,
|   &__archive_libc3_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
|   &__archive_libsystem_sha384init,
|   &__archive_libsystem_sha384update,
|   &__archive_libsystem_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
|   &__archive_nettle_sha384init,
|   &__archive_nettle_sha384update,
|   &__archive_nettle_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
|   &__archive_openssl_sha384init,
|   &__archive_openssl_sha384update,
|   &__archive_openssl_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
|   &__archive_windowsapi_sha384init,
|   &__archive_windowsapi_sha384update,
|   &__archive_windowsapi_sha384final,
| #elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
|   &__archive_stub_sha384init,
|   &__archive_stub_sha384update,
|   &__archive_stub_sha384final,
| #endif
| 
| /* SHA512 */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
|   &__archive_libc_sha512init,
|   &__archive_libc_sha512update,
|   &__archive_libc_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
|   &__archive_libc2_sha512init,
|   &__archive_libc2_sha512update,
|   &__archive_libc2_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
|   &__archive_libc3_sha512init,
|   &__archive_libc3_sha512update,
|   &__archive_libc3_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
|   &__archive_libmd_sha512init,
|   &__archive_libmd_sha512update,
|   &__archive_libmd_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
|   &__archive_libsystem_sha512init,
|   &__archive_libsystem_sha512update,
|   &__archive_libsystem_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
|   &__archive_nettle_sha512init,
|   &__archive_nettle_sha512update,
|   &__archive_nettle_sha512final,
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
|   &__archive_openssl_sha512init,
|   &__archive_openssl_sha512update,
|   &__archive_openssl_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
|   &__archive_windowsapi_sha512init,
|   &__archive_windowsapi_sha512update,
|   &__archive_windowsapi_sha512final
| #elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
|   &__archive_stub_sha512init,
|   &__archive_stub_sha512update,
|   &__archive_stub_sha512final
| #endif
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_sha512_ctx ctx;
|   archive_sha512_init(&ctx);
|   archive_sha512_update(&ctx, *argv, argc);
|   archive_sha512_final(&ctx, NULL);
|   return 0;
| }
| 
configure:17454: result: no
configure:17471: checking support for ARCHIVE_CRYPTO_SHA512_LIBC2
configure:17493: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g  -I. -I. -I./libarchive  conftest.c    >&5
conftest.c
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2061: syntax error : identifier '__la_read'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2059: syntax error : 'type'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2061: syntax error : identifier '__la_waitpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2146: syntax error : missing ')' before identifier 'wpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2061: syntax error : identifier 'wpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ','
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ')'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2061: syntax error : identifier '__la_write'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2059: syntax error : 'type'
./libarchive\archive_crypto_private.h(78) : fatal error C1083: Cannot open include file: 'sha2.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:17493: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| 
| #define ARCHIVE_SHA512_COMPILE_TEST
| #define ARCHIVE_CRYPTO_SHA512_LIBC2
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_crypto_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| static int
| win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| 	DWORD siglen = bufsize;
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_libc_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_libmd_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_libsystem_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_nettle_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_openssl_md5init(archive_md5_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_md5());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (ctx->digest)
|     EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_windowsapi_md5init(archive_md5_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_MD5));
| }
| 
| static int
| __archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_ripemd160());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_libc_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_libmd_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_nettle_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_openssl_sha1init(archive_sha1_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha1());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (ctx->digest)
|     EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA1));
| }
| 
| static int
| __archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_libc_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_libc2_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_libc3_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_libmd_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_nettle_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_openssl_sha256init(archive_sha256_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha256());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_256));
| }
| 
| static int
| __archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_libc_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_libc2_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_libc3_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_nettle_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_openssl_sha384init(archive_sha384_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha384());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_384));
| }
| 
| static int
| __archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_libc_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_libc2_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_libc3_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_libmd_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_nettle_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_openssl_sha512init(archive_sha512_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha512());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_512));
| }
| 
| static int
| __archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Crypto functions are set based on availability and by the following
|  * order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. OpenSSL
|  * 6. Windows API
|  */
| const struct archive_crypto __archive_crypto =
| {
| /* MD5 */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
|   &__archive_libc_md5init,
|   &__archive_libc_md5update,
|   &__archive_libc_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
|   &__archive_libmd_md5init,
|   &__archive_libmd_md5update,
|   &__archive_libmd_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
|   &__archive_libsystem_md5init,
|   &__archive_libsystem_md5update,
|   &__archive_libsystem_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
|   &__archive_nettle_md5init,
|   &__archive_nettle_md5update,
|   &__archive_nettle_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
|   &__archive_openssl_md5init,
|   &__archive_openssl_md5update,
|   &__archive_openssl_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
|   &__archive_windowsapi_md5init,
|   &__archive_windowsapi_md5update,
|   &__archive_windowsapi_md5final,
| #elif !defined(ARCHIVE_MD5_COMPILE_TEST)
|   &__archive_stub_md5init,
|   &__archive_stub_md5update,
|   &__archive_stub_md5final,
| #endif
| 
| /* RIPEMD160 */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
|   &__archive_libc_ripemd160init,
|   &__archive_libc_ripemd160update,
|   &__archive_libc_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
|   &__archive_libmd_ripemd160init,
|   &__archive_libmd_ripemd160update,
|   &__archive_libmd_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
|   &__archive_nettle_ripemd160init,
|   &__archive_nettle_ripemd160update,
|   &__archive_nettle_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
|   &__archive_openssl_ripemd160init,
|   &__archive_openssl_ripemd160update,
|   &__archive_openssl_ripemd160final,
| #elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
|   &__archive_stub_ripemd160init,
|   &__archive_stub_ripemd160update,
|   &__archive_stub_ripemd160final,
| #endif
| 
| /* SHA1 */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
|   &__archive_libc_sha1init,
|   &__archive_libc_sha1update,
|   &__archive_libc_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
|   &__archive_libmd_sha1init,
|   &__archive_libmd_sha1update,
|   &__archive_libmd_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
|   &__archive_libsystem_sha1init,
|   &__archive_libsystem_sha1update,
|   &__archive_libsystem_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
|   &__archive_nettle_sha1init,
|   &__archive_nettle_sha1update,
|   &__archive_nettle_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
|   &__archive_openssl_sha1init,
|   &__archive_openssl_sha1update,
|   &__archive_openssl_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
|   &__archive_windowsapi_sha1init,
|   &__archive_windowsapi_sha1update,
|   &__archive_windowsapi_sha1final,
| #elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
|   &__archive_stub_sha1init,
|   &__archive_stub_sha1update,
|   &__archive_stub_sha1final,
| #endif
| 
| /* SHA256 */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
|   &__archive_libc_sha256init,
|   &__archive_libc_sha256update,
|   &__archive_libc_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
|   &__archive_libc2_sha256init,
|   &__archive_libc2_sha256update,
|   &__archive_libc2_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
|   &__archive_libc3_sha256init,
|   &__archive_libc3_sha256update,
|   &__archive_libc3_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
|   &__archive_libmd_sha256init,
|   &__archive_libmd_sha256update,
|   &__archive_libmd_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
|   &__archive_libsystem_sha256init,
|   &__archive_libsystem_sha256update,
|   &__archive_libsystem_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
|   &__archive_nettle_sha256init,
|   &__archive_nettle_sha256update,
|   &__archive_nettle_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
|   &__archive_openssl_sha256init,
|   &__archive_openssl_sha256update,
|   &__archive_openssl_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
|   &__archive_windowsapi_sha256init,
|   &__archive_windowsapi_sha256update,
|   &__archive_windowsapi_sha256final,
| #elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
|   &__archive_stub_sha256init,
|   &__archive_stub_sha256update,
|   &__archive_stub_sha256final,
| #endif
| 
| /* SHA384 */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
|   &__archive_libc_sha384init,
|   &__archive_libc_sha384update,
|   &__archive_libc_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
|   &__archive_libc2_sha384init,
|   &__archive_libc2_sha384update,
|   &__archive_libc2_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
|   &__archive_libc3_sha384init,
|   &__archive_libc3_sha384update,
|   &__archive_libc3_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
|   &__archive_libsystem_sha384init,
|   &__archive_libsystem_sha384update,
|   &__archive_libsystem_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
|   &__archive_nettle_sha384init,
|   &__archive_nettle_sha384update,
|   &__archive_nettle_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
|   &__archive_openssl_sha384init,
|   &__archive_openssl_sha384update,
|   &__archive_openssl_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
|   &__archive_windowsapi_sha384init,
|   &__archive_windowsapi_sha384update,
|   &__archive_windowsapi_sha384final,
| #elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
|   &__archive_stub_sha384init,
|   &__archive_stub_sha384update,
|   &__archive_stub_sha384final,
| #endif
| 
| /* SHA512 */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
|   &__archive_libc_sha512init,
|   &__archive_libc_sha512update,
|   &__archive_libc_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
|   &__archive_libc2_sha512init,
|   &__archive_libc2_sha512update,
|   &__archive_libc2_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
|   &__archive_libc3_sha512init,
|   &__archive_libc3_sha512update,
|   &__archive_libc3_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
|   &__archive_libmd_sha512init,
|   &__archive_libmd_sha512update,
|   &__archive_libmd_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
|   &__archive_libsystem_sha512init,
|   &__archive_libsystem_sha512update,
|   &__archive_libsystem_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
|   &__archive_nettle_sha512init,
|   &__archive_nettle_sha512update,
|   &__archive_nettle_sha512final,
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
|   &__archive_openssl_sha512init,
|   &__archive_openssl_sha512update,
|   &__archive_openssl_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
|   &__archive_windowsapi_sha512init,
|   &__archive_windowsapi_sha512update,
|   &__archive_windowsapi_sha512final
| #elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
|   &__archive_stub_sha512init,
|   &__archive_stub_sha512update,
|   &__archive_stub_sha512final
| #endif
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_sha512_ctx ctx;
|   archive_sha512_init(&ctx);
|   archive_sha512_update(&ctx, *argv, argc);
|   archive_sha512_final(&ctx, NULL);
|   return 0;
| }
| 
configure:17507: result: no
configure:17524: checking support for ARCHIVE_CRYPTO_SHA512_LIBC3
configure:17546: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g  -I. -I. -I./libarchive  conftest.c    >&5
conftest.c
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2061: syntax error : identifier '__la_read'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2059: syntax error : 'type'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2061: syntax error : identifier '__la_waitpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2146: syntax error : missing ')' before identifier 'wpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2061: syntax error : identifier 'wpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ','
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ')'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2061: syntax error : identifier '__la_write'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2059: syntax error : 'type'
./libarchive\archive_crypto_private.h(78) : fatal error C1083: Cannot open include file: 'sha2.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:17546: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| 
| #define ARCHIVE_SHA512_COMPILE_TEST
| #define ARCHIVE_CRYPTO_SHA512_LIBC3
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_crypto_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| static int
| win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| 	DWORD siglen = bufsize;
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_libc_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_libmd_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_libsystem_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_nettle_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_openssl_md5init(archive_md5_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_md5());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (ctx->digest)
|     EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_windowsapi_md5init(archive_md5_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_MD5));
| }
| 
| static int
| __archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_ripemd160());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_libc_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_libmd_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_nettle_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_openssl_sha1init(archive_sha1_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha1());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (ctx->digest)
|     EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA1));
| }
| 
| static int
| __archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_libc_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_libc2_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_libc3_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_libmd_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_nettle_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_openssl_sha256init(archive_sha256_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha256());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_256));
| }
| 
| static int
| __archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_libc_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_libc2_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_libc3_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_nettle_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_openssl_sha384init(archive_sha384_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha384());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_384));
| }
| 
| static int
| __archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_libc_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_libc2_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_libc3_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_libmd_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_nettle_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_openssl_sha512init(archive_sha512_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha512());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_512));
| }
| 
| static int
| __archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Crypto functions are set based on availability and by the following
|  * order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. OpenSSL
|  * 6. Windows API
|  */
| const struct archive_crypto __archive_crypto =
| {
| /* MD5 */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
|   &__archive_libc_md5init,
|   &__archive_libc_md5update,
|   &__archive_libc_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
|   &__archive_libmd_md5init,
|   &__archive_libmd_md5update,
|   &__archive_libmd_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
|   &__archive_libsystem_md5init,
|   &__archive_libsystem_md5update,
|   &__archive_libsystem_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
|   &__archive_nettle_md5init,
|   &__archive_nettle_md5update,
|   &__archive_nettle_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
|   &__archive_openssl_md5init,
|   &__archive_openssl_md5update,
|   &__archive_openssl_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
|   &__archive_windowsapi_md5init,
|   &__archive_windowsapi_md5update,
|   &__archive_windowsapi_md5final,
| #elif !defined(ARCHIVE_MD5_COMPILE_TEST)
|   &__archive_stub_md5init,
|   &__archive_stub_md5update,
|   &__archive_stub_md5final,
| #endif
| 
| /* RIPEMD160 */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
|   &__archive_libc_ripemd160init,
|   &__archive_libc_ripemd160update,
|   &__archive_libc_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
|   &__archive_libmd_ripemd160init,
|   &__archive_libmd_ripemd160update,
|   &__archive_libmd_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
|   &__archive_nettle_ripemd160init,
|   &__archive_nettle_ripemd160update,
|   &__archive_nettle_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
|   &__archive_openssl_ripemd160init,
|   &__archive_openssl_ripemd160update,
|   &__archive_openssl_ripemd160final,
| #elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
|   &__archive_stub_ripemd160init,
|   &__archive_stub_ripemd160update,
|   &__archive_stub_ripemd160final,
| #endif
| 
| /* SHA1 */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
|   &__archive_libc_sha1init,
|   &__archive_libc_sha1update,
|   &__archive_libc_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
|   &__archive_libmd_sha1init,
|   &__archive_libmd_sha1update,
|   &__archive_libmd_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
|   &__archive_libsystem_sha1init,
|   &__archive_libsystem_sha1update,
|   &__archive_libsystem_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
|   &__archive_nettle_sha1init,
|   &__archive_nettle_sha1update,
|   &__archive_nettle_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
|   &__archive_openssl_sha1init,
|   &__archive_openssl_sha1update,
|   &__archive_openssl_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
|   &__archive_windowsapi_sha1init,
|   &__archive_windowsapi_sha1update,
|   &__archive_windowsapi_sha1final,
| #elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
|   &__archive_stub_sha1init,
|   &__archive_stub_sha1update,
|   &__archive_stub_sha1final,
| #endif
| 
| /* SHA256 */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
|   &__archive_libc_sha256init,
|   &__archive_libc_sha256update,
|   &__archive_libc_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
|   &__archive_libc2_sha256init,
|   &__archive_libc2_sha256update,
|   &__archive_libc2_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
|   &__archive_libc3_sha256init,
|   &__archive_libc3_sha256update,
|   &__archive_libc3_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
|   &__archive_libmd_sha256init,
|   &__archive_libmd_sha256update,
|   &__archive_libmd_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
|   &__archive_libsystem_sha256init,
|   &__archive_libsystem_sha256update,
|   &__archive_libsystem_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
|   &__archive_nettle_sha256init,
|   &__archive_nettle_sha256update,
|   &__archive_nettle_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
|   &__archive_openssl_sha256init,
|   &__archive_openssl_sha256update,
|   &__archive_openssl_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
|   &__archive_windowsapi_sha256init,
|   &__archive_windowsapi_sha256update,
|   &__archive_windowsapi_sha256final,
| #elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
|   &__archive_stub_sha256init,
|   &__archive_stub_sha256update,
|   &__archive_stub_sha256final,
| #endif
| 
| /* SHA384 */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
|   &__archive_libc_sha384init,
|   &__archive_libc_sha384update,
|   &__archive_libc_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
|   &__archive_libc2_sha384init,
|   &__archive_libc2_sha384update,
|   &__archive_libc2_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
|   &__archive_libc3_sha384init,
|   &__archive_libc3_sha384update,
|   &__archive_libc3_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
|   &__archive_libsystem_sha384init,
|   &__archive_libsystem_sha384update,
|   &__archive_libsystem_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
|   &__archive_nettle_sha384init,
|   &__archive_nettle_sha384update,
|   &__archive_nettle_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
|   &__archive_openssl_sha384init,
|   &__archive_openssl_sha384update,
|   &__archive_openssl_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
|   &__archive_windowsapi_sha384init,
|   &__archive_windowsapi_sha384update,
|   &__archive_windowsapi_sha384final,
| #elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
|   &__archive_stub_sha384init,
|   &__archive_stub_sha384update,
|   &__archive_stub_sha384final,
| #endif
| 
| /* SHA512 */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
|   &__archive_libc_sha512init,
|   &__archive_libc_sha512update,
|   &__archive_libc_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
|   &__archive_libc2_sha512init,
|   &__archive_libc2_sha512update,
|   &__archive_libc2_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
|   &__archive_libc3_sha512init,
|   &__archive_libc3_sha512update,
|   &__archive_libc3_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
|   &__archive_libmd_sha512init,
|   &__archive_libmd_sha512update,
|   &__archive_libmd_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
|   &__archive_libsystem_sha512init,
|   &__archive_libsystem_sha512update,
|   &__archive_libsystem_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
|   &__archive_nettle_sha512init,
|   &__archive_nettle_sha512update,
|   &__archive_nettle_sha512final,
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
|   &__archive_openssl_sha512init,
|   &__archive_openssl_sha512update,
|   &__archive_openssl_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
|   &__archive_windowsapi_sha512init,
|   &__archive_windowsapi_sha512update,
|   &__archive_windowsapi_sha512final
| #elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
|   &__archive_stub_sha512init,
|   &__archive_stub_sha512update,
|   &__archive_stub_sha512final
| #endif
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_sha512_ctx ctx;
|   archive_sha512_init(&ctx);
|   archive_sha512_update(&ctx, *argv, argc);
|   archive_sha512_final(&ctx, NULL);
|   return 0;
| }
| 
configure:17560: result: no
configure:17577: checking support for ARCHIVE_CRYPTO_SHA512_LIBSYSTEM
configure:17599: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g  -I. -I. -I./libarchive  conftest.c    >&5
conftest.c
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2061: syntax error : identifier '__la_read'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2059: syntax error : 'type'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2061: syntax error : identifier '__la_waitpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2146: syntax error : missing ')' before identifier 'wpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2061: syntax error : identifier 'wpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ','
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ')'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2061: syntax error : identifier '__la_write'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2059: syntax error : 'type'
./libarchive\archive_crypto_private.h(112) : fatal error C1083: Cannot open include file: 'CommonCrypto/CommonDigest.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
configure:17599: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| 
| #define ARCHIVE_SHA512_COMPILE_TEST
| #define ARCHIVE_CRYPTO_SHA512_LIBSYSTEM
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_crypto_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| static int
| win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| 	DWORD siglen = bufsize;
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_libc_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_libmd_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_libsystem_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_nettle_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_openssl_md5init(archive_md5_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_md5());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (ctx->digest)
|     EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_windowsapi_md5init(archive_md5_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_MD5));
| }
| 
| static int
| __archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_ripemd160());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_libc_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_libmd_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_nettle_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_openssl_sha1init(archive_sha1_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha1());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (ctx->digest)
|     EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA1));
| }
| 
| static int
| __archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_libc_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_libc2_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_libc3_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_libmd_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_nettle_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_openssl_sha256init(archive_sha256_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha256());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_256));
| }
| 
| static int
| __archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_libc_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_libc2_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_libc3_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_nettle_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_openssl_sha384init(archive_sha384_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha384());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_384));
| }
| 
| static int
| __archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_libc_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_libc2_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_libc3_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_libmd_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_nettle_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_openssl_sha512init(archive_sha512_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha512());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_512));
| }
| 
| static int
| __archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Crypto functions are set based on availability and by the following
|  * order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. OpenSSL
|  * 6. Windows API
|  */
| const struct archive_crypto __archive_crypto =
| {
| /* MD5 */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
|   &__archive_libc_md5init,
|   &__archive_libc_md5update,
|   &__archive_libc_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
|   &__archive_libmd_md5init,
|   &__archive_libmd_md5update,
|   &__archive_libmd_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
|   &__archive_libsystem_md5init,
|   &__archive_libsystem_md5update,
|   &__archive_libsystem_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
|   &__archive_nettle_md5init,
|   &__archive_nettle_md5update,
|   &__archive_nettle_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
|   &__archive_openssl_md5init,
|   &__archive_openssl_md5update,
|   &__archive_openssl_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
|   &__archive_windowsapi_md5init,
|   &__archive_windowsapi_md5update,
|   &__archive_windowsapi_md5final,
| #elif !defined(ARCHIVE_MD5_COMPILE_TEST)
|   &__archive_stub_md5init,
|   &__archive_stub_md5update,
|   &__archive_stub_md5final,
| #endif
| 
| /* RIPEMD160 */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
|   &__archive_libc_ripemd160init,
|   &__archive_libc_ripemd160update,
|   &__archive_libc_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
|   &__archive_libmd_ripemd160init,
|   &__archive_libmd_ripemd160update,
|   &__archive_libmd_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
|   &__archive_nettle_ripemd160init,
|   &__archive_nettle_ripemd160update,
|   &__archive_nettle_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
|   &__archive_openssl_ripemd160init,
|   &__archive_openssl_ripemd160update,
|   &__archive_openssl_ripemd160final,
| #elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
|   &__archive_stub_ripemd160init,
|   &__archive_stub_ripemd160update,
|   &__archive_stub_ripemd160final,
| #endif
| 
| /* SHA1 */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
|   &__archive_libc_sha1init,
|   &__archive_libc_sha1update,
|   &__archive_libc_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
|   &__archive_libmd_sha1init,
|   &__archive_libmd_sha1update,
|   &__archive_libmd_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
|   &__archive_libsystem_sha1init,
|   &__archive_libsystem_sha1update,
|   &__archive_libsystem_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
|   &__archive_nettle_sha1init,
|   &__archive_nettle_sha1update,
|   &__archive_nettle_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
|   &__archive_openssl_sha1init,
|   &__archive_openssl_sha1update,
|   &__archive_openssl_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
|   &__archive_windowsapi_sha1init,
|   &__archive_windowsapi_sha1update,
|   &__archive_windowsapi_sha1final,
| #elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
|   &__archive_stub_sha1init,
|   &__archive_stub_sha1update,
|   &__archive_stub_sha1final,
| #endif
| 
| /* SHA256 */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
|   &__archive_libc_sha256init,
|   &__archive_libc_sha256update,
|   &__archive_libc_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
|   &__archive_libc2_sha256init,
|   &__archive_libc2_sha256update,
|   &__archive_libc2_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
|   &__archive_libc3_sha256init,
|   &__archive_libc3_sha256update,
|   &__archive_libc3_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
|   &__archive_libmd_sha256init,
|   &__archive_libmd_sha256update,
|   &__archive_libmd_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
|   &__archive_libsystem_sha256init,
|   &__archive_libsystem_sha256update,
|   &__archive_libsystem_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
|   &__archive_nettle_sha256init,
|   &__archive_nettle_sha256update,
|   &__archive_nettle_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
|   &__archive_openssl_sha256init,
|   &__archive_openssl_sha256update,
|   &__archive_openssl_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
|   &__archive_windowsapi_sha256init,
|   &__archive_windowsapi_sha256update,
|   &__archive_windowsapi_sha256final,
| #elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
|   &__archive_stub_sha256init,
|   &__archive_stub_sha256update,
|   &__archive_stub_sha256final,
| #endif
| 
| /* SHA384 */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
|   &__archive_libc_sha384init,
|   &__archive_libc_sha384update,
|   &__archive_libc_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
|   &__archive_libc2_sha384init,
|   &__archive_libc2_sha384update,
|   &__archive_libc2_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
|   &__archive_libc3_sha384init,
|   &__archive_libc3_sha384update,
|   &__archive_libc3_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
|   &__archive_libsystem_sha384init,
|   &__archive_libsystem_sha384update,
|   &__archive_libsystem_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
|   &__archive_nettle_sha384init,
|   &__archive_nettle_sha384update,
|   &__archive_nettle_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
|   &__archive_openssl_sha384init,
|   &__archive_openssl_sha384update,
|   &__archive_openssl_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
|   &__archive_windowsapi_sha384init,
|   &__archive_windowsapi_sha384update,
|   &__archive_windowsapi_sha384final,
| #elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
|   &__archive_stub_sha384init,
|   &__archive_stub_sha384update,
|   &__archive_stub_sha384final,
| #endif
| 
| /* SHA512 */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
|   &__archive_libc_sha512init,
|   &__archive_libc_sha512update,
|   &__archive_libc_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
|   &__archive_libc2_sha512init,
|   &__archive_libc2_sha512update,
|   &__archive_libc2_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
|   &__archive_libc3_sha512init,
|   &__archive_libc3_sha512update,
|   &__archive_libc3_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
|   &__archive_libmd_sha512init,
|   &__archive_libmd_sha512update,
|   &__archive_libmd_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
|   &__archive_libsystem_sha512init,
|   &__archive_libsystem_sha512update,
|   &__archive_libsystem_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
|   &__archive_nettle_sha512init,
|   &__archive_nettle_sha512update,
|   &__archive_nettle_sha512final,
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
|   &__archive_openssl_sha512init,
|   &__archive_openssl_sha512update,
|   &__archive_openssl_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
|   &__archive_windowsapi_sha512init,
|   &__archive_windowsapi_sha512update,
|   &__archive_windowsapi_sha512final
| #elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
|   &__archive_stub_sha512init,
|   &__archive_stub_sha512update,
|   &__archive_stub_sha512final
| #endif
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_sha512_ctx ctx;
|   archive_sha512_init(&ctx);
|   archive_sha512_update(&ctx, *argv, argc);
|   archive_sha512_final(&ctx, NULL);
|   return 0;
| }
| 
configure:17613: result: no
configure:17632: checking support for ARCHIVE_CRYPTO_MD5_NETTLE
configure:17654: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g  -I. -I. -I./libarchive  conftest.c   -lnettle >&5
conftest.c
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2061: syntax error : identifier '__la_read'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2059: syntax error : 'type'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2061: syntax error : identifier '__la_waitpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2146: syntax error : missing ')' before identifier 'wpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2061: syntax error : identifier 'wpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ','
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ')'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2061: syntax error : identifier '__la_write'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2059: syntax error : 'type'
./libarchive\archive_crypto_private.h(117) : fatal error C1083: Cannot open include file: 'nettle/md5.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
cl : Command line warning D9002 : ignoring unknown option '-lnettle'
configure:17654: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| 
| #define ARCHIVE_MD5_COMPILE_TEST
| #define ARCHIVE_CRYPTO_MD5_NETTLE
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_crypto_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| static int
| win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| 	DWORD siglen = bufsize;
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_libc_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_libmd_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_libsystem_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_nettle_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_openssl_md5init(archive_md5_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_md5());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (ctx->digest)
|     EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_windowsapi_md5init(archive_md5_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_MD5));
| }
| 
| static int
| __archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_ripemd160());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_libc_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_libmd_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_nettle_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_openssl_sha1init(archive_sha1_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha1());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (ctx->digest)
|     EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA1));
| }
| 
| static int
| __archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_libc_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_libc2_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_libc3_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_libmd_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_nettle_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_openssl_sha256init(archive_sha256_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha256());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_256));
| }
| 
| static int
| __archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_libc_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_libc2_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_libc3_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_nettle_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_openssl_sha384init(archive_sha384_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha384());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_384));
| }
| 
| static int
| __archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_libc_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_libc2_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_libc3_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_libmd_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_nettle_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_openssl_sha512init(archive_sha512_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha512());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_512));
| }
| 
| static int
| __archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Crypto functions are set based on availability and by the following
|  * order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. OpenSSL
|  * 6. Windows API
|  */
| const struct archive_crypto __archive_crypto =
| {
| /* MD5 */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
|   &__archive_libc_md5init,
|   &__archive_libc_md5update,
|   &__archive_libc_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
|   &__archive_libmd_md5init,
|   &__archive_libmd_md5update,
|   &__archive_libmd_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
|   &__archive_libsystem_md5init,
|   &__archive_libsystem_md5update,
|   &__archive_libsystem_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
|   &__archive_nettle_md5init,
|   &__archive_nettle_md5update,
|   &__archive_nettle_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
|   &__archive_openssl_md5init,
|   &__archive_openssl_md5update,
|   &__archive_openssl_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
|   &__archive_windowsapi_md5init,
|   &__archive_windowsapi_md5update,
|   &__archive_windowsapi_md5final,
| #elif !defined(ARCHIVE_MD5_COMPILE_TEST)
|   &__archive_stub_md5init,
|   &__archive_stub_md5update,
|   &__archive_stub_md5final,
| #endif
| 
| /* RIPEMD160 */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
|   &__archive_libc_ripemd160init,
|   &__archive_libc_ripemd160update,
|   &__archive_libc_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
|   &__archive_libmd_ripemd160init,
|   &__archive_libmd_ripemd160update,
|   &__archive_libmd_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
|   &__archive_nettle_ripemd160init,
|   &__archive_nettle_ripemd160update,
|   &__archive_nettle_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
|   &__archive_openssl_ripemd160init,
|   &__archive_openssl_ripemd160update,
|   &__archive_openssl_ripemd160final,
| #elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
|   &__archive_stub_ripemd160init,
|   &__archive_stub_ripemd160update,
|   &__archive_stub_ripemd160final,
| #endif
| 
| /* SHA1 */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
|   &__archive_libc_sha1init,
|   &__archive_libc_sha1update,
|   &__archive_libc_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
|   &__archive_libmd_sha1init,
|   &__archive_libmd_sha1update,
|   &__archive_libmd_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
|   &__archive_libsystem_sha1init,
|   &__archive_libsystem_sha1update,
|   &__archive_libsystem_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
|   &__archive_nettle_sha1init,
|   &__archive_nettle_sha1update,
|   &__archive_nettle_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
|   &__archive_openssl_sha1init,
|   &__archive_openssl_sha1update,
|   &__archive_openssl_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
|   &__archive_windowsapi_sha1init,
|   &__archive_windowsapi_sha1update,
|   &__archive_windowsapi_sha1final,
| #elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
|   &__archive_stub_sha1init,
|   &__archive_stub_sha1update,
|   &__archive_stub_sha1final,
| #endif
| 
| /* SHA256 */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
|   &__archive_libc_sha256init,
|   &__archive_libc_sha256update,
|   &__archive_libc_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
|   &__archive_libc2_sha256init,
|   &__archive_libc2_sha256update,
|   &__archive_libc2_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
|   &__archive_libc3_sha256init,
|   &__archive_libc3_sha256update,
|   &__archive_libc3_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
|   &__archive_libmd_sha256init,
|   &__archive_libmd_sha256update,
|   &__archive_libmd_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
|   &__archive_libsystem_sha256init,
|   &__archive_libsystem_sha256update,
|   &__archive_libsystem_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
|   &__archive_nettle_sha256init,
|   &__archive_nettle_sha256update,
|   &__archive_nettle_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
|   &__archive_openssl_sha256init,
|   &__archive_openssl_sha256update,
|   &__archive_openssl_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
|   &__archive_windowsapi_sha256init,
|   &__archive_windowsapi_sha256update,
|   &__archive_windowsapi_sha256final,
| #elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
|   &__archive_stub_sha256init,
|   &__archive_stub_sha256update,
|   &__archive_stub_sha256final,
| #endif
| 
| /* SHA384 */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
|   &__archive_libc_sha384init,
|   &__archive_libc_sha384update,
|   &__archive_libc_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
|   &__archive_libc2_sha384init,
|   &__archive_libc2_sha384update,
|   &__archive_libc2_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
|   &__archive_libc3_sha384init,
|   &__archive_libc3_sha384update,
|   &__archive_libc3_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
|   &__archive_libsystem_sha384init,
|   &__archive_libsystem_sha384update,
|   &__archive_libsystem_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
|   &__archive_nettle_sha384init,
|   &__archive_nettle_sha384update,
|   &__archive_nettle_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
|   &__archive_openssl_sha384init,
|   &__archive_openssl_sha384update,
|   &__archive_openssl_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
|   &__archive_windowsapi_sha384init,
|   &__archive_windowsapi_sha384update,
|   &__archive_windowsapi_sha384final,
| #elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
|   &__archive_stub_sha384init,
|   &__archive_stub_sha384update,
|   &__archive_stub_sha384final,
| #endif
| 
| /* SHA512 */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
|   &__archive_libc_sha512init,
|   &__archive_libc_sha512update,
|   &__archive_libc_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
|   &__archive_libc2_sha512init,
|   &__archive_libc2_sha512update,
|   &__archive_libc2_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
|   &__archive_libc3_sha512init,
|   &__archive_libc3_sha512update,
|   &__archive_libc3_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
|   &__archive_libmd_sha512init,
|   &__archive_libmd_sha512update,
|   &__archive_libmd_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
|   &__archive_libsystem_sha512init,
|   &__archive_libsystem_sha512update,
|   &__archive_libsystem_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
|   &__archive_nettle_sha512init,
|   &__archive_nettle_sha512update,
|   &__archive_nettle_sha512final,
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
|   &__archive_openssl_sha512init,
|   &__archive_openssl_sha512update,
|   &__archive_openssl_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
|   &__archive_windowsapi_sha512init,
|   &__archive_windowsapi_sha512update,
|   &__archive_windowsapi_sha512final
| #elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
|   &__archive_stub_sha512init,
|   &__archive_stub_sha512update,
|   &__archive_stub_sha512final
| #endif
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_md5_ctx ctx;
|   archive_md5_init(&ctx);
|   archive_md5_update(&ctx, *argv, argc);
|   archive_md5_final(&ctx, NULL);
|   return 0;
| }
| 
configure:17668: result: no
configure:17685: checking support for ARCHIVE_CRYPTO_RMD160_NETTLE
configure:17707: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g  -I. -I. -I./libarchive  conftest.c   -lnettle >&5
conftest.c
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2061: syntax error : identifier '__la_read'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2059: syntax error : 'type'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2061: syntax error : identifier '__la_waitpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2146: syntax error : missing ')' before identifier 'wpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2061: syntax error : identifier 'wpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ','
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ')'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2061: syntax error : identifier '__la_write'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2059: syntax error : 'type'
./libarchive\archive_crypto_private.h(120) : fatal error C1083: Cannot open include file: 'nettle/ripemd160.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
cl : Command line warning D9002 : ignoring unknown option '-lnettle'
configure:17707: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| 
| #define ARCHIVE_RMD160_COMPILE_TEST
| #define ARCHIVE_CRYPTO_RMD160_NETTLE
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_crypto_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| static int
| win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| 	DWORD siglen = bufsize;
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_libc_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_libmd_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_libsystem_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_nettle_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_openssl_md5init(archive_md5_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_md5());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (ctx->digest)
|     EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_windowsapi_md5init(archive_md5_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_MD5));
| }
| 
| static int
| __archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_ripemd160());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_libc_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_libmd_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_nettle_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_openssl_sha1init(archive_sha1_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha1());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (ctx->digest)
|     EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA1));
| }
| 
| static int
| __archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_libc_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_libc2_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_libc3_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_libmd_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_nettle_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_openssl_sha256init(archive_sha256_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha256());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_256));
| }
| 
| static int
| __archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_libc_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_libc2_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_libc3_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_nettle_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_openssl_sha384init(archive_sha384_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha384());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_384));
| }
| 
| static int
| __archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_libc_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_libc2_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_libc3_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_libmd_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_nettle_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_openssl_sha512init(archive_sha512_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha512());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_512));
| }
| 
| static int
| __archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Crypto functions are set based on availability and by the following
|  * order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. OpenSSL
|  * 6. Windows API
|  */
| const struct archive_crypto __archive_crypto =
| {
| /* MD5 */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
|   &__archive_libc_md5init,
|   &__archive_libc_md5update,
|   &__archive_libc_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
|   &__archive_libmd_md5init,
|   &__archive_libmd_md5update,
|   &__archive_libmd_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
|   &__archive_libsystem_md5init,
|   &__archive_libsystem_md5update,
|   &__archive_libsystem_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
|   &__archive_nettle_md5init,
|   &__archive_nettle_md5update,
|   &__archive_nettle_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
|   &__archive_openssl_md5init,
|   &__archive_openssl_md5update,
|   &__archive_openssl_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
|   &__archive_windowsapi_md5init,
|   &__archive_windowsapi_md5update,
|   &__archive_windowsapi_md5final,
| #elif !defined(ARCHIVE_MD5_COMPILE_TEST)
|   &__archive_stub_md5init,
|   &__archive_stub_md5update,
|   &__archive_stub_md5final,
| #endif
| 
| /* RIPEMD160 */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
|   &__archive_libc_ripemd160init,
|   &__archive_libc_ripemd160update,
|   &__archive_libc_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
|   &__archive_libmd_ripemd160init,
|   &__archive_libmd_ripemd160update,
|   &__archive_libmd_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
|   &__archive_nettle_ripemd160init,
|   &__archive_nettle_ripemd160update,
|   &__archive_nettle_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
|   &__archive_openssl_ripemd160init,
|   &__archive_openssl_ripemd160update,
|   &__archive_openssl_ripemd160final,
| #elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
|   &__archive_stub_ripemd160init,
|   &__archive_stub_ripemd160update,
|   &__archive_stub_ripemd160final,
| #endif
| 
| /* SHA1 */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
|   &__archive_libc_sha1init,
|   &__archive_libc_sha1update,
|   &__archive_libc_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
|   &__archive_libmd_sha1init,
|   &__archive_libmd_sha1update,
|   &__archive_libmd_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
|   &__archive_libsystem_sha1init,
|   &__archive_libsystem_sha1update,
|   &__archive_libsystem_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
|   &__archive_nettle_sha1init,
|   &__archive_nettle_sha1update,
|   &__archive_nettle_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
|   &__archive_openssl_sha1init,
|   &__archive_openssl_sha1update,
|   &__archive_openssl_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
|   &__archive_windowsapi_sha1init,
|   &__archive_windowsapi_sha1update,
|   &__archive_windowsapi_sha1final,
| #elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
|   &__archive_stub_sha1init,
|   &__archive_stub_sha1update,
|   &__archive_stub_sha1final,
| #endif
| 
| /* SHA256 */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
|   &__archive_libc_sha256init,
|   &__archive_libc_sha256update,
|   &__archive_libc_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
|   &__archive_libc2_sha256init,
|   &__archive_libc2_sha256update,
|   &__archive_libc2_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
|   &__archive_libc3_sha256init,
|   &__archive_libc3_sha256update,
|   &__archive_libc3_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
|   &__archive_libmd_sha256init,
|   &__archive_libmd_sha256update,
|   &__archive_libmd_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
|   &__archive_libsystem_sha256init,
|   &__archive_libsystem_sha256update,
|   &__archive_libsystem_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
|   &__archive_nettle_sha256init,
|   &__archive_nettle_sha256update,
|   &__archive_nettle_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
|   &__archive_openssl_sha256init,
|   &__archive_openssl_sha256update,
|   &__archive_openssl_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
|   &__archive_windowsapi_sha256init,
|   &__archive_windowsapi_sha256update,
|   &__archive_windowsapi_sha256final,
| #elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
|   &__archive_stub_sha256init,
|   &__archive_stub_sha256update,
|   &__archive_stub_sha256final,
| #endif
| 
| /* SHA384 */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
|   &__archive_libc_sha384init,
|   &__archive_libc_sha384update,
|   &__archive_libc_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
|   &__archive_libc2_sha384init,
|   &__archive_libc2_sha384update,
|   &__archive_libc2_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
|   &__archive_libc3_sha384init,
|   &__archive_libc3_sha384update,
|   &__archive_libc3_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
|   &__archive_libsystem_sha384init,
|   &__archive_libsystem_sha384update,
|   &__archive_libsystem_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
|   &__archive_nettle_sha384init,
|   &__archive_nettle_sha384update,
|   &__archive_nettle_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
|   &__archive_openssl_sha384init,
|   &__archive_openssl_sha384update,
|   &__archive_openssl_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
|   &__archive_windowsapi_sha384init,
|   &__archive_windowsapi_sha384update,
|   &__archive_windowsapi_sha384final,
| #elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
|   &__archive_stub_sha384init,
|   &__archive_stub_sha384update,
|   &__archive_stub_sha384final,
| #endif
| 
| /* SHA512 */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
|   &__archive_libc_sha512init,
|   &__archive_libc_sha512update,
|   &__archive_libc_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
|   &__archive_libc2_sha512init,
|   &__archive_libc2_sha512update,
|   &__archive_libc2_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
|   &__archive_libc3_sha512init,
|   &__archive_libc3_sha512update,
|   &__archive_libc3_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
|   &__archive_libmd_sha512init,
|   &__archive_libmd_sha512update,
|   &__archive_libmd_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
|   &__archive_libsystem_sha512init,
|   &__archive_libsystem_sha512update,
|   &__archive_libsystem_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
|   &__archive_nettle_sha512init,
|   &__archive_nettle_sha512update,
|   &__archive_nettle_sha512final,
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
|   &__archive_openssl_sha512init,
|   &__archive_openssl_sha512update,
|   &__archive_openssl_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
|   &__archive_windowsapi_sha512init,
|   &__archive_windowsapi_sha512update,
|   &__archive_windowsapi_sha512final
| #elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
|   &__archive_stub_sha512init,
|   &__archive_stub_sha512update,
|   &__archive_stub_sha512final
| #endif
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_rmd160_ctx ctx;
|   archive_rmd160_init(&ctx);
|   archive_rmd160_update(&ctx, *argv, argc);
|   archive_rmd160_final(&ctx, NULL);
|   return 0;
| }
| 
configure:17721: result: no
configure:17738: checking support for ARCHIVE_CRYPTO_SHA1_NETTLE
configure:17760: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g  -I. -I. -I./libarchive  conftest.c   -lnettle >&5
conftest.c
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2061: syntax error : identifier '__la_read'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2059: syntax error : 'type'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2061: syntax error : identifier '__la_waitpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2146: syntax error : missing ')' before identifier 'wpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2061: syntax error : identifier 'wpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ','
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ')'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2061: syntax error : identifier '__la_write'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2059: syntax error : 'type'
./libarchive\archive_crypto_private.h(126) : fatal error C1083: Cannot open include file: 'nettle/sha.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
cl : Command line warning D9002 : ignoring unknown option '-lnettle'
configure:17760: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| 
| #define ARCHIVE_SHA1_COMPILE_TEST
| #define ARCHIVE_CRYPTO_SHA1_NETTLE
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_crypto_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| static int
| win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| 	DWORD siglen = bufsize;
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_libc_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_libmd_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_libsystem_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_nettle_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_openssl_md5init(archive_md5_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_md5());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (ctx->digest)
|     EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_windowsapi_md5init(archive_md5_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_MD5));
| }
| 
| static int
| __archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_ripemd160());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_libc_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_libmd_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_nettle_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_openssl_sha1init(archive_sha1_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha1());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (ctx->digest)
|     EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA1));
| }
| 
| static int
| __archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_libc_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_libc2_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_libc3_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_libmd_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_nettle_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_openssl_sha256init(archive_sha256_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha256());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_256));
| }
| 
| static int
| __archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_libc_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_libc2_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_libc3_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_nettle_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_openssl_sha384init(archive_sha384_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha384());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_384));
| }
| 
| static int
| __archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_libc_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_libc2_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_libc3_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_libmd_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_nettle_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_openssl_sha512init(archive_sha512_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha512());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_512));
| }
| 
| static int
| __archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Crypto functions are set based on availability and by the following
|  * order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. OpenSSL
|  * 6. Windows API
|  */
| const struct archive_crypto __archive_crypto =
| {
| /* MD5 */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
|   &__archive_libc_md5init,
|   &__archive_libc_md5update,
|   &__archive_libc_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
|   &__archive_libmd_md5init,
|   &__archive_libmd_md5update,
|   &__archive_libmd_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
|   &__archive_libsystem_md5init,
|   &__archive_libsystem_md5update,
|   &__archive_libsystem_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
|   &__archive_nettle_md5init,
|   &__archive_nettle_md5update,
|   &__archive_nettle_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
|   &__archive_openssl_md5init,
|   &__archive_openssl_md5update,
|   &__archive_openssl_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
|   &__archive_windowsapi_md5init,
|   &__archive_windowsapi_md5update,
|   &__archive_windowsapi_md5final,
| #elif !defined(ARCHIVE_MD5_COMPILE_TEST)
|   &__archive_stub_md5init,
|   &__archive_stub_md5update,
|   &__archive_stub_md5final,
| #endif
| 
| /* RIPEMD160 */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
|   &__archive_libc_ripemd160init,
|   &__archive_libc_ripemd160update,
|   &__archive_libc_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
|   &__archive_libmd_ripemd160init,
|   &__archive_libmd_ripemd160update,
|   &__archive_libmd_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
|   &__archive_nettle_ripemd160init,
|   &__archive_nettle_ripemd160update,
|   &__archive_nettle_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
|   &__archive_openssl_ripemd160init,
|   &__archive_openssl_ripemd160update,
|   &__archive_openssl_ripemd160final,
| #elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
|   &__archive_stub_ripemd160init,
|   &__archive_stub_ripemd160update,
|   &__archive_stub_ripemd160final,
| #endif
| 
| /* SHA1 */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
|   &__archive_libc_sha1init,
|   &__archive_libc_sha1update,
|   &__archive_libc_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
|   &__archive_libmd_sha1init,
|   &__archive_libmd_sha1update,
|   &__archive_libmd_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
|   &__archive_libsystem_sha1init,
|   &__archive_libsystem_sha1update,
|   &__archive_libsystem_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
|   &__archive_nettle_sha1init,
|   &__archive_nettle_sha1update,
|   &__archive_nettle_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
|   &__archive_openssl_sha1init,
|   &__archive_openssl_sha1update,
|   &__archive_openssl_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
|   &__archive_windowsapi_sha1init,
|   &__archive_windowsapi_sha1update,
|   &__archive_windowsapi_sha1final,
| #elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
|   &__archive_stub_sha1init,
|   &__archive_stub_sha1update,
|   &__archive_stub_sha1final,
| #endif
| 
| /* SHA256 */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
|   &__archive_libc_sha256init,
|   &__archive_libc_sha256update,
|   &__archive_libc_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
|   &__archive_libc2_sha256init,
|   &__archive_libc2_sha256update,
|   &__archive_libc2_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
|   &__archive_libc3_sha256init,
|   &__archive_libc3_sha256update,
|   &__archive_libc3_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
|   &__archive_libmd_sha256init,
|   &__archive_libmd_sha256update,
|   &__archive_libmd_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
|   &__archive_libsystem_sha256init,
|   &__archive_libsystem_sha256update,
|   &__archive_libsystem_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
|   &__archive_nettle_sha256init,
|   &__archive_nettle_sha256update,
|   &__archive_nettle_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
|   &__archive_openssl_sha256init,
|   &__archive_openssl_sha256update,
|   &__archive_openssl_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
|   &__archive_windowsapi_sha256init,
|   &__archive_windowsapi_sha256update,
|   &__archive_windowsapi_sha256final,
| #elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
|   &__archive_stub_sha256init,
|   &__archive_stub_sha256update,
|   &__archive_stub_sha256final,
| #endif
| 
| /* SHA384 */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
|   &__archive_libc_sha384init,
|   &__archive_libc_sha384update,
|   &__archive_libc_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
|   &__archive_libc2_sha384init,
|   &__archive_libc2_sha384update,
|   &__archive_libc2_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
|   &__archive_libc3_sha384init,
|   &__archive_libc3_sha384update,
|   &__archive_libc3_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
|   &__archive_libsystem_sha384init,
|   &__archive_libsystem_sha384update,
|   &__archive_libsystem_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
|   &__archive_nettle_sha384init,
|   &__archive_nettle_sha384update,
|   &__archive_nettle_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
|   &__archive_openssl_sha384init,
|   &__archive_openssl_sha384update,
|   &__archive_openssl_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
|   &__archive_windowsapi_sha384init,
|   &__archive_windowsapi_sha384update,
|   &__archive_windowsapi_sha384final,
| #elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
|   &__archive_stub_sha384init,
|   &__archive_stub_sha384update,
|   &__archive_stub_sha384final,
| #endif
| 
| /* SHA512 */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
|   &__archive_libc_sha512init,
|   &__archive_libc_sha512update,
|   &__archive_libc_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
|   &__archive_libc2_sha512init,
|   &__archive_libc2_sha512update,
|   &__archive_libc2_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
|   &__archive_libc3_sha512init,
|   &__archive_libc3_sha512update,
|   &__archive_libc3_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
|   &__archive_libmd_sha512init,
|   &__archive_libmd_sha512update,
|   &__archive_libmd_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
|   &__archive_libsystem_sha512init,
|   &__archive_libsystem_sha512update,
|   &__archive_libsystem_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
|   &__archive_nettle_sha512init,
|   &__archive_nettle_sha512update,
|   &__archive_nettle_sha512final,
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
|   &__archive_openssl_sha512init,
|   &__archive_openssl_sha512update,
|   &__archive_openssl_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
|   &__archive_windowsapi_sha512init,
|   &__archive_windowsapi_sha512update,
|   &__archive_windowsapi_sha512final
| #elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
|   &__archive_stub_sha512init,
|   &__archive_stub_sha512update,
|   &__archive_stub_sha512final
| #endif
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_sha1_ctx ctx;
|   archive_sha1_init(&ctx);
|   archive_sha1_update(&ctx, *argv, argc);
|   archive_sha1_final(&ctx, NULL);
|   return 0;
| }
| 
configure:17774: result: no
configure:17791: checking support for ARCHIVE_CRYPTO_SHA256_NETTLE
configure:17813: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g  -I. -I. -I./libarchive  conftest.c   -lnettle >&5
conftest.c
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2061: syntax error : identifier '__la_read'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2059: syntax error : 'type'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2061: syntax error : identifier '__la_waitpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2146: syntax error : missing ')' before identifier 'wpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2061: syntax error : identifier 'wpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ','
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ')'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2061: syntax error : identifier '__la_write'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2059: syntax error : 'type'
./libarchive\archive_crypto_private.h(126) : fatal error C1083: Cannot open include file: 'nettle/sha.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
cl : Command line warning D9002 : ignoring unknown option '-lnettle'
configure:17813: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| 
| #define ARCHIVE_SHA256_COMPILE_TEST
| #define ARCHIVE_CRYPTO_SHA256_NETTLE
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_crypto_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| static int
| win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| 	DWORD siglen = bufsize;
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_libc_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_libmd_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_libsystem_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_nettle_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_openssl_md5init(archive_md5_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_md5());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (ctx->digest)
|     EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_windowsapi_md5init(archive_md5_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_MD5));
| }
| 
| static int
| __archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_ripemd160());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_libc_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_libmd_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_nettle_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_openssl_sha1init(archive_sha1_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha1());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (ctx->digest)
|     EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA1));
| }
| 
| static int
| __archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_libc_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_libc2_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_libc3_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_libmd_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_nettle_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_openssl_sha256init(archive_sha256_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha256());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_256));
| }
| 
| static int
| __archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_libc_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_libc2_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_libc3_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_nettle_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_openssl_sha384init(archive_sha384_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha384());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_384));
| }
| 
| static int
| __archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_libc_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_libc2_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_libc3_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_libmd_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_nettle_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_openssl_sha512init(archive_sha512_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha512());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_512));
| }
| 
| static int
| __archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Crypto functions are set based on availability and by the following
|  * order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. OpenSSL
|  * 6. Windows API
|  */
| const struct archive_crypto __archive_crypto =
| {
| /* MD5 */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
|   &__archive_libc_md5init,
|   &__archive_libc_md5update,
|   &__archive_libc_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
|   &__archive_libmd_md5init,
|   &__archive_libmd_md5update,
|   &__archive_libmd_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
|   &__archive_libsystem_md5init,
|   &__archive_libsystem_md5update,
|   &__archive_libsystem_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
|   &__archive_nettle_md5init,
|   &__archive_nettle_md5update,
|   &__archive_nettle_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
|   &__archive_openssl_md5init,
|   &__archive_openssl_md5update,
|   &__archive_openssl_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
|   &__archive_windowsapi_md5init,
|   &__archive_windowsapi_md5update,
|   &__archive_windowsapi_md5final,
| #elif !defined(ARCHIVE_MD5_COMPILE_TEST)
|   &__archive_stub_md5init,
|   &__archive_stub_md5update,
|   &__archive_stub_md5final,
| #endif
| 
| /* RIPEMD160 */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
|   &__archive_libc_ripemd160init,
|   &__archive_libc_ripemd160update,
|   &__archive_libc_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
|   &__archive_libmd_ripemd160init,
|   &__archive_libmd_ripemd160update,
|   &__archive_libmd_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
|   &__archive_nettle_ripemd160init,
|   &__archive_nettle_ripemd160update,
|   &__archive_nettle_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
|   &__archive_openssl_ripemd160init,
|   &__archive_openssl_ripemd160update,
|   &__archive_openssl_ripemd160final,
| #elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
|   &__archive_stub_ripemd160init,
|   &__archive_stub_ripemd160update,
|   &__archive_stub_ripemd160final,
| #endif
| 
| /* SHA1 */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
|   &__archive_libc_sha1init,
|   &__archive_libc_sha1update,
|   &__archive_libc_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
|   &__archive_libmd_sha1init,
|   &__archive_libmd_sha1update,
|   &__archive_libmd_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
|   &__archive_libsystem_sha1init,
|   &__archive_libsystem_sha1update,
|   &__archive_libsystem_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
|   &__archive_nettle_sha1init,
|   &__archive_nettle_sha1update,
|   &__archive_nettle_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
|   &__archive_openssl_sha1init,
|   &__archive_openssl_sha1update,
|   &__archive_openssl_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
|   &__archive_windowsapi_sha1init,
|   &__archive_windowsapi_sha1update,
|   &__archive_windowsapi_sha1final,
| #elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
|   &__archive_stub_sha1init,
|   &__archive_stub_sha1update,
|   &__archive_stub_sha1final,
| #endif
| 
| /* SHA256 */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
|   &__archive_libc_sha256init,
|   &__archive_libc_sha256update,
|   &__archive_libc_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
|   &__archive_libc2_sha256init,
|   &__archive_libc2_sha256update,
|   &__archive_libc2_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
|   &__archive_libc3_sha256init,
|   &__archive_libc3_sha256update,
|   &__archive_libc3_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
|   &__archive_libmd_sha256init,
|   &__archive_libmd_sha256update,
|   &__archive_libmd_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
|   &__archive_libsystem_sha256init,
|   &__archive_libsystem_sha256update,
|   &__archive_libsystem_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
|   &__archive_nettle_sha256init,
|   &__archive_nettle_sha256update,
|   &__archive_nettle_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
|   &__archive_openssl_sha256init,
|   &__archive_openssl_sha256update,
|   &__archive_openssl_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
|   &__archive_windowsapi_sha256init,
|   &__archive_windowsapi_sha256update,
|   &__archive_windowsapi_sha256final,
| #elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
|   &__archive_stub_sha256init,
|   &__archive_stub_sha256update,
|   &__archive_stub_sha256final,
| #endif
| 
| /* SHA384 */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
|   &__archive_libc_sha384init,
|   &__archive_libc_sha384update,
|   &__archive_libc_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
|   &__archive_libc2_sha384init,
|   &__archive_libc2_sha384update,
|   &__archive_libc2_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
|   &__archive_libc3_sha384init,
|   &__archive_libc3_sha384update,
|   &__archive_libc3_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
|   &__archive_libsystem_sha384init,
|   &__archive_libsystem_sha384update,
|   &__archive_libsystem_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
|   &__archive_nettle_sha384init,
|   &__archive_nettle_sha384update,
|   &__archive_nettle_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
|   &__archive_openssl_sha384init,
|   &__archive_openssl_sha384update,
|   &__archive_openssl_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
|   &__archive_windowsapi_sha384init,
|   &__archive_windowsapi_sha384update,
|   &__archive_windowsapi_sha384final,
| #elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
|   &__archive_stub_sha384init,
|   &__archive_stub_sha384update,
|   &__archive_stub_sha384final,
| #endif
| 
| /* SHA512 */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
|   &__archive_libc_sha512init,
|   &__archive_libc_sha512update,
|   &__archive_libc_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
|   &__archive_libc2_sha512init,
|   &__archive_libc2_sha512update,
|   &__archive_libc2_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
|   &__archive_libc3_sha512init,
|   &__archive_libc3_sha512update,
|   &__archive_libc3_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
|   &__archive_libmd_sha512init,
|   &__archive_libmd_sha512update,
|   &__archive_libmd_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
|   &__archive_libsystem_sha512init,
|   &__archive_libsystem_sha512update,
|   &__archive_libsystem_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
|   &__archive_nettle_sha512init,
|   &__archive_nettle_sha512update,
|   &__archive_nettle_sha512final,
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
|   &__archive_openssl_sha512init,
|   &__archive_openssl_sha512update,
|   &__archive_openssl_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
|   &__archive_windowsapi_sha512init,
|   &__archive_windowsapi_sha512update,
|   &__archive_windowsapi_sha512final
| #elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
|   &__archive_stub_sha512init,
|   &__archive_stub_sha512update,
|   &__archive_stub_sha512final
| #endif
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_sha256_ctx ctx;
|   archive_sha256_init(&ctx);
|   archive_sha256_update(&ctx, *argv, argc);
|   archive_sha256_final(&ctx, NULL);
|   return 0;
| }
| 
configure:17827: result: no
configure:17844: checking support for ARCHIVE_CRYPTO_SHA384_NETTLE
configure:17866: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g  -I. -I. -I./libarchive  conftest.c   -lnettle >&5
conftest.c
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2061: syntax error : identifier '__la_read'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2059: syntax error : 'type'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2061: syntax error : identifier '__la_waitpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2146: syntax error : missing ')' before identifier 'wpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2061: syntax error : identifier 'wpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ','
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ')'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2061: syntax error : identifier '__la_write'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2059: syntax error : 'type'
./libarchive\archive_crypto_private.h(126) : fatal error C1083: Cannot open include file: 'nettle/sha.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
cl : Command line warning D9002 : ignoring unknown option '-lnettle'
configure:17866: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| 
| #define ARCHIVE_SHA384_COMPILE_TEST
| #define ARCHIVE_CRYPTO_SHA384_NETTLE
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_crypto_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| static int
| win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| 	DWORD siglen = bufsize;
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_libc_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_libmd_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_libsystem_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_nettle_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_openssl_md5init(archive_md5_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_md5());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (ctx->digest)
|     EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_windowsapi_md5init(archive_md5_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_MD5));
| }
| 
| static int
| __archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_ripemd160());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_libc_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_libmd_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_nettle_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_openssl_sha1init(archive_sha1_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha1());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (ctx->digest)
|     EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA1));
| }
| 
| static int
| __archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_libc_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_libc2_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_libc3_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_libmd_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_nettle_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_openssl_sha256init(archive_sha256_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha256());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_256));
| }
| 
| static int
| __archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_libc_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_libc2_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_libc3_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_nettle_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_openssl_sha384init(archive_sha384_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha384());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_384));
| }
| 
| static int
| __archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_libc_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_libc2_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_libc3_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_libmd_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_nettle_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_openssl_sha512init(archive_sha512_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha512());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_512));
| }
| 
| static int
| __archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Crypto functions are set based on availability and by the following
|  * order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. OpenSSL
|  * 6. Windows API
|  */
| const struct archive_crypto __archive_crypto =
| {
| /* MD5 */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
|   &__archive_libc_md5init,
|   &__archive_libc_md5update,
|   &__archive_libc_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
|   &__archive_libmd_md5init,
|   &__archive_libmd_md5update,
|   &__archive_libmd_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
|   &__archive_libsystem_md5init,
|   &__archive_libsystem_md5update,
|   &__archive_libsystem_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
|   &__archive_nettle_md5init,
|   &__archive_nettle_md5update,
|   &__archive_nettle_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
|   &__archive_openssl_md5init,
|   &__archive_openssl_md5update,
|   &__archive_openssl_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
|   &__archive_windowsapi_md5init,
|   &__archive_windowsapi_md5update,
|   &__archive_windowsapi_md5final,
| #elif !defined(ARCHIVE_MD5_COMPILE_TEST)
|   &__archive_stub_md5init,
|   &__archive_stub_md5update,
|   &__archive_stub_md5final,
| #endif
| 
| /* RIPEMD160 */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
|   &__archive_libc_ripemd160init,
|   &__archive_libc_ripemd160update,
|   &__archive_libc_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
|   &__archive_libmd_ripemd160init,
|   &__archive_libmd_ripemd160update,
|   &__archive_libmd_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
|   &__archive_nettle_ripemd160init,
|   &__archive_nettle_ripemd160update,
|   &__archive_nettle_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
|   &__archive_openssl_ripemd160init,
|   &__archive_openssl_ripemd160update,
|   &__archive_openssl_ripemd160final,
| #elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
|   &__archive_stub_ripemd160init,
|   &__archive_stub_ripemd160update,
|   &__archive_stub_ripemd160final,
| #endif
| 
| /* SHA1 */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
|   &__archive_libc_sha1init,
|   &__archive_libc_sha1update,
|   &__archive_libc_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
|   &__archive_libmd_sha1init,
|   &__archive_libmd_sha1update,
|   &__archive_libmd_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
|   &__archive_libsystem_sha1init,
|   &__archive_libsystem_sha1update,
|   &__archive_libsystem_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
|   &__archive_nettle_sha1init,
|   &__archive_nettle_sha1update,
|   &__archive_nettle_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
|   &__archive_openssl_sha1init,
|   &__archive_openssl_sha1update,
|   &__archive_openssl_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
|   &__archive_windowsapi_sha1init,
|   &__archive_windowsapi_sha1update,
|   &__archive_windowsapi_sha1final,
| #elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
|   &__archive_stub_sha1init,
|   &__archive_stub_sha1update,
|   &__archive_stub_sha1final,
| #endif
| 
| /* SHA256 */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
|   &__archive_libc_sha256init,
|   &__archive_libc_sha256update,
|   &__archive_libc_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
|   &__archive_libc2_sha256init,
|   &__archive_libc2_sha256update,
|   &__archive_libc2_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
|   &__archive_libc3_sha256init,
|   &__archive_libc3_sha256update,
|   &__archive_libc3_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
|   &__archive_libmd_sha256init,
|   &__archive_libmd_sha256update,
|   &__archive_libmd_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
|   &__archive_libsystem_sha256init,
|   &__archive_libsystem_sha256update,
|   &__archive_libsystem_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
|   &__archive_nettle_sha256init,
|   &__archive_nettle_sha256update,
|   &__archive_nettle_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
|   &__archive_openssl_sha256init,
|   &__archive_openssl_sha256update,
|   &__archive_openssl_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
|   &__archive_windowsapi_sha256init,
|   &__archive_windowsapi_sha256update,
|   &__archive_windowsapi_sha256final,
| #elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
|   &__archive_stub_sha256init,
|   &__archive_stub_sha256update,
|   &__archive_stub_sha256final,
| #endif
| 
| /* SHA384 */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
|   &__archive_libc_sha384init,
|   &__archive_libc_sha384update,
|   &__archive_libc_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
|   &__archive_libc2_sha384init,
|   &__archive_libc2_sha384update,
|   &__archive_libc2_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
|   &__archive_libc3_sha384init,
|   &__archive_libc3_sha384update,
|   &__archive_libc3_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
|   &__archive_libsystem_sha384init,
|   &__archive_libsystem_sha384update,
|   &__archive_libsystem_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
|   &__archive_nettle_sha384init,
|   &__archive_nettle_sha384update,
|   &__archive_nettle_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
|   &__archive_openssl_sha384init,
|   &__archive_openssl_sha384update,
|   &__archive_openssl_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
|   &__archive_windowsapi_sha384init,
|   &__archive_windowsapi_sha384update,
|   &__archive_windowsapi_sha384final,
| #elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
|   &__archive_stub_sha384init,
|   &__archive_stub_sha384update,
|   &__archive_stub_sha384final,
| #endif
| 
| /* SHA512 */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
|   &__archive_libc_sha512init,
|   &__archive_libc_sha512update,
|   &__archive_libc_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
|   &__archive_libc2_sha512init,
|   &__archive_libc2_sha512update,
|   &__archive_libc2_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
|   &__archive_libc3_sha512init,
|   &__archive_libc3_sha512update,
|   &__archive_libc3_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
|   &__archive_libmd_sha512init,
|   &__archive_libmd_sha512update,
|   &__archive_libmd_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
|   &__archive_libsystem_sha512init,
|   &__archive_libsystem_sha512update,
|   &__archive_libsystem_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
|   &__archive_nettle_sha512init,
|   &__archive_nettle_sha512update,
|   &__archive_nettle_sha512final,
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
|   &__archive_openssl_sha512init,
|   &__archive_openssl_sha512update,
|   &__archive_openssl_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
|   &__archive_windowsapi_sha512init,
|   &__archive_windowsapi_sha512update,
|   &__archive_windowsapi_sha512final
| #elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
|   &__archive_stub_sha512init,
|   &__archive_stub_sha512update,
|   &__archive_stub_sha512final
| #endif
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_sha384_ctx ctx;
|   archive_sha384_init(&ctx);
|   archive_sha384_update(&ctx, *argv, argc);
|   archive_sha384_final(&ctx, NULL);
|   return 0;
| }
| 
configure:17880: result: no
configure:17897: checking support for ARCHIVE_CRYPTO_SHA512_NETTLE
configure:17919: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g  -I. -I. -I./libarchive  conftest.c   -lnettle >&5
conftest.c
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2061: syntax error : identifier '__la_read'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2059: syntax error : 'type'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2061: syntax error : identifier '__la_waitpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2146: syntax error : missing ')' before identifier 'wpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2061: syntax error : identifier 'wpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ','
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ')'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2061: syntax error : identifier '__la_write'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2059: syntax error : 'type'
./libarchive\archive_crypto_private.h(126) : fatal error C1083: Cannot open include file: 'nettle/sha.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
cl : Command line warning D9002 : ignoring unknown option '-lnettle'
configure:17919: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| 
| #define ARCHIVE_SHA512_COMPILE_TEST
| #define ARCHIVE_CRYPTO_SHA512_NETTLE
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_crypto_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| static int
| win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| 	DWORD siglen = bufsize;
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_libc_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_libmd_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_libsystem_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_nettle_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_openssl_md5init(archive_md5_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_md5());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (ctx->digest)
|     EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_windowsapi_md5init(archive_md5_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_MD5));
| }
| 
| static int
| __archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_ripemd160());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_libc_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_libmd_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_nettle_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_openssl_sha1init(archive_sha1_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha1());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (ctx->digest)
|     EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA1));
| }
| 
| static int
| __archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_libc_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_libc2_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_libc3_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_libmd_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_nettle_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_openssl_sha256init(archive_sha256_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha256());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_256));
| }
| 
| static int
| __archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_libc_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_libc2_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_libc3_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_nettle_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_openssl_sha384init(archive_sha384_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha384());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_384));
| }
| 
| static int
| __archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_libc_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_libc2_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_libc3_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_libmd_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_nettle_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_openssl_sha512init(archive_sha512_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha512());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_512));
| }
| 
| static int
| __archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Crypto functions are set based on availability and by the following
|  * order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. OpenSSL
|  * 6. Windows API
|  */
| const struct archive_crypto __archive_crypto =
| {
| /* MD5 */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
|   &__archive_libc_md5init,
|   &__archive_libc_md5update,
|   &__archive_libc_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
|   &__archive_libmd_md5init,
|   &__archive_libmd_md5update,
|   &__archive_libmd_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
|   &__archive_libsystem_md5init,
|   &__archive_libsystem_md5update,
|   &__archive_libsystem_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
|   &__archive_nettle_md5init,
|   &__archive_nettle_md5update,
|   &__archive_nettle_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
|   &__archive_openssl_md5init,
|   &__archive_openssl_md5update,
|   &__archive_openssl_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
|   &__archive_windowsapi_md5init,
|   &__archive_windowsapi_md5update,
|   &__archive_windowsapi_md5final,
| #elif !defined(ARCHIVE_MD5_COMPILE_TEST)
|   &__archive_stub_md5init,
|   &__archive_stub_md5update,
|   &__archive_stub_md5final,
| #endif
| 
| /* RIPEMD160 */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
|   &__archive_libc_ripemd160init,
|   &__archive_libc_ripemd160update,
|   &__archive_libc_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
|   &__archive_libmd_ripemd160init,
|   &__archive_libmd_ripemd160update,
|   &__archive_libmd_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
|   &__archive_nettle_ripemd160init,
|   &__archive_nettle_ripemd160update,
|   &__archive_nettle_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
|   &__archive_openssl_ripemd160init,
|   &__archive_openssl_ripemd160update,
|   &__archive_openssl_ripemd160final,
| #elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
|   &__archive_stub_ripemd160init,
|   &__archive_stub_ripemd160update,
|   &__archive_stub_ripemd160final,
| #endif
| 
| /* SHA1 */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
|   &__archive_libc_sha1init,
|   &__archive_libc_sha1update,
|   &__archive_libc_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
|   &__archive_libmd_sha1init,
|   &__archive_libmd_sha1update,
|   &__archive_libmd_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
|   &__archive_libsystem_sha1init,
|   &__archive_libsystem_sha1update,
|   &__archive_libsystem_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
|   &__archive_nettle_sha1init,
|   &__archive_nettle_sha1update,
|   &__archive_nettle_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
|   &__archive_openssl_sha1init,
|   &__archive_openssl_sha1update,
|   &__archive_openssl_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
|   &__archive_windowsapi_sha1init,
|   &__archive_windowsapi_sha1update,
|   &__archive_windowsapi_sha1final,
| #elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
|   &__archive_stub_sha1init,
|   &__archive_stub_sha1update,
|   &__archive_stub_sha1final,
| #endif
| 
| /* SHA256 */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
|   &__archive_libc_sha256init,
|   &__archive_libc_sha256update,
|   &__archive_libc_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
|   &__archive_libc2_sha256init,
|   &__archive_libc2_sha256update,
|   &__archive_libc2_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
|   &__archive_libc3_sha256init,
|   &__archive_libc3_sha256update,
|   &__archive_libc3_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
|   &__archive_libmd_sha256init,
|   &__archive_libmd_sha256update,
|   &__archive_libmd_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
|   &__archive_libsystem_sha256init,
|   &__archive_libsystem_sha256update,
|   &__archive_libsystem_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
|   &__archive_nettle_sha256init,
|   &__archive_nettle_sha256update,
|   &__archive_nettle_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
|   &__archive_openssl_sha256init,
|   &__archive_openssl_sha256update,
|   &__archive_openssl_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
|   &__archive_windowsapi_sha256init,
|   &__archive_windowsapi_sha256update,
|   &__archive_windowsapi_sha256final,
| #elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
|   &__archive_stub_sha256init,
|   &__archive_stub_sha256update,
|   &__archive_stub_sha256final,
| #endif
| 
| /* SHA384 */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
|   &__archive_libc_sha384init,
|   &__archive_libc_sha384update,
|   &__archive_libc_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
|   &__archive_libc2_sha384init,
|   &__archive_libc2_sha384update,
|   &__archive_libc2_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
|   &__archive_libc3_sha384init,
|   &__archive_libc3_sha384update,
|   &__archive_libc3_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
|   &__archive_libsystem_sha384init,
|   &__archive_libsystem_sha384update,
|   &__archive_libsystem_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
|   &__archive_nettle_sha384init,
|   &__archive_nettle_sha384update,
|   &__archive_nettle_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
|   &__archive_openssl_sha384init,
|   &__archive_openssl_sha384update,
|   &__archive_openssl_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
|   &__archive_windowsapi_sha384init,
|   &__archive_windowsapi_sha384update,
|   &__archive_windowsapi_sha384final,
| #elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
|   &__archive_stub_sha384init,
|   &__archive_stub_sha384update,
|   &__archive_stub_sha384final,
| #endif
| 
| /* SHA512 */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
|   &__archive_libc_sha512init,
|   &__archive_libc_sha512update,
|   &__archive_libc_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
|   &__archive_libc2_sha512init,
|   &__archive_libc2_sha512update,
|   &__archive_libc2_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
|   &__archive_libc3_sha512init,
|   &__archive_libc3_sha512update,
|   &__archive_libc3_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
|   &__archive_libmd_sha512init,
|   &__archive_libmd_sha512update,
|   &__archive_libmd_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
|   &__archive_libsystem_sha512init,
|   &__archive_libsystem_sha512update,
|   &__archive_libsystem_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
|   &__archive_nettle_sha512init,
|   &__archive_nettle_sha512update,
|   &__archive_nettle_sha512final,
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
|   &__archive_openssl_sha512init,
|   &__archive_openssl_sha512update,
|   &__archive_openssl_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
|   &__archive_windowsapi_sha512init,
|   &__archive_windowsapi_sha512update,
|   &__archive_windowsapi_sha512final
| #elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
|   &__archive_stub_sha512init,
|   &__archive_stub_sha512update,
|   &__archive_stub_sha512final
| #endif
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_sha512_ctx ctx;
|   archive_sha512_init(&ctx);
|   archive_sha512_update(&ctx, *argv, argc);
|   archive_sha512_final(&ctx, NULL);
|   return 0;
| }
| 
configure:17933: result: no
configure:17952: checking support for ARCHIVE_CRYPTO_MD5_OPENSSL
configure:17974: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g  -I. -I. -I./libarchive  conftest.c   -lcrypto >&5
conftest.c
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2061: syntax error : identifier '__la_read'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2059: syntax error : 'type'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2061: syntax error : identifier '__la_waitpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2146: syntax error : missing ')' before identifier 'wpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2061: syntax error : identifier 'wpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ','
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ')'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2061: syntax error : identifier '__la_write'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2059: syntax error : 'type'
./libarchive\archive_crypto_private.h(137) : fatal error C1083: Cannot open include file: 'openssl/evp.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
cl : Command line warning D9002 : ignoring unknown option '-lcrypto'
configure:17974: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| 
| #define ARCHIVE_MD5_COMPILE_TEST
| #define ARCHIVE_CRYPTO_MD5_OPENSSL
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_crypto_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| static int
| win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| 	DWORD siglen = bufsize;
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_libc_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_libmd_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_libsystem_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_nettle_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_openssl_md5init(archive_md5_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_md5());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (ctx->digest)
|     EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_windowsapi_md5init(archive_md5_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_MD5));
| }
| 
| static int
| __archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_ripemd160());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_libc_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_libmd_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_nettle_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_openssl_sha1init(archive_sha1_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha1());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (ctx->digest)
|     EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA1));
| }
| 
| static int
| __archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_libc_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_libc2_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_libc3_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_libmd_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_nettle_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_openssl_sha256init(archive_sha256_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha256());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_256));
| }
| 
| static int
| __archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_libc_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_libc2_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_libc3_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_nettle_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_openssl_sha384init(archive_sha384_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha384());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_384));
| }
| 
| static int
| __archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_libc_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_libc2_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_libc3_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_libmd_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_nettle_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_openssl_sha512init(archive_sha512_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha512());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_512));
| }
| 
| static int
| __archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Crypto functions are set based on availability and by the following
|  * order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. OpenSSL
|  * 6. Windows API
|  */
| const struct archive_crypto __archive_crypto =
| {
| /* MD5 */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
|   &__archive_libc_md5init,
|   &__archive_libc_md5update,
|   &__archive_libc_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
|   &__archive_libmd_md5init,
|   &__archive_libmd_md5update,
|   &__archive_libmd_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
|   &__archive_libsystem_md5init,
|   &__archive_libsystem_md5update,
|   &__archive_libsystem_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
|   &__archive_nettle_md5init,
|   &__archive_nettle_md5update,
|   &__archive_nettle_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
|   &__archive_openssl_md5init,
|   &__archive_openssl_md5update,
|   &__archive_openssl_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
|   &__archive_windowsapi_md5init,
|   &__archive_windowsapi_md5update,
|   &__archive_windowsapi_md5final,
| #elif !defined(ARCHIVE_MD5_COMPILE_TEST)
|   &__archive_stub_md5init,
|   &__archive_stub_md5update,
|   &__archive_stub_md5final,
| #endif
| 
| /* RIPEMD160 */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
|   &__archive_libc_ripemd160init,
|   &__archive_libc_ripemd160update,
|   &__archive_libc_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
|   &__archive_libmd_ripemd160init,
|   &__archive_libmd_ripemd160update,
|   &__archive_libmd_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
|   &__archive_nettle_ripemd160init,
|   &__archive_nettle_ripemd160update,
|   &__archive_nettle_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
|   &__archive_openssl_ripemd160init,
|   &__archive_openssl_ripemd160update,
|   &__archive_openssl_ripemd160final,
| #elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
|   &__archive_stub_ripemd160init,
|   &__archive_stub_ripemd160update,
|   &__archive_stub_ripemd160final,
| #endif
| 
| /* SHA1 */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
|   &__archive_libc_sha1init,
|   &__archive_libc_sha1update,
|   &__archive_libc_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
|   &__archive_libmd_sha1init,
|   &__archive_libmd_sha1update,
|   &__archive_libmd_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
|   &__archive_libsystem_sha1init,
|   &__archive_libsystem_sha1update,
|   &__archive_libsystem_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
|   &__archive_nettle_sha1init,
|   &__archive_nettle_sha1update,
|   &__archive_nettle_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
|   &__archive_openssl_sha1init,
|   &__archive_openssl_sha1update,
|   &__archive_openssl_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
|   &__archive_windowsapi_sha1init,
|   &__archive_windowsapi_sha1update,
|   &__archive_windowsapi_sha1final,
| #elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
|   &__archive_stub_sha1init,
|   &__archive_stub_sha1update,
|   &__archive_stub_sha1final,
| #endif
| 
| /* SHA256 */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
|   &__archive_libc_sha256init,
|   &__archive_libc_sha256update,
|   &__archive_libc_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
|   &__archive_libc2_sha256init,
|   &__archive_libc2_sha256update,
|   &__archive_libc2_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
|   &__archive_libc3_sha256init,
|   &__archive_libc3_sha256update,
|   &__archive_libc3_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
|   &__archive_libmd_sha256init,
|   &__archive_libmd_sha256update,
|   &__archive_libmd_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
|   &__archive_libsystem_sha256init,
|   &__archive_libsystem_sha256update,
|   &__archive_libsystem_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
|   &__archive_nettle_sha256init,
|   &__archive_nettle_sha256update,
|   &__archive_nettle_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
|   &__archive_openssl_sha256init,
|   &__archive_openssl_sha256update,
|   &__archive_openssl_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
|   &__archive_windowsapi_sha256init,
|   &__archive_windowsapi_sha256update,
|   &__archive_windowsapi_sha256final,
| #elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
|   &__archive_stub_sha256init,
|   &__archive_stub_sha256update,
|   &__archive_stub_sha256final,
| #endif
| 
| /* SHA384 */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
|   &__archive_libc_sha384init,
|   &__archive_libc_sha384update,
|   &__archive_libc_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
|   &__archive_libc2_sha384init,
|   &__archive_libc2_sha384update,
|   &__archive_libc2_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
|   &__archive_libc3_sha384init,
|   &__archive_libc3_sha384update,
|   &__archive_libc3_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
|   &__archive_libsystem_sha384init,
|   &__archive_libsystem_sha384update,
|   &__archive_libsystem_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
|   &__archive_nettle_sha384init,
|   &__archive_nettle_sha384update,
|   &__archive_nettle_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
|   &__archive_openssl_sha384init,
|   &__archive_openssl_sha384update,
|   &__archive_openssl_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
|   &__archive_windowsapi_sha384init,
|   &__archive_windowsapi_sha384update,
|   &__archive_windowsapi_sha384final,
| #elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
|   &__archive_stub_sha384init,
|   &__archive_stub_sha384update,
|   &__archive_stub_sha384final,
| #endif
| 
| /* SHA512 */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
|   &__archive_libc_sha512init,
|   &__archive_libc_sha512update,
|   &__archive_libc_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
|   &__archive_libc2_sha512init,
|   &__archive_libc2_sha512update,
|   &__archive_libc2_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
|   &__archive_libc3_sha512init,
|   &__archive_libc3_sha512update,
|   &__archive_libc3_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
|   &__archive_libmd_sha512init,
|   &__archive_libmd_sha512update,
|   &__archive_libmd_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
|   &__archive_libsystem_sha512init,
|   &__archive_libsystem_sha512update,
|   &__archive_libsystem_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
|   &__archive_nettle_sha512init,
|   &__archive_nettle_sha512update,
|   &__archive_nettle_sha512final,
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
|   &__archive_openssl_sha512init,
|   &__archive_openssl_sha512update,
|   &__archive_openssl_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
|   &__archive_windowsapi_sha512init,
|   &__archive_windowsapi_sha512update,
|   &__archive_windowsapi_sha512final
| #elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
|   &__archive_stub_sha512init,
|   &__archive_stub_sha512update,
|   &__archive_stub_sha512final
| #endif
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_md5_ctx ctx;
|   archive_md5_init(&ctx);
|   archive_md5_update(&ctx, *argv, argc);
|   archive_md5_final(&ctx, NULL);
|   return 0;
| }
| 
configure:17988: result: no
configure:18005: checking support for ARCHIVE_CRYPTO_RMD160_OPENSSL
configure:18027: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g  -I. -I. -I./libarchive  conftest.c   -lcrypto >&5
conftest.c
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2061: syntax error : identifier '__la_read'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2059: syntax error : 'type'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2061: syntax error : identifier '__la_waitpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2146: syntax error : missing ')' before identifier 'wpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2061: syntax error : identifier 'wpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ','
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ')'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2061: syntax error : identifier '__la_write'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2059: syntax error : 'type'
./libarchive\archive_crypto_private.h(137) : fatal error C1083: Cannot open include file: 'openssl/evp.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
cl : Command line warning D9002 : ignoring unknown option '-lcrypto'
configure:18027: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| 
| #define ARCHIVE_RMD160_COMPILE_TEST
| #define ARCHIVE_CRYPTO_RMD160_OPENSSL
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_crypto_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| static int
| win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| 	DWORD siglen = bufsize;
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_libc_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_libmd_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_libsystem_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_nettle_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_openssl_md5init(archive_md5_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_md5());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (ctx->digest)
|     EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_windowsapi_md5init(archive_md5_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_MD5));
| }
| 
| static int
| __archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_ripemd160());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_libc_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_libmd_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_nettle_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_openssl_sha1init(archive_sha1_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha1());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (ctx->digest)
|     EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA1));
| }
| 
| static int
| __archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_libc_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_libc2_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_libc3_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_libmd_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_nettle_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_openssl_sha256init(archive_sha256_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha256());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_256));
| }
| 
| static int
| __archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_libc_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_libc2_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_libc3_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_nettle_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_openssl_sha384init(archive_sha384_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha384());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_384));
| }
| 
| static int
| __archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_libc_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_libc2_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_libc3_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_libmd_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_nettle_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_openssl_sha512init(archive_sha512_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha512());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_512));
| }
| 
| static int
| __archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Crypto functions are set based on availability and by the following
|  * order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. OpenSSL
|  * 6. Windows API
|  */
| const struct archive_crypto __archive_crypto =
| {
| /* MD5 */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
|   &__archive_libc_md5init,
|   &__archive_libc_md5update,
|   &__archive_libc_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
|   &__archive_libmd_md5init,
|   &__archive_libmd_md5update,
|   &__archive_libmd_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
|   &__archive_libsystem_md5init,
|   &__archive_libsystem_md5update,
|   &__archive_libsystem_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
|   &__archive_nettle_md5init,
|   &__archive_nettle_md5update,
|   &__archive_nettle_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
|   &__archive_openssl_md5init,
|   &__archive_openssl_md5update,
|   &__archive_openssl_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
|   &__archive_windowsapi_md5init,
|   &__archive_windowsapi_md5update,
|   &__archive_windowsapi_md5final,
| #elif !defined(ARCHIVE_MD5_COMPILE_TEST)
|   &__archive_stub_md5init,
|   &__archive_stub_md5update,
|   &__archive_stub_md5final,
| #endif
| 
| /* RIPEMD160 */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
|   &__archive_libc_ripemd160init,
|   &__archive_libc_ripemd160update,
|   &__archive_libc_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
|   &__archive_libmd_ripemd160init,
|   &__archive_libmd_ripemd160update,
|   &__archive_libmd_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
|   &__archive_nettle_ripemd160init,
|   &__archive_nettle_ripemd160update,
|   &__archive_nettle_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
|   &__archive_openssl_ripemd160init,
|   &__archive_openssl_ripemd160update,
|   &__archive_openssl_ripemd160final,
| #elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
|   &__archive_stub_ripemd160init,
|   &__archive_stub_ripemd160update,
|   &__archive_stub_ripemd160final,
| #endif
| 
| /* SHA1 */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
|   &__archive_libc_sha1init,
|   &__archive_libc_sha1update,
|   &__archive_libc_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
|   &__archive_libmd_sha1init,
|   &__archive_libmd_sha1update,
|   &__archive_libmd_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
|   &__archive_libsystem_sha1init,
|   &__archive_libsystem_sha1update,
|   &__archive_libsystem_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
|   &__archive_nettle_sha1init,
|   &__archive_nettle_sha1update,
|   &__archive_nettle_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
|   &__archive_openssl_sha1init,
|   &__archive_openssl_sha1update,
|   &__archive_openssl_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
|   &__archive_windowsapi_sha1init,
|   &__archive_windowsapi_sha1update,
|   &__archive_windowsapi_sha1final,
| #elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
|   &__archive_stub_sha1init,
|   &__archive_stub_sha1update,
|   &__archive_stub_sha1final,
| #endif
| 
| /* SHA256 */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
|   &__archive_libc_sha256init,
|   &__archive_libc_sha256update,
|   &__archive_libc_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
|   &__archive_libc2_sha256init,
|   &__archive_libc2_sha256update,
|   &__archive_libc2_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
|   &__archive_libc3_sha256init,
|   &__archive_libc3_sha256update,
|   &__archive_libc3_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
|   &__archive_libmd_sha256init,
|   &__archive_libmd_sha256update,
|   &__archive_libmd_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
|   &__archive_libsystem_sha256init,
|   &__archive_libsystem_sha256update,
|   &__archive_libsystem_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
|   &__archive_nettle_sha256init,
|   &__archive_nettle_sha256update,
|   &__archive_nettle_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
|   &__archive_openssl_sha256init,
|   &__archive_openssl_sha256update,
|   &__archive_openssl_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
|   &__archive_windowsapi_sha256init,
|   &__archive_windowsapi_sha256update,
|   &__archive_windowsapi_sha256final,
| #elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
|   &__archive_stub_sha256init,
|   &__archive_stub_sha256update,
|   &__archive_stub_sha256final,
| #endif
| 
| /* SHA384 */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
|   &__archive_libc_sha384init,
|   &__archive_libc_sha384update,
|   &__archive_libc_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
|   &__archive_libc2_sha384init,
|   &__archive_libc2_sha384update,
|   &__archive_libc2_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
|   &__archive_libc3_sha384init,
|   &__archive_libc3_sha384update,
|   &__archive_libc3_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
|   &__archive_libsystem_sha384init,
|   &__archive_libsystem_sha384update,
|   &__archive_libsystem_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
|   &__archive_nettle_sha384init,
|   &__archive_nettle_sha384update,
|   &__archive_nettle_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
|   &__archive_openssl_sha384init,
|   &__archive_openssl_sha384update,
|   &__archive_openssl_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
|   &__archive_windowsapi_sha384init,
|   &__archive_windowsapi_sha384update,
|   &__archive_windowsapi_sha384final,
| #elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
|   &__archive_stub_sha384init,
|   &__archive_stub_sha384update,
|   &__archive_stub_sha384final,
| #endif
| 
| /* SHA512 */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
|   &__archive_libc_sha512init,
|   &__archive_libc_sha512update,
|   &__archive_libc_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
|   &__archive_libc2_sha512init,
|   &__archive_libc2_sha512update,
|   &__archive_libc2_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
|   &__archive_libc3_sha512init,
|   &__archive_libc3_sha512update,
|   &__archive_libc3_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
|   &__archive_libmd_sha512init,
|   &__archive_libmd_sha512update,
|   &__archive_libmd_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
|   &__archive_libsystem_sha512init,
|   &__archive_libsystem_sha512update,
|   &__archive_libsystem_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
|   &__archive_nettle_sha512init,
|   &__archive_nettle_sha512update,
|   &__archive_nettle_sha512final,
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
|   &__archive_openssl_sha512init,
|   &__archive_openssl_sha512update,
|   &__archive_openssl_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
|   &__archive_windowsapi_sha512init,
|   &__archive_windowsapi_sha512update,
|   &__archive_windowsapi_sha512final
| #elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
|   &__archive_stub_sha512init,
|   &__archive_stub_sha512update,
|   &__archive_stub_sha512final
| #endif
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_rmd160_ctx ctx;
|   archive_rmd160_init(&ctx);
|   archive_rmd160_update(&ctx, *argv, argc);
|   archive_rmd160_final(&ctx, NULL);
|   return 0;
| }
| 
configure:18041: result: no
configure:18058: checking support for ARCHIVE_CRYPTO_SHA1_OPENSSL
configure:18080: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g  -I. -I. -I./libarchive  conftest.c   -lcrypto >&5
conftest.c
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2061: syntax error : identifier '__la_read'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2059: syntax error : 'type'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2061: syntax error : identifier '__la_waitpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2146: syntax error : missing ')' before identifier 'wpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2061: syntax error : identifier 'wpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ','
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ')'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2061: syntax error : identifier '__la_write'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2059: syntax error : 'type'
./libarchive\archive_crypto_private.h(137) : fatal error C1083: Cannot open include file: 'openssl/evp.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
cl : Command line warning D9002 : ignoring unknown option '-lcrypto'
configure:18080: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| 
| #define ARCHIVE_SHA1_COMPILE_TEST
| #define ARCHIVE_CRYPTO_SHA1_OPENSSL
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_crypto_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| static int
| win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| 	DWORD siglen = bufsize;
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_libc_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_libmd_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_libsystem_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_nettle_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_openssl_md5init(archive_md5_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_md5());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (ctx->digest)
|     EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_windowsapi_md5init(archive_md5_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_MD5));
| }
| 
| static int
| __archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_ripemd160());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_libc_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_libmd_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_nettle_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_openssl_sha1init(archive_sha1_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha1());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (ctx->digest)
|     EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA1));
| }
| 
| static int
| __archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_libc_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_libc2_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_libc3_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_libmd_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_nettle_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_openssl_sha256init(archive_sha256_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha256());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_256));
| }
| 
| static int
| __archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_libc_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_libc2_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_libc3_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_nettle_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_openssl_sha384init(archive_sha384_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha384());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_384));
| }
| 
| static int
| __archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_libc_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_libc2_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_libc3_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_libmd_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_nettle_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_openssl_sha512init(archive_sha512_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha512());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_512));
| }
| 
| static int
| __archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Crypto functions are set based on availability and by the following
|  * order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. OpenSSL
|  * 6. Windows API
|  */
| const struct archive_crypto __archive_crypto =
| {
| /* MD5 */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
|   &__archive_libc_md5init,
|   &__archive_libc_md5update,
|   &__archive_libc_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
|   &__archive_libmd_md5init,
|   &__archive_libmd_md5update,
|   &__archive_libmd_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
|   &__archive_libsystem_md5init,
|   &__archive_libsystem_md5update,
|   &__archive_libsystem_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
|   &__archive_nettle_md5init,
|   &__archive_nettle_md5update,
|   &__archive_nettle_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
|   &__archive_openssl_md5init,
|   &__archive_openssl_md5update,
|   &__archive_openssl_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
|   &__archive_windowsapi_md5init,
|   &__archive_windowsapi_md5update,
|   &__archive_windowsapi_md5final,
| #elif !defined(ARCHIVE_MD5_COMPILE_TEST)
|   &__archive_stub_md5init,
|   &__archive_stub_md5update,
|   &__archive_stub_md5final,
| #endif
| 
| /* RIPEMD160 */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
|   &__archive_libc_ripemd160init,
|   &__archive_libc_ripemd160update,
|   &__archive_libc_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
|   &__archive_libmd_ripemd160init,
|   &__archive_libmd_ripemd160update,
|   &__archive_libmd_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
|   &__archive_nettle_ripemd160init,
|   &__archive_nettle_ripemd160update,
|   &__archive_nettle_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
|   &__archive_openssl_ripemd160init,
|   &__archive_openssl_ripemd160update,
|   &__archive_openssl_ripemd160final,
| #elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
|   &__archive_stub_ripemd160init,
|   &__archive_stub_ripemd160update,
|   &__archive_stub_ripemd160final,
| #endif
| 
| /* SHA1 */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
|   &__archive_libc_sha1init,
|   &__archive_libc_sha1update,
|   &__archive_libc_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
|   &__archive_libmd_sha1init,
|   &__archive_libmd_sha1update,
|   &__archive_libmd_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
|   &__archive_libsystem_sha1init,
|   &__archive_libsystem_sha1update,
|   &__archive_libsystem_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
|   &__archive_nettle_sha1init,
|   &__archive_nettle_sha1update,
|   &__archive_nettle_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
|   &__archive_openssl_sha1init,
|   &__archive_openssl_sha1update,
|   &__archive_openssl_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
|   &__archive_windowsapi_sha1init,
|   &__archive_windowsapi_sha1update,
|   &__archive_windowsapi_sha1final,
| #elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
|   &__archive_stub_sha1init,
|   &__archive_stub_sha1update,
|   &__archive_stub_sha1final,
| #endif
| 
| /* SHA256 */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
|   &__archive_libc_sha256init,
|   &__archive_libc_sha256update,
|   &__archive_libc_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
|   &__archive_libc2_sha256init,
|   &__archive_libc2_sha256update,
|   &__archive_libc2_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
|   &__archive_libc3_sha256init,
|   &__archive_libc3_sha256update,
|   &__archive_libc3_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
|   &__archive_libmd_sha256init,
|   &__archive_libmd_sha256update,
|   &__archive_libmd_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
|   &__archive_libsystem_sha256init,
|   &__archive_libsystem_sha256update,
|   &__archive_libsystem_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
|   &__archive_nettle_sha256init,
|   &__archive_nettle_sha256update,
|   &__archive_nettle_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
|   &__archive_openssl_sha256init,
|   &__archive_openssl_sha256update,
|   &__archive_openssl_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
|   &__archive_windowsapi_sha256init,
|   &__archive_windowsapi_sha256update,
|   &__archive_windowsapi_sha256final,
| #elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
|   &__archive_stub_sha256init,
|   &__archive_stub_sha256update,
|   &__archive_stub_sha256final,
| #endif
| 
| /* SHA384 */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
|   &__archive_libc_sha384init,
|   &__archive_libc_sha384update,
|   &__archive_libc_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
|   &__archive_libc2_sha384init,
|   &__archive_libc2_sha384update,
|   &__archive_libc2_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
|   &__archive_libc3_sha384init,
|   &__archive_libc3_sha384update,
|   &__archive_libc3_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
|   &__archive_libsystem_sha384init,
|   &__archive_libsystem_sha384update,
|   &__archive_libsystem_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
|   &__archive_nettle_sha384init,
|   &__archive_nettle_sha384update,
|   &__archive_nettle_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
|   &__archive_openssl_sha384init,
|   &__archive_openssl_sha384update,
|   &__archive_openssl_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
|   &__archive_windowsapi_sha384init,
|   &__archive_windowsapi_sha384update,
|   &__archive_windowsapi_sha384final,
| #elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
|   &__archive_stub_sha384init,
|   &__archive_stub_sha384update,
|   &__archive_stub_sha384final,
| #endif
| 
| /* SHA512 */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
|   &__archive_libc_sha512init,
|   &__archive_libc_sha512update,
|   &__archive_libc_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
|   &__archive_libc2_sha512init,
|   &__archive_libc2_sha512update,
|   &__archive_libc2_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
|   &__archive_libc3_sha512init,
|   &__archive_libc3_sha512update,
|   &__archive_libc3_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
|   &__archive_libmd_sha512init,
|   &__archive_libmd_sha512update,
|   &__archive_libmd_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
|   &__archive_libsystem_sha512init,
|   &__archive_libsystem_sha512update,
|   &__archive_libsystem_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
|   &__archive_nettle_sha512init,
|   &__archive_nettle_sha512update,
|   &__archive_nettle_sha512final,
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
|   &__archive_openssl_sha512init,
|   &__archive_openssl_sha512update,
|   &__archive_openssl_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
|   &__archive_windowsapi_sha512init,
|   &__archive_windowsapi_sha512update,
|   &__archive_windowsapi_sha512final
| #elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
|   &__archive_stub_sha512init,
|   &__archive_stub_sha512update,
|   &__archive_stub_sha512final
| #endif
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_sha1_ctx ctx;
|   archive_sha1_init(&ctx);
|   archive_sha1_update(&ctx, *argv, argc);
|   archive_sha1_final(&ctx, NULL);
|   return 0;
| }
| 
configure:18094: result: no
configure:18111: checking support for ARCHIVE_CRYPTO_SHA256_OPENSSL
configure:18133: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g  -I. -I. -I./libarchive  conftest.c   -lcrypto >&5
conftest.c
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2061: syntax error : identifier '__la_read'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2059: syntax error : 'type'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2061: syntax error : identifier '__la_waitpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2146: syntax error : missing ')' before identifier 'wpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2061: syntax error : identifier 'wpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ','
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ')'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2061: syntax error : identifier '__la_write'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2059: syntax error : 'type'
./libarchive\archive_crypto_private.h(137) : fatal error C1083: Cannot open include file: 'openssl/evp.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
cl : Command line warning D9002 : ignoring unknown option '-lcrypto'
configure:18133: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| 
| #define ARCHIVE_SHA256_COMPILE_TEST
| #define ARCHIVE_CRYPTO_SHA256_OPENSSL
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_crypto_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| static int
| win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| 	DWORD siglen = bufsize;
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_libc_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_libmd_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_libsystem_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_nettle_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_openssl_md5init(archive_md5_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_md5());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (ctx->digest)
|     EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_windowsapi_md5init(archive_md5_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_MD5));
| }
| 
| static int
| __archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_ripemd160());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_libc_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_libmd_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_nettle_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_openssl_sha1init(archive_sha1_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha1());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (ctx->digest)
|     EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA1));
| }
| 
| static int
| __archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_libc_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_libc2_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_libc3_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_libmd_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_nettle_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_openssl_sha256init(archive_sha256_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha256());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_256));
| }
| 
| static int
| __archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_libc_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_libc2_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_libc3_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_nettle_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_openssl_sha384init(archive_sha384_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha384());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_384));
| }
| 
| static int
| __archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_libc_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_libc2_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_libc3_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_libmd_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_nettle_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_openssl_sha512init(archive_sha512_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha512());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_512));
| }
| 
| static int
| __archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Crypto functions are set based on availability and by the following
|  * order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. OpenSSL
|  * 6. Windows API
|  */
| const struct archive_crypto __archive_crypto =
| {
| /* MD5 */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
|   &__archive_libc_md5init,
|   &__archive_libc_md5update,
|   &__archive_libc_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
|   &__archive_libmd_md5init,
|   &__archive_libmd_md5update,
|   &__archive_libmd_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
|   &__archive_libsystem_md5init,
|   &__archive_libsystem_md5update,
|   &__archive_libsystem_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
|   &__archive_nettle_md5init,
|   &__archive_nettle_md5update,
|   &__archive_nettle_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
|   &__archive_openssl_md5init,
|   &__archive_openssl_md5update,
|   &__archive_openssl_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
|   &__archive_windowsapi_md5init,
|   &__archive_windowsapi_md5update,
|   &__archive_windowsapi_md5final,
| #elif !defined(ARCHIVE_MD5_COMPILE_TEST)
|   &__archive_stub_md5init,
|   &__archive_stub_md5update,
|   &__archive_stub_md5final,
| #endif
| 
| /* RIPEMD160 */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
|   &__archive_libc_ripemd160init,
|   &__archive_libc_ripemd160update,
|   &__archive_libc_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
|   &__archive_libmd_ripemd160init,
|   &__archive_libmd_ripemd160update,
|   &__archive_libmd_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
|   &__archive_nettle_ripemd160init,
|   &__archive_nettle_ripemd160update,
|   &__archive_nettle_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
|   &__archive_openssl_ripemd160init,
|   &__archive_openssl_ripemd160update,
|   &__archive_openssl_ripemd160final,
| #elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
|   &__archive_stub_ripemd160init,
|   &__archive_stub_ripemd160update,
|   &__archive_stub_ripemd160final,
| #endif
| 
| /* SHA1 */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
|   &__archive_libc_sha1init,
|   &__archive_libc_sha1update,
|   &__archive_libc_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
|   &__archive_libmd_sha1init,
|   &__archive_libmd_sha1update,
|   &__archive_libmd_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
|   &__archive_libsystem_sha1init,
|   &__archive_libsystem_sha1update,
|   &__archive_libsystem_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
|   &__archive_nettle_sha1init,
|   &__archive_nettle_sha1update,
|   &__archive_nettle_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
|   &__archive_openssl_sha1init,
|   &__archive_openssl_sha1update,
|   &__archive_openssl_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
|   &__archive_windowsapi_sha1init,
|   &__archive_windowsapi_sha1update,
|   &__archive_windowsapi_sha1final,
| #elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
|   &__archive_stub_sha1init,
|   &__archive_stub_sha1update,
|   &__archive_stub_sha1final,
| #endif
| 
| /* SHA256 */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
|   &__archive_libc_sha256init,
|   &__archive_libc_sha256update,
|   &__archive_libc_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
|   &__archive_libc2_sha256init,
|   &__archive_libc2_sha256update,
|   &__archive_libc2_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
|   &__archive_libc3_sha256init,
|   &__archive_libc3_sha256update,
|   &__archive_libc3_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
|   &__archive_libmd_sha256init,
|   &__archive_libmd_sha256update,
|   &__archive_libmd_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
|   &__archive_libsystem_sha256init,
|   &__archive_libsystem_sha256update,
|   &__archive_libsystem_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
|   &__archive_nettle_sha256init,
|   &__archive_nettle_sha256update,
|   &__archive_nettle_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
|   &__archive_openssl_sha256init,
|   &__archive_openssl_sha256update,
|   &__archive_openssl_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
|   &__archive_windowsapi_sha256init,
|   &__archive_windowsapi_sha256update,
|   &__archive_windowsapi_sha256final,
| #elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
|   &__archive_stub_sha256init,
|   &__archive_stub_sha256update,
|   &__archive_stub_sha256final,
| #endif
| 
| /* SHA384 */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
|   &__archive_libc_sha384init,
|   &__archive_libc_sha384update,
|   &__archive_libc_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
|   &__archive_libc2_sha384init,
|   &__archive_libc2_sha384update,
|   &__archive_libc2_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
|   &__archive_libc3_sha384init,
|   &__archive_libc3_sha384update,
|   &__archive_libc3_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
|   &__archive_libsystem_sha384init,
|   &__archive_libsystem_sha384update,
|   &__archive_libsystem_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
|   &__archive_nettle_sha384init,
|   &__archive_nettle_sha384update,
|   &__archive_nettle_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
|   &__archive_openssl_sha384init,
|   &__archive_openssl_sha384update,
|   &__archive_openssl_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
|   &__archive_windowsapi_sha384init,
|   &__archive_windowsapi_sha384update,
|   &__archive_windowsapi_sha384final,
| #elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
|   &__archive_stub_sha384init,
|   &__archive_stub_sha384update,
|   &__archive_stub_sha384final,
| #endif
| 
| /* SHA512 */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
|   &__archive_libc_sha512init,
|   &__archive_libc_sha512update,
|   &__archive_libc_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
|   &__archive_libc2_sha512init,
|   &__archive_libc2_sha512update,
|   &__archive_libc2_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
|   &__archive_libc3_sha512init,
|   &__archive_libc3_sha512update,
|   &__archive_libc3_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
|   &__archive_libmd_sha512init,
|   &__archive_libmd_sha512update,
|   &__archive_libmd_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
|   &__archive_libsystem_sha512init,
|   &__archive_libsystem_sha512update,
|   &__archive_libsystem_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
|   &__archive_nettle_sha512init,
|   &__archive_nettle_sha512update,
|   &__archive_nettle_sha512final,
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
|   &__archive_openssl_sha512init,
|   &__archive_openssl_sha512update,
|   &__archive_openssl_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
|   &__archive_windowsapi_sha512init,
|   &__archive_windowsapi_sha512update,
|   &__archive_windowsapi_sha512final
| #elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
|   &__archive_stub_sha512init,
|   &__archive_stub_sha512update,
|   &__archive_stub_sha512final
| #endif
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_sha256_ctx ctx;
|   archive_sha256_init(&ctx);
|   archive_sha256_update(&ctx, *argv, argc);
|   archive_sha256_final(&ctx, NULL);
|   return 0;
| }
| 
configure:18147: result: no
configure:18164: checking support for ARCHIVE_CRYPTO_SHA384_OPENSSL
configure:18186: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g  -I. -I. -I./libarchive  conftest.c   -lcrypto >&5
conftest.c
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2061: syntax error : identifier '__la_read'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2059: syntax error : 'type'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2061: syntax error : identifier '__la_waitpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2146: syntax error : missing ')' before identifier 'wpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2061: syntax error : identifier 'wpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ','
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ')'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2061: syntax error : identifier '__la_write'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2059: syntax error : 'type'
./libarchive\archive_crypto_private.h(137) : fatal error C1083: Cannot open include file: 'openssl/evp.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
cl : Command line warning D9002 : ignoring unknown option '-lcrypto'
configure:18186: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| 
| #define ARCHIVE_SHA384_COMPILE_TEST
| #define ARCHIVE_CRYPTO_SHA384_OPENSSL
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_crypto_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| static int
| win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| 	DWORD siglen = bufsize;
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_libc_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_libmd_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_libsystem_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_nettle_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_openssl_md5init(archive_md5_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_md5());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (ctx->digest)
|     EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_windowsapi_md5init(archive_md5_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_MD5));
| }
| 
| static int
| __archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_ripemd160());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_libc_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_libmd_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_nettle_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_openssl_sha1init(archive_sha1_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha1());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (ctx->digest)
|     EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA1));
| }
| 
| static int
| __archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_libc_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_libc2_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_libc3_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_libmd_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_nettle_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_openssl_sha256init(archive_sha256_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha256());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_256));
| }
| 
| static int
| __archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_libc_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_libc2_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_libc3_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_nettle_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_openssl_sha384init(archive_sha384_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha384());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_384));
| }
| 
| static int
| __archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_libc_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_libc2_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_libc3_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_libmd_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_nettle_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_openssl_sha512init(archive_sha512_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha512());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_512));
| }
| 
| static int
| __archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Crypto functions are set based on availability and by the following
|  * order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. OpenSSL
|  * 6. Windows API
|  */
| const struct archive_crypto __archive_crypto =
| {
| /* MD5 */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
|   &__archive_libc_md5init,
|   &__archive_libc_md5update,
|   &__archive_libc_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
|   &__archive_libmd_md5init,
|   &__archive_libmd_md5update,
|   &__archive_libmd_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
|   &__archive_libsystem_md5init,
|   &__archive_libsystem_md5update,
|   &__archive_libsystem_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
|   &__archive_nettle_md5init,
|   &__archive_nettle_md5update,
|   &__archive_nettle_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
|   &__archive_openssl_md5init,
|   &__archive_openssl_md5update,
|   &__archive_openssl_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
|   &__archive_windowsapi_md5init,
|   &__archive_windowsapi_md5update,
|   &__archive_windowsapi_md5final,
| #elif !defined(ARCHIVE_MD5_COMPILE_TEST)
|   &__archive_stub_md5init,
|   &__archive_stub_md5update,
|   &__archive_stub_md5final,
| #endif
| 
| /* RIPEMD160 */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
|   &__archive_libc_ripemd160init,
|   &__archive_libc_ripemd160update,
|   &__archive_libc_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
|   &__archive_libmd_ripemd160init,
|   &__archive_libmd_ripemd160update,
|   &__archive_libmd_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
|   &__archive_nettle_ripemd160init,
|   &__archive_nettle_ripemd160update,
|   &__archive_nettle_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
|   &__archive_openssl_ripemd160init,
|   &__archive_openssl_ripemd160update,
|   &__archive_openssl_ripemd160final,
| #elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
|   &__archive_stub_ripemd160init,
|   &__archive_stub_ripemd160update,
|   &__archive_stub_ripemd160final,
| #endif
| 
| /* SHA1 */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
|   &__archive_libc_sha1init,
|   &__archive_libc_sha1update,
|   &__archive_libc_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
|   &__archive_libmd_sha1init,
|   &__archive_libmd_sha1update,
|   &__archive_libmd_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
|   &__archive_libsystem_sha1init,
|   &__archive_libsystem_sha1update,
|   &__archive_libsystem_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
|   &__archive_nettle_sha1init,
|   &__archive_nettle_sha1update,
|   &__archive_nettle_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
|   &__archive_openssl_sha1init,
|   &__archive_openssl_sha1update,
|   &__archive_openssl_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
|   &__archive_windowsapi_sha1init,
|   &__archive_windowsapi_sha1update,
|   &__archive_windowsapi_sha1final,
| #elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
|   &__archive_stub_sha1init,
|   &__archive_stub_sha1update,
|   &__archive_stub_sha1final,
| #endif
| 
| /* SHA256 */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
|   &__archive_libc_sha256init,
|   &__archive_libc_sha256update,
|   &__archive_libc_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
|   &__archive_libc2_sha256init,
|   &__archive_libc2_sha256update,
|   &__archive_libc2_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
|   &__archive_libc3_sha256init,
|   &__archive_libc3_sha256update,
|   &__archive_libc3_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
|   &__archive_libmd_sha256init,
|   &__archive_libmd_sha256update,
|   &__archive_libmd_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
|   &__archive_libsystem_sha256init,
|   &__archive_libsystem_sha256update,
|   &__archive_libsystem_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
|   &__archive_nettle_sha256init,
|   &__archive_nettle_sha256update,
|   &__archive_nettle_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
|   &__archive_openssl_sha256init,
|   &__archive_openssl_sha256update,
|   &__archive_openssl_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
|   &__archive_windowsapi_sha256init,
|   &__archive_windowsapi_sha256update,
|   &__archive_windowsapi_sha256final,
| #elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
|   &__archive_stub_sha256init,
|   &__archive_stub_sha256update,
|   &__archive_stub_sha256final,
| #endif
| 
| /* SHA384 */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
|   &__archive_libc_sha384init,
|   &__archive_libc_sha384update,
|   &__archive_libc_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
|   &__archive_libc2_sha384init,
|   &__archive_libc2_sha384update,
|   &__archive_libc2_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
|   &__archive_libc3_sha384init,
|   &__archive_libc3_sha384update,
|   &__archive_libc3_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
|   &__archive_libsystem_sha384init,
|   &__archive_libsystem_sha384update,
|   &__archive_libsystem_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
|   &__archive_nettle_sha384init,
|   &__archive_nettle_sha384update,
|   &__archive_nettle_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
|   &__archive_openssl_sha384init,
|   &__archive_openssl_sha384update,
|   &__archive_openssl_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
|   &__archive_windowsapi_sha384init,
|   &__archive_windowsapi_sha384update,
|   &__archive_windowsapi_sha384final,
| #elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
|   &__archive_stub_sha384init,
|   &__archive_stub_sha384update,
|   &__archive_stub_sha384final,
| #endif
| 
| /* SHA512 */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
|   &__archive_libc_sha512init,
|   &__archive_libc_sha512update,
|   &__archive_libc_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
|   &__archive_libc2_sha512init,
|   &__archive_libc2_sha512update,
|   &__archive_libc2_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
|   &__archive_libc3_sha512init,
|   &__archive_libc3_sha512update,
|   &__archive_libc3_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
|   &__archive_libmd_sha512init,
|   &__archive_libmd_sha512update,
|   &__archive_libmd_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
|   &__archive_libsystem_sha512init,
|   &__archive_libsystem_sha512update,
|   &__archive_libsystem_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
|   &__archive_nettle_sha512init,
|   &__archive_nettle_sha512update,
|   &__archive_nettle_sha512final,
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
|   &__archive_openssl_sha512init,
|   &__archive_openssl_sha512update,
|   &__archive_openssl_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
|   &__archive_windowsapi_sha512init,
|   &__archive_windowsapi_sha512update,
|   &__archive_windowsapi_sha512final
| #elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
|   &__archive_stub_sha512init,
|   &__archive_stub_sha512update,
|   &__archive_stub_sha512final
| #endif
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_sha384_ctx ctx;
|   archive_sha384_init(&ctx);
|   archive_sha384_update(&ctx, *argv, argc);
|   archive_sha384_final(&ctx, NULL);
|   return 0;
| }
| 
configure:18200: result: no
configure:18217: checking support for ARCHIVE_CRYPTO_SHA512_OPENSSL
configure:18239: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g  -I. -I. -I./libarchive  conftest.c   -lcrypto >&5
conftest.c
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2061: syntax error : identifier '__la_read'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2059: syntax error : 'type'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2061: syntax error : identifier '__la_waitpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2146: syntax error : missing ')' before identifier 'wpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2061: syntax error : identifier 'wpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ','
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ')'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2061: syntax error : identifier '__la_write'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2059: syntax error : 'type'
./libarchive\archive_crypto_private.h(137) : fatal error C1083: Cannot open include file: 'openssl/evp.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
cl : Command line warning D9002 : ignoring unknown option '-lcrypto'
configure:18239: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| 
| #define ARCHIVE_SHA512_COMPILE_TEST
| #define ARCHIVE_CRYPTO_SHA512_OPENSSL
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_crypto_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| static int
| win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| 	DWORD siglen = bufsize;
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_libc_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_libmd_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_libsystem_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_nettle_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_openssl_md5init(archive_md5_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_md5());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (ctx->digest)
|     EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_windowsapi_md5init(archive_md5_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_MD5));
| }
| 
| static int
| __archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_ripemd160());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_libc_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_libmd_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_nettle_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_openssl_sha1init(archive_sha1_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha1());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (ctx->digest)
|     EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA1));
| }
| 
| static int
| __archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_libc_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_libc2_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_libc3_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_libmd_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_nettle_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_openssl_sha256init(archive_sha256_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha256());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_256));
| }
| 
| static int
| __archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_libc_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_libc2_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_libc3_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_nettle_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_openssl_sha384init(archive_sha384_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha384());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_384));
| }
| 
| static int
| __archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_libc_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_libc2_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_libc3_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_libmd_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_nettle_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_openssl_sha512init(archive_sha512_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha512());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_512));
| }
| 
| static int
| __archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Crypto functions are set based on availability and by the following
|  * order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. OpenSSL
|  * 6. Windows API
|  */
| const struct archive_crypto __archive_crypto =
| {
| /* MD5 */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
|   &__archive_libc_md5init,
|   &__archive_libc_md5update,
|   &__archive_libc_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
|   &__archive_libmd_md5init,
|   &__archive_libmd_md5update,
|   &__archive_libmd_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
|   &__archive_libsystem_md5init,
|   &__archive_libsystem_md5update,
|   &__archive_libsystem_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
|   &__archive_nettle_md5init,
|   &__archive_nettle_md5update,
|   &__archive_nettle_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
|   &__archive_openssl_md5init,
|   &__archive_openssl_md5update,
|   &__archive_openssl_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
|   &__archive_windowsapi_md5init,
|   &__archive_windowsapi_md5update,
|   &__archive_windowsapi_md5final,
| #elif !defined(ARCHIVE_MD5_COMPILE_TEST)
|   &__archive_stub_md5init,
|   &__archive_stub_md5update,
|   &__archive_stub_md5final,
| #endif
| 
| /* RIPEMD160 */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
|   &__archive_libc_ripemd160init,
|   &__archive_libc_ripemd160update,
|   &__archive_libc_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
|   &__archive_libmd_ripemd160init,
|   &__archive_libmd_ripemd160update,
|   &__archive_libmd_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
|   &__archive_nettle_ripemd160init,
|   &__archive_nettle_ripemd160update,
|   &__archive_nettle_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
|   &__archive_openssl_ripemd160init,
|   &__archive_openssl_ripemd160update,
|   &__archive_openssl_ripemd160final,
| #elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
|   &__archive_stub_ripemd160init,
|   &__archive_stub_ripemd160update,
|   &__archive_stub_ripemd160final,
| #endif
| 
| /* SHA1 */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
|   &__archive_libc_sha1init,
|   &__archive_libc_sha1update,
|   &__archive_libc_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
|   &__archive_libmd_sha1init,
|   &__archive_libmd_sha1update,
|   &__archive_libmd_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
|   &__archive_libsystem_sha1init,
|   &__archive_libsystem_sha1update,
|   &__archive_libsystem_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
|   &__archive_nettle_sha1init,
|   &__archive_nettle_sha1update,
|   &__archive_nettle_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
|   &__archive_openssl_sha1init,
|   &__archive_openssl_sha1update,
|   &__archive_openssl_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
|   &__archive_windowsapi_sha1init,
|   &__archive_windowsapi_sha1update,
|   &__archive_windowsapi_sha1final,
| #elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
|   &__archive_stub_sha1init,
|   &__archive_stub_sha1update,
|   &__archive_stub_sha1final,
| #endif
| 
| /* SHA256 */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
|   &__archive_libc_sha256init,
|   &__archive_libc_sha256update,
|   &__archive_libc_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
|   &__archive_libc2_sha256init,
|   &__archive_libc2_sha256update,
|   &__archive_libc2_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
|   &__archive_libc3_sha256init,
|   &__archive_libc3_sha256update,
|   &__archive_libc3_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
|   &__archive_libmd_sha256init,
|   &__archive_libmd_sha256update,
|   &__archive_libmd_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
|   &__archive_libsystem_sha256init,
|   &__archive_libsystem_sha256update,
|   &__archive_libsystem_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
|   &__archive_nettle_sha256init,
|   &__archive_nettle_sha256update,
|   &__archive_nettle_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
|   &__archive_openssl_sha256init,
|   &__archive_openssl_sha256update,
|   &__archive_openssl_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
|   &__archive_windowsapi_sha256init,
|   &__archive_windowsapi_sha256update,
|   &__archive_windowsapi_sha256final,
| #elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
|   &__archive_stub_sha256init,
|   &__archive_stub_sha256update,
|   &__archive_stub_sha256final,
| #endif
| 
| /* SHA384 */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
|   &__archive_libc_sha384init,
|   &__archive_libc_sha384update,
|   &__archive_libc_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
|   &__archive_libc2_sha384init,
|   &__archive_libc2_sha384update,
|   &__archive_libc2_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
|   &__archive_libc3_sha384init,
|   &__archive_libc3_sha384update,
|   &__archive_libc3_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
|   &__archive_libsystem_sha384init,
|   &__archive_libsystem_sha384update,
|   &__archive_libsystem_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
|   &__archive_nettle_sha384init,
|   &__archive_nettle_sha384update,
|   &__archive_nettle_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
|   &__archive_openssl_sha384init,
|   &__archive_openssl_sha384update,
|   &__archive_openssl_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
|   &__archive_windowsapi_sha384init,
|   &__archive_windowsapi_sha384update,
|   &__archive_windowsapi_sha384final,
| #elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
|   &__archive_stub_sha384init,
|   &__archive_stub_sha384update,
|   &__archive_stub_sha384final,
| #endif
| 
| /* SHA512 */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
|   &__archive_libc_sha512init,
|   &__archive_libc_sha512update,
|   &__archive_libc_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
|   &__archive_libc2_sha512init,
|   &__archive_libc2_sha512update,
|   &__archive_libc2_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
|   &__archive_libc3_sha512init,
|   &__archive_libc3_sha512update,
|   &__archive_libc3_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
|   &__archive_libmd_sha512init,
|   &__archive_libmd_sha512update,
|   &__archive_libmd_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
|   &__archive_libsystem_sha512init,
|   &__archive_libsystem_sha512update,
|   &__archive_libsystem_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
|   &__archive_nettle_sha512init,
|   &__archive_nettle_sha512update,
|   &__archive_nettle_sha512final,
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
|   &__archive_openssl_sha512init,
|   &__archive_openssl_sha512update,
|   &__archive_openssl_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
|   &__archive_windowsapi_sha512init,
|   &__archive_windowsapi_sha512update,
|   &__archive_windowsapi_sha512final
| #elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
|   &__archive_stub_sha512init,
|   &__archive_stub_sha512update,
|   &__archive_stub_sha512final
| #endif
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_sha512_ctx ctx;
|   archive_sha512_init(&ctx);
|   archive_sha512_update(&ctx, *argv, argc);
|   archive_sha512_final(&ctx, NULL);
|   return 0;
| }
| 
configure:18253: result: no
configure:18274: checking support for ARCHIVE_CRYPTO_MD5_LIBMD
configure:18296: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g  -I. -I. -I./libarchive  conftest.c   -lmd >&5
conftest.c
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2061: syntax error : identifier '__la_read'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2059: syntax error : 'type'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2061: syntax error : identifier '__la_waitpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2146: syntax error : missing ')' before identifier 'wpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2061: syntax error : identifier 'wpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ','
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ')'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2061: syntax error : identifier '__la_write'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2059: syntax error : 'type'
./libarchive\archive_crypto_private.h(91) : fatal error C1083: Cannot open include file: 'md5.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
cl : Command line warning D9002 : ignoring unknown option '-lmd'
configure:18296: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| 
| #define ARCHIVE_MD5_COMPILE_TEST
| #define ARCHIVE_CRYPTO_MD5_LIBMD
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_crypto_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| static int
| win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| 	DWORD siglen = bufsize;
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_libc_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_libmd_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_libsystem_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_nettle_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_openssl_md5init(archive_md5_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_md5());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (ctx->digest)
|     EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_windowsapi_md5init(archive_md5_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_MD5));
| }
| 
| static int
| __archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_ripemd160());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_libc_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_libmd_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_nettle_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_openssl_sha1init(archive_sha1_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha1());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (ctx->digest)
|     EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA1));
| }
| 
| static int
| __archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_libc_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_libc2_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_libc3_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_libmd_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_nettle_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_openssl_sha256init(archive_sha256_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha256());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_256));
| }
| 
| static int
| __archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_libc_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_libc2_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_libc3_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_nettle_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_openssl_sha384init(archive_sha384_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha384());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_384));
| }
| 
| static int
| __archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_libc_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_libc2_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_libc3_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_libmd_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_nettle_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_openssl_sha512init(archive_sha512_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha512());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_512));
| }
| 
| static int
| __archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Crypto functions are set based on availability and by the following
|  * order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. OpenSSL
|  * 6. Windows API
|  */
| const struct archive_crypto __archive_crypto =
| {
| /* MD5 */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
|   &__archive_libc_md5init,
|   &__archive_libc_md5update,
|   &__archive_libc_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
|   &__archive_libmd_md5init,
|   &__archive_libmd_md5update,
|   &__archive_libmd_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
|   &__archive_libsystem_md5init,
|   &__archive_libsystem_md5update,
|   &__archive_libsystem_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
|   &__archive_nettle_md5init,
|   &__archive_nettle_md5update,
|   &__archive_nettle_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
|   &__archive_openssl_md5init,
|   &__archive_openssl_md5update,
|   &__archive_openssl_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
|   &__archive_windowsapi_md5init,
|   &__archive_windowsapi_md5update,
|   &__archive_windowsapi_md5final,
| #elif !defined(ARCHIVE_MD5_COMPILE_TEST)
|   &__archive_stub_md5init,
|   &__archive_stub_md5update,
|   &__archive_stub_md5final,
| #endif
| 
| /* RIPEMD160 */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
|   &__archive_libc_ripemd160init,
|   &__archive_libc_ripemd160update,
|   &__archive_libc_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
|   &__archive_libmd_ripemd160init,
|   &__archive_libmd_ripemd160update,
|   &__archive_libmd_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
|   &__archive_nettle_ripemd160init,
|   &__archive_nettle_ripemd160update,
|   &__archive_nettle_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
|   &__archive_openssl_ripemd160init,
|   &__archive_openssl_ripemd160update,
|   &__archive_openssl_ripemd160final,
| #elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
|   &__archive_stub_ripemd160init,
|   &__archive_stub_ripemd160update,
|   &__archive_stub_ripemd160final,
| #endif
| 
| /* SHA1 */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
|   &__archive_libc_sha1init,
|   &__archive_libc_sha1update,
|   &__archive_libc_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
|   &__archive_libmd_sha1init,
|   &__archive_libmd_sha1update,
|   &__archive_libmd_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
|   &__archive_libsystem_sha1init,
|   &__archive_libsystem_sha1update,
|   &__archive_libsystem_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
|   &__archive_nettle_sha1init,
|   &__archive_nettle_sha1update,
|   &__archive_nettle_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
|   &__archive_openssl_sha1init,
|   &__archive_openssl_sha1update,
|   &__archive_openssl_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
|   &__archive_windowsapi_sha1init,
|   &__archive_windowsapi_sha1update,
|   &__archive_windowsapi_sha1final,
| #elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
|   &__archive_stub_sha1init,
|   &__archive_stub_sha1update,
|   &__archive_stub_sha1final,
| #endif
| 
| /* SHA256 */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
|   &__archive_libc_sha256init,
|   &__archive_libc_sha256update,
|   &__archive_libc_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
|   &__archive_libc2_sha256init,
|   &__archive_libc2_sha256update,
|   &__archive_libc2_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
|   &__archive_libc3_sha256init,
|   &__archive_libc3_sha256update,
|   &__archive_libc3_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
|   &__archive_libmd_sha256init,
|   &__archive_libmd_sha256update,
|   &__archive_libmd_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
|   &__archive_libsystem_sha256init,
|   &__archive_libsystem_sha256update,
|   &__archive_libsystem_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
|   &__archive_nettle_sha256init,
|   &__archive_nettle_sha256update,
|   &__archive_nettle_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
|   &__archive_openssl_sha256init,
|   &__archive_openssl_sha256update,
|   &__archive_openssl_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
|   &__archive_windowsapi_sha256init,
|   &__archive_windowsapi_sha256update,
|   &__archive_windowsapi_sha256final,
| #elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
|   &__archive_stub_sha256init,
|   &__archive_stub_sha256update,
|   &__archive_stub_sha256final,
| #endif
| 
| /* SHA384 */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
|   &__archive_libc_sha384init,
|   &__archive_libc_sha384update,
|   &__archive_libc_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
|   &__archive_libc2_sha384init,
|   &__archive_libc2_sha384update,
|   &__archive_libc2_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
|   &__archive_libc3_sha384init,
|   &__archive_libc3_sha384update,
|   &__archive_libc3_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
|   &__archive_libsystem_sha384init,
|   &__archive_libsystem_sha384update,
|   &__archive_libsystem_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
|   &__archive_nettle_sha384init,
|   &__archive_nettle_sha384update,
|   &__archive_nettle_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
|   &__archive_openssl_sha384init,
|   &__archive_openssl_sha384update,
|   &__archive_openssl_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
|   &__archive_windowsapi_sha384init,
|   &__archive_windowsapi_sha384update,
|   &__archive_windowsapi_sha384final,
| #elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
|   &__archive_stub_sha384init,
|   &__archive_stub_sha384update,
|   &__archive_stub_sha384final,
| #endif
| 
| /* SHA512 */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
|   &__archive_libc_sha512init,
|   &__archive_libc_sha512update,
|   &__archive_libc_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
|   &__archive_libc2_sha512init,
|   &__archive_libc2_sha512update,
|   &__archive_libc2_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
|   &__archive_libc3_sha512init,
|   &__archive_libc3_sha512update,
|   &__archive_libc3_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
|   &__archive_libmd_sha512init,
|   &__archive_libmd_sha512update,
|   &__archive_libmd_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
|   &__archive_libsystem_sha512init,
|   &__archive_libsystem_sha512update,
|   &__archive_libsystem_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
|   &__archive_nettle_sha512init,
|   &__archive_nettle_sha512update,
|   &__archive_nettle_sha512final,
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
|   &__archive_openssl_sha512init,
|   &__archive_openssl_sha512update,
|   &__archive_openssl_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
|   &__archive_windowsapi_sha512init,
|   &__archive_windowsapi_sha512update,
|   &__archive_windowsapi_sha512final
| #elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
|   &__archive_stub_sha512init,
|   &__archive_stub_sha512update,
|   &__archive_stub_sha512final
| #endif
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_md5_ctx ctx;
|   archive_md5_init(&ctx);
|   archive_md5_update(&ctx, *argv, argc);
|   archive_md5_final(&ctx, NULL);
|   return 0;
| }
| 
configure:18310: result: no
configure:18327: checking support for ARCHIVE_CRYPTO_RMD160_LIBMD
configure:18349: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g  -I. -I. -I./libarchive  conftest.c   -lmd >&5
conftest.c
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2061: syntax error : identifier '__la_read'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2059: syntax error : 'type'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2061: syntax error : identifier '__la_waitpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2146: syntax error : missing ')' before identifier 'wpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2061: syntax error : identifier 'wpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ','
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ')'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2061: syntax error : identifier '__la_write'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2059: syntax error : 'type'
./libarchive\archive_crypto_private.h(94) : fatal error C1083: Cannot open include file: 'ripemd.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
cl : Command line warning D9002 : ignoring unknown option '-lmd'
configure:18349: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| 
| #define ARCHIVE_RMD160_COMPILE_TEST
| #define ARCHIVE_CRYPTO_RMD160_LIBMD
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_crypto_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| static int
| win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| 	DWORD siglen = bufsize;
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_libc_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_libmd_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_libsystem_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_nettle_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_openssl_md5init(archive_md5_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_md5());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (ctx->digest)
|     EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_windowsapi_md5init(archive_md5_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_MD5));
| }
| 
| static int
| __archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_ripemd160());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_libc_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_libmd_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_nettle_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_openssl_sha1init(archive_sha1_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha1());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (ctx->digest)
|     EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA1));
| }
| 
| static int
| __archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_libc_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_libc2_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_libc3_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_libmd_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_nettle_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_openssl_sha256init(archive_sha256_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha256());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_256));
| }
| 
| static int
| __archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_libc_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_libc2_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_libc3_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_nettle_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_openssl_sha384init(archive_sha384_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha384());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_384));
| }
| 
| static int
| __archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_libc_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_libc2_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_libc3_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_libmd_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_nettle_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_openssl_sha512init(archive_sha512_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha512());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_512));
| }
| 
| static int
| __archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Crypto functions are set based on availability and by the following
|  * order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. OpenSSL
|  * 6. Windows API
|  */
| const struct archive_crypto __archive_crypto =
| {
| /* MD5 */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
|   &__archive_libc_md5init,
|   &__archive_libc_md5update,
|   &__archive_libc_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
|   &__archive_libmd_md5init,
|   &__archive_libmd_md5update,
|   &__archive_libmd_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
|   &__archive_libsystem_md5init,
|   &__archive_libsystem_md5update,
|   &__archive_libsystem_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
|   &__archive_nettle_md5init,
|   &__archive_nettle_md5update,
|   &__archive_nettle_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
|   &__archive_openssl_md5init,
|   &__archive_openssl_md5update,
|   &__archive_openssl_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
|   &__archive_windowsapi_md5init,
|   &__archive_windowsapi_md5update,
|   &__archive_windowsapi_md5final,
| #elif !defined(ARCHIVE_MD5_COMPILE_TEST)
|   &__archive_stub_md5init,
|   &__archive_stub_md5update,
|   &__archive_stub_md5final,
| #endif
| 
| /* RIPEMD160 */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
|   &__archive_libc_ripemd160init,
|   &__archive_libc_ripemd160update,
|   &__archive_libc_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
|   &__archive_libmd_ripemd160init,
|   &__archive_libmd_ripemd160update,
|   &__archive_libmd_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
|   &__archive_nettle_ripemd160init,
|   &__archive_nettle_ripemd160update,
|   &__archive_nettle_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
|   &__archive_openssl_ripemd160init,
|   &__archive_openssl_ripemd160update,
|   &__archive_openssl_ripemd160final,
| #elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
|   &__archive_stub_ripemd160init,
|   &__archive_stub_ripemd160update,
|   &__archive_stub_ripemd160final,
| #endif
| 
| /* SHA1 */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
|   &__archive_libc_sha1init,
|   &__archive_libc_sha1update,
|   &__archive_libc_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
|   &__archive_libmd_sha1init,
|   &__archive_libmd_sha1update,
|   &__archive_libmd_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
|   &__archive_libsystem_sha1init,
|   &__archive_libsystem_sha1update,
|   &__archive_libsystem_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
|   &__archive_nettle_sha1init,
|   &__archive_nettle_sha1update,
|   &__archive_nettle_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
|   &__archive_openssl_sha1init,
|   &__archive_openssl_sha1update,
|   &__archive_openssl_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
|   &__archive_windowsapi_sha1init,
|   &__archive_windowsapi_sha1update,
|   &__archive_windowsapi_sha1final,
| #elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
|   &__archive_stub_sha1init,
|   &__archive_stub_sha1update,
|   &__archive_stub_sha1final,
| #endif
| 
| /* SHA256 */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
|   &__archive_libc_sha256init,
|   &__archive_libc_sha256update,
|   &__archive_libc_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
|   &__archive_libc2_sha256init,
|   &__archive_libc2_sha256update,
|   &__archive_libc2_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
|   &__archive_libc3_sha256init,
|   &__archive_libc3_sha256update,
|   &__archive_libc3_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
|   &__archive_libmd_sha256init,
|   &__archive_libmd_sha256update,
|   &__archive_libmd_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
|   &__archive_libsystem_sha256init,
|   &__archive_libsystem_sha256update,
|   &__archive_libsystem_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
|   &__archive_nettle_sha256init,
|   &__archive_nettle_sha256update,
|   &__archive_nettle_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
|   &__archive_openssl_sha256init,
|   &__archive_openssl_sha256update,
|   &__archive_openssl_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
|   &__archive_windowsapi_sha256init,
|   &__archive_windowsapi_sha256update,
|   &__archive_windowsapi_sha256final,
| #elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
|   &__archive_stub_sha256init,
|   &__archive_stub_sha256update,
|   &__archive_stub_sha256final,
| #endif
| 
| /* SHA384 */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
|   &__archive_libc_sha384init,
|   &__archive_libc_sha384update,
|   &__archive_libc_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
|   &__archive_libc2_sha384init,
|   &__archive_libc2_sha384update,
|   &__archive_libc2_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
|   &__archive_libc3_sha384init,
|   &__archive_libc3_sha384update,
|   &__archive_libc3_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
|   &__archive_libsystem_sha384init,
|   &__archive_libsystem_sha384update,
|   &__archive_libsystem_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
|   &__archive_nettle_sha384init,
|   &__archive_nettle_sha384update,
|   &__archive_nettle_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
|   &__archive_openssl_sha384init,
|   &__archive_openssl_sha384update,
|   &__archive_openssl_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
|   &__archive_windowsapi_sha384init,
|   &__archive_windowsapi_sha384update,
|   &__archive_windowsapi_sha384final,
| #elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
|   &__archive_stub_sha384init,
|   &__archive_stub_sha384update,
|   &__archive_stub_sha384final,
| #endif
| 
| /* SHA512 */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
|   &__archive_libc_sha512init,
|   &__archive_libc_sha512update,
|   &__archive_libc_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
|   &__archive_libc2_sha512init,
|   &__archive_libc2_sha512update,
|   &__archive_libc2_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
|   &__archive_libc3_sha512init,
|   &__archive_libc3_sha512update,
|   &__archive_libc3_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
|   &__archive_libmd_sha512init,
|   &__archive_libmd_sha512update,
|   &__archive_libmd_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
|   &__archive_libsystem_sha512init,
|   &__archive_libsystem_sha512update,
|   &__archive_libsystem_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
|   &__archive_nettle_sha512init,
|   &__archive_nettle_sha512update,
|   &__archive_nettle_sha512final,
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
|   &__archive_openssl_sha512init,
|   &__archive_openssl_sha512update,
|   &__archive_openssl_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
|   &__archive_windowsapi_sha512init,
|   &__archive_windowsapi_sha512update,
|   &__archive_windowsapi_sha512final
| #elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
|   &__archive_stub_sha512init,
|   &__archive_stub_sha512update,
|   &__archive_stub_sha512final
| #endif
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_rmd160_ctx ctx;
|   archive_rmd160_init(&ctx);
|   archive_rmd160_update(&ctx, *argv, argc);
|   archive_rmd160_final(&ctx, NULL);
|   return 0;
| }
| 
configure:18363: result: no
configure:18380: checking support for ARCHIVE_CRYPTO_SHA1_LIBMD
configure:18402: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g  -I. -I. -I./libarchive  conftest.c   -lmd >&5
conftest.c
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2061: syntax error : identifier '__la_read'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2059: syntax error : 'type'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2061: syntax error : identifier '__la_waitpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2146: syntax error : missing ')' before identifier 'wpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2061: syntax error : identifier 'wpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ','
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ')'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2061: syntax error : identifier '__la_write'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2059: syntax error : 'type'
./libarchive\archive_crypto_private.h(97) : fatal error C1083: Cannot open include file: 'sha.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
cl : Command line warning D9002 : ignoring unknown option '-lmd'
configure:18402: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| 
| #define ARCHIVE_SHA1_COMPILE_TEST
| #define ARCHIVE_CRYPTO_SHA1_LIBMD
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_crypto_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| static int
| win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| 	DWORD siglen = bufsize;
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_libc_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_libmd_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_libsystem_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_nettle_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_openssl_md5init(archive_md5_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_md5());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (ctx->digest)
|     EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_windowsapi_md5init(archive_md5_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_MD5));
| }
| 
| static int
| __archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_ripemd160());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_libc_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_libmd_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_nettle_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_openssl_sha1init(archive_sha1_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha1());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (ctx->digest)
|     EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA1));
| }
| 
| static int
| __archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_libc_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_libc2_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_libc3_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_libmd_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_nettle_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_openssl_sha256init(archive_sha256_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha256());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_256));
| }
| 
| static int
| __archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_libc_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_libc2_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_libc3_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_nettle_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_openssl_sha384init(archive_sha384_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha384());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_384));
| }
| 
| static int
| __archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_libc_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_libc2_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_libc3_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_libmd_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_nettle_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_openssl_sha512init(archive_sha512_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha512());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_512));
| }
| 
| static int
| __archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Crypto functions are set based on availability and by the following
|  * order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. OpenSSL
|  * 6. Windows API
|  */
| const struct archive_crypto __archive_crypto =
| {
| /* MD5 */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
|   &__archive_libc_md5init,
|   &__archive_libc_md5update,
|   &__archive_libc_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
|   &__archive_libmd_md5init,
|   &__archive_libmd_md5update,
|   &__archive_libmd_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
|   &__archive_libsystem_md5init,
|   &__archive_libsystem_md5update,
|   &__archive_libsystem_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
|   &__archive_nettle_md5init,
|   &__archive_nettle_md5update,
|   &__archive_nettle_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
|   &__archive_openssl_md5init,
|   &__archive_openssl_md5update,
|   &__archive_openssl_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
|   &__archive_windowsapi_md5init,
|   &__archive_windowsapi_md5update,
|   &__archive_windowsapi_md5final,
| #elif !defined(ARCHIVE_MD5_COMPILE_TEST)
|   &__archive_stub_md5init,
|   &__archive_stub_md5update,
|   &__archive_stub_md5final,
| #endif
| 
| /* RIPEMD160 */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
|   &__archive_libc_ripemd160init,
|   &__archive_libc_ripemd160update,
|   &__archive_libc_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
|   &__archive_libmd_ripemd160init,
|   &__archive_libmd_ripemd160update,
|   &__archive_libmd_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
|   &__archive_nettle_ripemd160init,
|   &__archive_nettle_ripemd160update,
|   &__archive_nettle_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
|   &__archive_openssl_ripemd160init,
|   &__archive_openssl_ripemd160update,
|   &__archive_openssl_ripemd160final,
| #elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
|   &__archive_stub_ripemd160init,
|   &__archive_stub_ripemd160update,
|   &__archive_stub_ripemd160final,
| #endif
| 
| /* SHA1 */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
|   &__archive_libc_sha1init,
|   &__archive_libc_sha1update,
|   &__archive_libc_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
|   &__archive_libmd_sha1init,
|   &__archive_libmd_sha1update,
|   &__archive_libmd_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
|   &__archive_libsystem_sha1init,
|   &__archive_libsystem_sha1update,
|   &__archive_libsystem_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
|   &__archive_nettle_sha1init,
|   &__archive_nettle_sha1update,
|   &__archive_nettle_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
|   &__archive_openssl_sha1init,
|   &__archive_openssl_sha1update,
|   &__archive_openssl_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
|   &__archive_windowsapi_sha1init,
|   &__archive_windowsapi_sha1update,
|   &__archive_windowsapi_sha1final,
| #elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
|   &__archive_stub_sha1init,
|   &__archive_stub_sha1update,
|   &__archive_stub_sha1final,
| #endif
| 
| /* SHA256 */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
|   &__archive_libc_sha256init,
|   &__archive_libc_sha256update,
|   &__archive_libc_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
|   &__archive_libc2_sha256init,
|   &__archive_libc2_sha256update,
|   &__archive_libc2_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
|   &__archive_libc3_sha256init,
|   &__archive_libc3_sha256update,
|   &__archive_libc3_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
|   &__archive_libmd_sha256init,
|   &__archive_libmd_sha256update,
|   &__archive_libmd_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
|   &__archive_libsystem_sha256init,
|   &__archive_libsystem_sha256update,
|   &__archive_libsystem_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
|   &__archive_nettle_sha256init,
|   &__archive_nettle_sha256update,
|   &__archive_nettle_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
|   &__archive_openssl_sha256init,
|   &__archive_openssl_sha256update,
|   &__archive_openssl_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
|   &__archive_windowsapi_sha256init,
|   &__archive_windowsapi_sha256update,
|   &__archive_windowsapi_sha256final,
| #elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
|   &__archive_stub_sha256init,
|   &__archive_stub_sha256update,
|   &__archive_stub_sha256final,
| #endif
| 
| /* SHA384 */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
|   &__archive_libc_sha384init,
|   &__archive_libc_sha384update,
|   &__archive_libc_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
|   &__archive_libc2_sha384init,
|   &__archive_libc2_sha384update,
|   &__archive_libc2_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
|   &__archive_libc3_sha384init,
|   &__archive_libc3_sha384update,
|   &__archive_libc3_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
|   &__archive_libsystem_sha384init,
|   &__archive_libsystem_sha384update,
|   &__archive_libsystem_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
|   &__archive_nettle_sha384init,
|   &__archive_nettle_sha384update,
|   &__archive_nettle_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
|   &__archive_openssl_sha384init,
|   &__archive_openssl_sha384update,
|   &__archive_openssl_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
|   &__archive_windowsapi_sha384init,
|   &__archive_windowsapi_sha384update,
|   &__archive_windowsapi_sha384final,
| #elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
|   &__archive_stub_sha384init,
|   &__archive_stub_sha384update,
|   &__archive_stub_sha384final,
| #endif
| 
| /* SHA512 */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
|   &__archive_libc_sha512init,
|   &__archive_libc_sha512update,
|   &__archive_libc_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
|   &__archive_libc2_sha512init,
|   &__archive_libc2_sha512update,
|   &__archive_libc2_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
|   &__archive_libc3_sha512init,
|   &__archive_libc3_sha512update,
|   &__archive_libc3_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
|   &__archive_libmd_sha512init,
|   &__archive_libmd_sha512update,
|   &__archive_libmd_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
|   &__archive_libsystem_sha512init,
|   &__archive_libsystem_sha512update,
|   &__archive_libsystem_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
|   &__archive_nettle_sha512init,
|   &__archive_nettle_sha512update,
|   &__archive_nettle_sha512final,
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
|   &__archive_openssl_sha512init,
|   &__archive_openssl_sha512update,
|   &__archive_openssl_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
|   &__archive_windowsapi_sha512init,
|   &__archive_windowsapi_sha512update,
|   &__archive_windowsapi_sha512final
| #elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
|   &__archive_stub_sha512init,
|   &__archive_stub_sha512update,
|   &__archive_stub_sha512final
| #endif
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_sha1_ctx ctx;
|   archive_sha1_init(&ctx);
|   archive_sha1_update(&ctx, *argv, argc);
|   archive_sha1_final(&ctx, NULL);
|   return 0;
| }
| 
configure:18416: result: no
configure:18433: checking support for ARCHIVE_CRYPTO_SHA256_LIBMD
configure:18455: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g  -I. -I. -I./libarchive  conftest.c   -lmd >&5
conftest.c
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2061: syntax error : identifier '__la_read'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2059: syntax error : 'type'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2061: syntax error : identifier '__la_waitpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2146: syntax error : missing ')' before identifier 'wpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2061: syntax error : identifier 'wpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ','
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ')'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2061: syntax error : identifier '__la_write'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2059: syntax error : 'type'
./libarchive\archive_crypto_private.h(100) : fatal error C1083: Cannot open include file: 'sha256.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
cl : Command line warning D9002 : ignoring unknown option '-lmd'
configure:18455: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| 
| #define ARCHIVE_SHA256_COMPILE_TEST
| #define ARCHIVE_CRYPTO_SHA256_LIBMD
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_crypto_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| static int
| win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| 	DWORD siglen = bufsize;
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_libc_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_libmd_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_libsystem_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_nettle_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_openssl_md5init(archive_md5_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_md5());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (ctx->digest)
|     EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_windowsapi_md5init(archive_md5_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_MD5));
| }
| 
| static int
| __archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_ripemd160());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_libc_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_libmd_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_nettle_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_openssl_sha1init(archive_sha1_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha1());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (ctx->digest)
|     EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA1));
| }
| 
| static int
| __archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_libc_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_libc2_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_libc3_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_libmd_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_nettle_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_openssl_sha256init(archive_sha256_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha256());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_256));
| }
| 
| static int
| __archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_libc_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_libc2_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_libc3_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_nettle_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_openssl_sha384init(archive_sha384_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha384());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_384));
| }
| 
| static int
| __archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_libc_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_libc2_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_libc3_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_libmd_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_nettle_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_openssl_sha512init(archive_sha512_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha512());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_512));
| }
| 
| static int
| __archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Crypto functions are set based on availability and by the following
|  * order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. OpenSSL
|  * 6. Windows API
|  */
| const struct archive_crypto __archive_crypto =
| {
| /* MD5 */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
|   &__archive_libc_md5init,
|   &__archive_libc_md5update,
|   &__archive_libc_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
|   &__archive_libmd_md5init,
|   &__archive_libmd_md5update,
|   &__archive_libmd_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
|   &__archive_libsystem_md5init,
|   &__archive_libsystem_md5update,
|   &__archive_libsystem_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
|   &__archive_nettle_md5init,
|   &__archive_nettle_md5update,
|   &__archive_nettle_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
|   &__archive_openssl_md5init,
|   &__archive_openssl_md5update,
|   &__archive_openssl_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
|   &__archive_windowsapi_md5init,
|   &__archive_windowsapi_md5update,
|   &__archive_windowsapi_md5final,
| #elif !defined(ARCHIVE_MD5_COMPILE_TEST)
|   &__archive_stub_md5init,
|   &__archive_stub_md5update,
|   &__archive_stub_md5final,
| #endif
| 
| /* RIPEMD160 */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
|   &__archive_libc_ripemd160init,
|   &__archive_libc_ripemd160update,
|   &__archive_libc_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
|   &__archive_libmd_ripemd160init,
|   &__archive_libmd_ripemd160update,
|   &__archive_libmd_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
|   &__archive_nettle_ripemd160init,
|   &__archive_nettle_ripemd160update,
|   &__archive_nettle_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
|   &__archive_openssl_ripemd160init,
|   &__archive_openssl_ripemd160update,
|   &__archive_openssl_ripemd160final,
| #elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
|   &__archive_stub_ripemd160init,
|   &__archive_stub_ripemd160update,
|   &__archive_stub_ripemd160final,
| #endif
| 
| /* SHA1 */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
|   &__archive_libc_sha1init,
|   &__archive_libc_sha1update,
|   &__archive_libc_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
|   &__archive_libmd_sha1init,
|   &__archive_libmd_sha1update,
|   &__archive_libmd_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
|   &__archive_libsystem_sha1init,
|   &__archive_libsystem_sha1update,
|   &__archive_libsystem_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
|   &__archive_nettle_sha1init,
|   &__archive_nettle_sha1update,
|   &__archive_nettle_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
|   &__archive_openssl_sha1init,
|   &__archive_openssl_sha1update,
|   &__archive_openssl_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
|   &__archive_windowsapi_sha1init,
|   &__archive_windowsapi_sha1update,
|   &__archive_windowsapi_sha1final,
| #elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
|   &__archive_stub_sha1init,
|   &__archive_stub_sha1update,
|   &__archive_stub_sha1final,
| #endif
| 
| /* SHA256 */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
|   &__archive_libc_sha256init,
|   &__archive_libc_sha256update,
|   &__archive_libc_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
|   &__archive_libc2_sha256init,
|   &__archive_libc2_sha256update,
|   &__archive_libc2_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
|   &__archive_libc3_sha256init,
|   &__archive_libc3_sha256update,
|   &__archive_libc3_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
|   &__archive_libmd_sha256init,
|   &__archive_libmd_sha256update,
|   &__archive_libmd_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
|   &__archive_libsystem_sha256init,
|   &__archive_libsystem_sha256update,
|   &__archive_libsystem_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
|   &__archive_nettle_sha256init,
|   &__archive_nettle_sha256update,
|   &__archive_nettle_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
|   &__archive_openssl_sha256init,
|   &__archive_openssl_sha256update,
|   &__archive_openssl_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
|   &__archive_windowsapi_sha256init,
|   &__archive_windowsapi_sha256update,
|   &__archive_windowsapi_sha256final,
| #elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
|   &__archive_stub_sha256init,
|   &__archive_stub_sha256update,
|   &__archive_stub_sha256final,
| #endif
| 
| /* SHA384 */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
|   &__archive_libc_sha384init,
|   &__archive_libc_sha384update,
|   &__archive_libc_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
|   &__archive_libc2_sha384init,
|   &__archive_libc2_sha384update,
|   &__archive_libc2_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
|   &__archive_libc3_sha384init,
|   &__archive_libc3_sha384update,
|   &__archive_libc3_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
|   &__archive_libsystem_sha384init,
|   &__archive_libsystem_sha384update,
|   &__archive_libsystem_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
|   &__archive_nettle_sha384init,
|   &__archive_nettle_sha384update,
|   &__archive_nettle_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
|   &__archive_openssl_sha384init,
|   &__archive_openssl_sha384update,
|   &__archive_openssl_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
|   &__archive_windowsapi_sha384init,
|   &__archive_windowsapi_sha384update,
|   &__archive_windowsapi_sha384final,
| #elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
|   &__archive_stub_sha384init,
|   &__archive_stub_sha384update,
|   &__archive_stub_sha384final,
| #endif
| 
| /* SHA512 */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
|   &__archive_libc_sha512init,
|   &__archive_libc_sha512update,
|   &__archive_libc_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
|   &__archive_libc2_sha512init,
|   &__archive_libc2_sha512update,
|   &__archive_libc2_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
|   &__archive_libc3_sha512init,
|   &__archive_libc3_sha512update,
|   &__archive_libc3_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
|   &__archive_libmd_sha512init,
|   &__archive_libmd_sha512update,
|   &__archive_libmd_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
|   &__archive_libsystem_sha512init,
|   &__archive_libsystem_sha512update,
|   &__archive_libsystem_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
|   &__archive_nettle_sha512init,
|   &__archive_nettle_sha512update,
|   &__archive_nettle_sha512final,
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
|   &__archive_openssl_sha512init,
|   &__archive_openssl_sha512update,
|   &__archive_openssl_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
|   &__archive_windowsapi_sha512init,
|   &__archive_windowsapi_sha512update,
|   &__archive_windowsapi_sha512final
| #elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
|   &__archive_stub_sha512init,
|   &__archive_stub_sha512update,
|   &__archive_stub_sha512final
| #endif
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_sha256_ctx ctx;
|   archive_sha256_init(&ctx);
|   archive_sha256_update(&ctx, *argv, argc);
|   archive_sha256_final(&ctx, NULL);
|   return 0;
| }
| 
configure:18469: result: no
configure:18486: checking support for ARCHIVE_CRYPTO_SHA512_LIBMD
configure:18508: /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -o conftest.exe -g  -I. -I. -I./libarchive  conftest.c   -lmd >&5
conftest.c
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2061: syntax error : identifier '__la_read'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(249) : error C2059: syntax error : 'type'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2061: syntax error : identifier '__la_waitpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2146: syntax error : missing ')' before identifier 'wpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2061: syntax error : identifier 'wpid'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ','
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(251) : error C2059: syntax error : ')'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2061: syntax error : identifier '__la_write'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2059: syntax error : ';'
c:\issm-uci\trunk-jpl\externalpackages\bsdtar\src\libarchive\archive_windows.h(252) : error C2059: syntax error : 'type'
./libarchive\archive_crypto_private.h(103) : fatal error C1083: Cannot open include file: 'sha512.h': No such file or directory
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

cl : Command line warning D9035 : option 'o' has been deprecated and will be removed in a future release
cl : Command line warning D9002 : ignoring unknown option '-g'
cl : Command line warning D9002 : ignoring unknown option '-lmd'
configure:18508: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.0.3"
| #define PACKAGE_STRING "libarchive 3.0.3"
| #define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.0.3"
| #define LIBARCHIVE_VERSION_STRING "3.0.3"
| #define LIBARCHIVE_VERSION_NUMBER "3000003"
| #define BSDCPIO_VERSION_STRING "3.0.3"
| #define BSDTAR_VERSION_STRING "3.0.3"
| #define NO_MINUS_C_MINUS_O 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STDINT_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define LT_OBJDIR ".libs/"
| #define _WIN32_WINNT 0x0500
| #define WINVER 0x0500
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_IO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_UTIME_H 1
| #define HAVE_TIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_WINDOWS_H 1
| #define HAVE_WINCRYPT_H 1
| #define HAVE_WINIOCTL_H 1
| #define uid_t int
| #define gid_t int
| #define mode_t int
| #define id_t unsigned long
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 2
| #define HAVE_LSTAT_EMPTY_STRING_BUG 1
| #define HAVE_DECL_STRERROR_R 0
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_FSTAT 1
| #define HAVE_GETPID 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_SETLOCALE 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCPY_S 1
| #define HAVE_STRRCHR 1
| #define HAVE_TZSET 1
| #define HAVE_UTIME 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCPY 1
| #define HAVE__CTIME64_S 1
| #define HAVE__FSEEKI64 1
| #define HAVE__GET_TIMEZONE 1
| #define HAVE__LOCALTIME64_S 1
| #define HAVE__MKGMTIME64 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| 
| #define ARCHIVE_SHA512_COMPILE_TEST
| #define ARCHIVE_CRYPTO_SHA512_LIBMD
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_crypto_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| static int
| win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| 	DWORD siglen = bufsize;
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_libc_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_libmd_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_libsystem_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_nettle_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_openssl_md5init(archive_md5_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_md5());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (ctx->digest)
|     EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_windowsapi_md5init(archive_md5_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_MD5));
| }
| 
| static int
| __archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_ripemd160());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_libc_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_libmd_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_nettle_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_openssl_sha1init(archive_sha1_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha1());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (ctx->digest)
|     EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA1));
| }
| 
| static int
| __archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_libc_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_libc2_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_libc3_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_libmd_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_nettle_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_openssl_sha256init(archive_sha256_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha256());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_256));
| }
| 
| static int
| __archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_libc_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_libc2_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_libc3_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_nettle_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_openssl_sha384init(archive_sha384_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha384());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_384));
| }
| 
| static int
| __archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_libc_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_libc2_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_libc3_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_libmd_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_libsystem_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_nettle_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_openssl_sha512init(archive_sha512_ctx *ctx)
| {
|   EVP_DigestInit(ctx, EVP_sha512());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   EVP_DigestFinal(ctx, md, NULL);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_512));
| }
| 
| static int
| __archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_stub_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Crypto functions are set based on availability and by the following
|  * order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. OpenSSL
|  * 6. Windows API
|  */
| const struct archive_crypto __archive_crypto =
| {
| /* MD5 */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
|   &__archive_libc_md5init,
|   &__archive_libc_md5update,
|   &__archive_libc_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
|   &__archive_libmd_md5init,
|   &__archive_libmd_md5update,
|   &__archive_libmd_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
|   &__archive_libsystem_md5init,
|   &__archive_libsystem_md5update,
|   &__archive_libsystem_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
|   &__archive_nettle_md5init,
|   &__archive_nettle_md5update,
|   &__archive_nettle_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
|   &__archive_openssl_md5init,
|   &__archive_openssl_md5update,
|   &__archive_openssl_md5final,
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
|   &__archive_windowsapi_md5init,
|   &__archive_windowsapi_md5update,
|   &__archive_windowsapi_md5final,
| #elif !defined(ARCHIVE_MD5_COMPILE_TEST)
|   &__archive_stub_md5init,
|   &__archive_stub_md5update,
|   &__archive_stub_md5final,
| #endif
| 
| /* RIPEMD160 */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
|   &__archive_libc_ripemd160init,
|   &__archive_libc_ripemd160update,
|   &__archive_libc_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
|   &__archive_libmd_ripemd160init,
|   &__archive_libmd_ripemd160update,
|   &__archive_libmd_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
|   &__archive_nettle_ripemd160init,
|   &__archive_nettle_ripemd160update,
|   &__archive_nettle_ripemd160final,
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
|   &__archive_openssl_ripemd160init,
|   &__archive_openssl_ripemd160update,
|   &__archive_openssl_ripemd160final,
| #elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
|   &__archive_stub_ripemd160init,
|   &__archive_stub_ripemd160update,
|   &__archive_stub_ripemd160final,
| #endif
| 
| /* SHA1 */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
|   &__archive_libc_sha1init,
|   &__archive_libc_sha1update,
|   &__archive_libc_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
|   &__archive_libmd_sha1init,
|   &__archive_libmd_sha1update,
|   &__archive_libmd_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
|   &__archive_libsystem_sha1init,
|   &__archive_libsystem_sha1update,
|   &__archive_libsystem_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
|   &__archive_nettle_sha1init,
|   &__archive_nettle_sha1update,
|   &__archive_nettle_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
|   &__archive_openssl_sha1init,
|   &__archive_openssl_sha1update,
|   &__archive_openssl_sha1final,
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
|   &__archive_windowsapi_sha1init,
|   &__archive_windowsapi_sha1update,
|   &__archive_windowsapi_sha1final,
| #elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
|   &__archive_stub_sha1init,
|   &__archive_stub_sha1update,
|   &__archive_stub_sha1final,
| #endif
| 
| /* SHA256 */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
|   &__archive_libc_sha256init,
|   &__archive_libc_sha256update,
|   &__archive_libc_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
|   &__archive_libc2_sha256init,
|   &__archive_libc2_sha256update,
|   &__archive_libc2_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
|   &__archive_libc3_sha256init,
|   &__archive_libc3_sha256update,
|   &__archive_libc3_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
|   &__archive_libmd_sha256init,
|   &__archive_libmd_sha256update,
|   &__archive_libmd_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
|   &__archive_libsystem_sha256init,
|   &__archive_libsystem_sha256update,
|   &__archive_libsystem_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
|   &__archive_nettle_sha256init,
|   &__archive_nettle_sha256update,
|   &__archive_nettle_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
|   &__archive_openssl_sha256init,
|   &__archive_openssl_sha256update,
|   &__archive_openssl_sha256final,
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
|   &__archive_windowsapi_sha256init,
|   &__archive_windowsapi_sha256update,
|   &__archive_windowsapi_sha256final,
| #elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
|   &__archive_stub_sha256init,
|   &__archive_stub_sha256update,
|   &__archive_stub_sha256final,
| #endif
| 
| /* SHA384 */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
|   &__archive_libc_sha384init,
|   &__archive_libc_sha384update,
|   &__archive_libc_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
|   &__archive_libc2_sha384init,
|   &__archive_libc2_sha384update,
|   &__archive_libc2_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
|   &__archive_libc3_sha384init,
|   &__archive_libc3_sha384update,
|   &__archive_libc3_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
|   &__archive_libsystem_sha384init,
|   &__archive_libsystem_sha384update,
|   &__archive_libsystem_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
|   &__archive_nettle_sha384init,
|   &__archive_nettle_sha384update,
|   &__archive_nettle_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
|   &__archive_openssl_sha384init,
|   &__archive_openssl_sha384update,
|   &__archive_openssl_sha384final,
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
|   &__archive_windowsapi_sha384init,
|   &__archive_windowsapi_sha384update,
|   &__archive_windowsapi_sha384final,
| #elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
|   &__archive_stub_sha384init,
|   &__archive_stub_sha384update,
|   &__archive_stub_sha384final,
| #endif
| 
| /* SHA512 */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
|   &__archive_libc_sha512init,
|   &__archive_libc_sha512update,
|   &__archive_libc_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
|   &__archive_libc2_sha512init,
|   &__archive_libc2_sha512update,
|   &__archive_libc2_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
|   &__archive_libc3_sha512init,
|   &__archive_libc3_sha512update,
|   &__archive_libc3_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
|   &__archive_libmd_sha512init,
|   &__archive_libmd_sha512update,
|   &__archive_libmd_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
|   &__archive_libsystem_sha512init,
|   &__archive_libsystem_sha512update,
|   &__archive_libsystem_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
|   &__archive_nettle_sha512init,
|   &__archive_nettle_sha512update,
|   &__archive_nettle_sha512final,
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
|   &__archive_openssl_sha512init,
|   &__archive_openssl_sha512update,
|   &__archive_openssl_sha512final
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
|   &__archive_windowsapi_sha512init,
|   &__archive_windowsapi_sha512update,
|   &__archive_windowsapi_sha512final
| #elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
|   &__archive_stub_sha512init,
|   &__archive_stub_sha512update,
|   &__archive_stub_sha512final
| #endif
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_sha512_ctx ctx;
|   archive_sha512_init(&ctx);
|   archive_sha512_update(&ctx, *argv, argc);
|   archive_sha512_final(&ctx, NULL);
|   return 0;
| }
| 
configure:18522: result: no
configure:18689: creating ./config.status

## ---------------------- ##
## Running config.status. ##
## ---------------------- ##

This file was extended by libarchive config.status 3.0.3, which was
generated by GNU Autoconf 2.68.  Invocation command line was

  CONFIG_FILES    = 
  CONFIG_HEADERS  = 
  CONFIG_LINKS    = 
  CONFIG_COMMANDS = 
  $ ./config.status 

on WIN-IH1FCG0JVB1

config.status:1206: creating Makefile
config.status:1206: creating build/pkgconfig/libarchive.pc
config.status:1206: creating config.h
config.status:1435: executing depfiles commands
config.status:1435: executing libtool commands

## ---------------- ##
## Cache variables. ##
## ---------------- ##

ac_cv_build=i686-pc-cygwin
ac_cv_c_compiler_gnu=no
ac_cv_c_const=yes
ac_cv_c_int16_t=yes
ac_cv_c_int32_t=yes
ac_cv_c_int64_t=yes
ac_cv_c_uint16_t=yes
ac_cv_c_uint32_t=yes
ac_cv_c_uint64_t=yes
ac_cv_c_uint8_t=yes
ac_cv_env_CC_set=
ac_cv_env_CC_value=
ac_cv_env_CFLAGS_set=
ac_cv_env_CFLAGS_value=
ac_cv_env_CPPFLAGS_set=
ac_cv_env_CPPFLAGS_value=
ac_cv_env_CPP_set=
ac_cv_env_CPP_value=
ac_cv_env_LDFLAGS_set=
ac_cv_env_LDFLAGS_value=
ac_cv_env_LIBS_set=
ac_cv_env_LIBS_value=
ac_cv_env_build_alias_set=
ac_cv_env_build_alias_value=
ac_cv_env_host_alias_set=
ac_cv_env_host_alias_value=
ac_cv_env_target_alias_set=
ac_cv_env_target_alias_value=
ac_cv_exeext=.exe
ac_cv_func_CreateHardLinkA=yes
ac_cv_func__ctime64_s=yes
ac_cv_func__doprnt=no
ac_cv_func__fseeki64=yes
ac_cv_func__get_timezone=yes
ac_cv_func__localtime64_s=yes
ac_cv_func__mkgmtime64=yes
ac_cv_func_acl_create_entry=no
ac_cv_func_acl_get_link=no
ac_cv_func_acl_get_link_np=no
ac_cv_func_acl_get_perm=no
ac_cv_func_acl_get_perm_np=no
ac_cv_func_acl_init=no
ac_cv_func_acl_set_fd=no
ac_cv_func_acl_set_fd_np=no
ac_cv_func_acl_set_file=no
ac_cv_func_chflags=no
ac_cv_func_chown=no
ac_cv_func_chroot=no
ac_cv_func_ctime_r=no
ac_cv_func_cygwin_conv_path=no
ac_cv_func_extattr_get_file=no
ac_cv_func_extattr_list_file=no
ac_cv_func_extattr_set_fd=no
ac_cv_func_extattr_set_file=no
ac_cv_func_fchdir=no
ac_cv_func_fchflags=no
ac_cv_func_fchmod=no
ac_cv_func_fchown=no
ac_cv_func_fcntl=no
ac_cv_func_fdopendir=no
ac_cv_func_fgetea=no
ac_cv_func_fgetxattr=no
ac_cv_func_flistea=no
ac_cv_func_flistxattr=no
ac_cv_func_fork=no
ac_cv_func_fsetea=no
ac_cv_func_fsetxattr=no
ac_cv_func_fstat=yes
ac_cv_func_fstatat=no
ac_cv_func_fstatfs=no
ac_cv_func_fstatvfs=no
ac_cv_func_ftruncate=no
ac_cv_func_futimens=no
ac_cv_func_futimes=no
ac_cv_func_futimesat=no
ac_cv_func_getea=no
ac_cv_func_geteuid=no
ac_cv_func_getgrgid_r=no
ac_cv_func_getgrnam_r=no
ac_cv_func_getpid=yes
ac_cv_func_getpwnam_r=no
ac_cv_func_getpwuid_r=no
ac_cv_func_getvfsbyname=no
ac_cv_func_getxattr=no
ac_cv_func_gmtime_r=no
ac_cv_func_lchflags=no
ac_cv_func_lchmod=no
ac_cv_func_lchown=no
ac_cv_func_lgetea=no
ac_cv_func_lgetxattr=no
ac_cv_func_link=no
ac_cv_func_listea=no
ac_cv_func_listxattr=no
ac_cv_func_llistea=no
ac_cv_func_llistxattr=no
ac_cv_func_localtime_r=no
ac_cv_func_lsetea=no
ac_cv_func_lsetxattr=no
ac_cv_func_lstat=no
ac_cv_func_lstat_dereferences_slashed_symlink=no
ac_cv_func_lstat_empty_string_bug=yes
ac_cv_func_lutimes=no
ac_cv_func_mbrtowc=yes
ac_cv_func_mbsnrtowcs=no
ac_cv_func_memcmp_working=yes
ac_cv_func_memmove=yes
ac_cv_func_memset=yes
ac_cv_func_mkdir=yes
ac_cv_func_mkfifo=no
ac_cv_func_mknod=no
ac_cv_func_mkstemp=no
ac_cv_func_nl_langinfo=no
ac_cv_func_openat=no
ac_cv_func_pipe=no
ac_cv_func_poll=no
ac_cv_func_readlink=no
ac_cv_func_readlinkat=no
ac_cv_func_select=no
ac_cv_func_setenv=no
ac_cv_func_setlocale=yes
ac_cv_func_sigaction=no
ac_cv_func_stat_empty_string_bug=no
ac_cv_func_statfs=no
ac_cv_func_statvfs=no
ac_cv_func_strchr=yes
ac_cv_func_strdup=yes
ac_cv_func_strerror=yes
ac_cv_func_strerror_r=no
ac_cv_func_strerror_r_char_p=no
ac_cv_func_strftime=yes
ac_cv_func_strncpy_s=yes
ac_cv_func_strrchr=yes
ac_cv_func_symlink=no
ac_cv_func_timegm=no
ac_cv_func_tzset=yes
ac_cv_func_unsetenv=no
ac_cv_func_utime=yes
ac_cv_func_utimensat=no
ac_cv_func_utimes=no
ac_cv_func_vfork=no
ac_cv_func_vprintf=yes
ac_cv_func_wcrtomb=yes
ac_cv_func_wcscmp=yes
ac_cv_func_wcscpy=yes
ac_cv_func_wcslen=yes
ac_cv_func_wcsnrtombs=no
ac_cv_func_wctomb=yes
ac_cv_func_wmemcmp=no
ac_cv_func_wmemcpy=yes
ac_cv_have_decl_ACL_USER=no
ac_cv_have_decl_D_MD_ORDER=no
ac_cv_have_decl_EFTYPE=no
ac_cv_have_decl_EILSEQ=yes
ac_cv_have_decl_EXT2_IOC_GETFLAGS=no
ac_cv_have_decl_EXTATTR_NAMESPACE_USER=no
ac_cv_have_decl_INT64_MAX=yes
ac_cv_have_decl_INT64_MIN=yes
ac_cv_have_decl_SIZE_MAX=yes
ac_cv_have_decl_SSIZE_MAX=no
ac_cv_have_decl_UINT32_MAX=yes
ac_cv_have_decl_UINT64_MAX=yes
ac_cv_have_decl_strerror_r=no
ac_cv_header_acl_libacl_h=no
ac_cv_header_attr_xattr_h=no
ac_cv_header_bzlib_h=no
ac_cv_header_copyfile_h=no
ac_cv_header_ctype_h=yes
ac_cv_header_dirent_dirent_h=no
ac_cv_header_dirent_ndir_h=no
ac_cv_header_dirent_sys_dir_h=no
ac_cv_header_dirent_sys_ndir_h=no
ac_cv_header_dlfcn_h=no
ac_cv_header_errno_h=yes
ac_cv_header_expat_h=no
ac_cv_header_ext2fs_ext2_fs_h=no
ac_cv_header_fcntl_h=yes
ac_cv_header_grp_h=no
ac_cv_header_iconv_h=no
ac_cv_header_inttypes_h=no
ac_cv_header_io_h=yes
ac_cv_header_langinfo_h=no
ac_cv_header_libxml_xmlreader_h=no
ac_cv_header_libxml_xmlwriter_h=no
ac_cv_header_limits_h=yes
ac_cv_header_linux_fiemap_h=no
ac_cv_header_linux_fs_h=no
ac_cv_header_linux_magic_h=no
ac_cv_header_locale_h=yes
ac_cv_header_lzma_h=no
ac_cv_header_lzmadec_h=no
ac_cv_header_memory_h=yes
ac_cv_header_minix_config_h=no
ac_cv_header_paths_h=no
ac_cv_header_poll_h=no
ac_cv_header_pwd_h=no
ac_cv_header_regex_h=no
ac_cv_header_signal_h=yes
ac_cv_header_stdarg_h=yes
ac_cv_header_stdc=yes
ac_cv_header_stdint_h=yes
ac_cv_header_stdlib_h=yes
ac_cv_header_string_h=yes
ac_cv_header_strings_h=no
ac_cv_header_sys_acl_h=no
ac_cv_header_sys_cdefs_h=no
ac_cv_header_sys_ea_h=no
ac_cv_header_sys_extattr_h=no
ac_cv_header_sys_ioctl_h=no
ac_cv_header_sys_mkdev_h=no
ac_cv_header_sys_mount_h=no
ac_cv_header_sys_param_h=no
ac_cv_header_sys_poll_h=no
ac_cv_header_sys_select_h=no
ac_cv_header_sys_stat_h=yes
ac_cv_header_sys_statfs_h=no
ac_cv_header_sys_statvfs_h=no
ac_cv_header_sys_sysmacros_h=no
ac_cv_header_sys_time_h=no
ac_cv_header_sys_types_h=yes
ac_cv_header_sys_types_h_makedev=no
ac_cv_header_sys_utime_h=yes
ac_cv_header_sys_utsname_h=no
ac_cv_header_sys_vfs_h=no
ac_cv_header_sys_wait_h=no
ac_cv_header_sys_xattr_h=no
ac_cv_header_time=no
ac_cv_header_time_h=yes
ac_cv_header_unistd_h=no
ac_cv_header_utime_h=no
ac_cv_header_wchar_h=yes
ac_cv_header_wctype_h=yes
ac_cv_header_wincrypt_h=yes
ac_cv_header_windows_h=yes
ac_cv_header_winioctl_h=yes
ac_cv_header_zlib_h=no
ac_cv_host=i686-pc-cygwin
ac_cv_lib_acl_acl_get_file=no
ac_cv_lib_attr_setxattr=no
ac_cv_lib_bz2_BZ2_bzDecompressInit=no
ac_cv_lib_expat_XML_ParserCreate=no
ac_cv_lib_lzma_lzma_stream_decoder=no
ac_cv_lib_lzmadec_lzmadec_decode=no
ac_cv_lib_xml2_xmlInitParser=no
ac_cv_lib_z_inflate=no
ac_cv_member_struct_dirent_d_namlen=no
ac_cv_member_struct_stat_st_birthtime=no
ac_cv_member_struct_stat_st_birthtimespec_tv_nsec=no
ac_cv_member_struct_stat_st_blksize=no
ac_cv_member_struct_stat_st_flags=no
ac_cv_member_struct_stat_st_mtim_tv_nsec=no
ac_cv_member_struct_stat_st_mtime_n=no
ac_cv_member_struct_stat_st_mtime_usec=no
ac_cv_member_struct_stat_st_mtimespec_tv_nsec=no
ac_cv_member_struct_stat_st_umtime=no
ac_cv_member_struct_statfs_f_namemax=no
ac_cv_member_struct_tm___tm_gmtoff=no
ac_cv_member_struct_tm_tm_gmtoff=no
ac_cv_objext=obj
ac_cv_path_EGREP='/usr/bin/grep -E'
ac_cv_path_FGREP='/usr/bin/grep -F'
ac_cv_path_GREP=/usr/bin/grep
ac_cv_path_SED=/usr/bin/sed
ac_cv_path_install='/usr/bin/install -c'
ac_cv_path_mkdir=/usr/bin/mkdir
ac_cv_prog_AWK=gawk
ac_cv_prog_CPP='/cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -E'
ac_cv_prog_ac_ct_AR=ar
ac_cv_prog_ac_ct_AS=as
ac_cv_prog_ac_ct_CC=cl.exe
ac_cv_prog_ac_ct_DLLTOOL=dlltool
ac_cv_prog_ac_ct_MANIFEST_TOOL=mt
ac_cv_prog_ac_ct_OBJDUMP=objdump
ac_cv_prog_ac_ct_RANLIB=ranlib
ac_cv_prog_ac_ct_STRIP=strip
ac_cv_prog_cc_c89=
ac_cv_prog_cc_cl_exe_c_o=no
ac_cv_prog_cc_g=yes
ac_cv_prog_make_make_set=yes
ac_cv_safe_to_define___extensions__=yes
ac_cv_search_opendir=no
ac_cv_sizeof_wchar_t=2
ac_cv_sys_file_offset_bits=unknown
ac_cv_sys_large_files=unknown
ac_cv_sys_largefile_CC=no
ac_cv_sys_largefile_source=unknown
ac_cv_type_acl_permset_t=no
ac_cv_type_id_t=no
ac_cv_type_intmax_t=yes
ac_cv_type_long_long_int=yes
ac_cv_type_mode_t=no
ac_cv_type_off_t=yes
ac_cv_type_size_t=yes
ac_cv_type_uintmax_t=yes
ac_cv_type_uintptr_t=yes
ac_cv_type_unsigned_long_long=yes
ac_cv_type_unsigned_long_long_int=yes
ac_cv_type_wchar_t=yes
acl_cv_hardcode_direct=no
acl_cv_hardcode_libdir_flag_spec=' '
acl_cv_hardcode_libdir_separator=
acl_cv_hardcode_minus_L=no
acl_cv_libext=lib
acl_cv_libname_spec='lib$name'
acl_cv_library_names_spec='$libname.dll.a $libname.lib'
acl_cv_path_LD=/Bin/ld
acl_cv_prog_gnu_ld=yes
acl_cv_rpath=done
acl_cv_shlibext=dll
acl_cv_wl=
am_cv_CC_dependencies_compiler_type=none
am_cv_func_iconv='no, consider installing GNU libiconv'
am_cv_lib_iconv=no
la_cv_type_uid_t=no
lt_cv_ar_at_file=@
lt_cv_deplibs_check_method='file_magic ^x86 archive import|^x86 DLL'
lt_cv_file_magic_cmd=func_win32_libid
lt_cv_file_magic_test_file=
lt_cv_ld_reload_flag=-r
lt_cv_nm_interface='BSD nm'
lt_cv_objdir=.libs
lt_cv_path_LD=/Bin/ld
lt_cv_path_NM='/usr/bin/nm -B'
lt_cv_path_mainfest_tool=yes
lt_cv_prog_compiler_c_o=yes
lt_cv_prog_compiler_pic='-DDLL_EXPORT -DPIC'
lt_cv_prog_compiler_pic_works=yes
lt_cv_prog_compiler_static_works=yes
lt_cv_prog_gnu_ld=yes
lt_cv_sharedlib_from_linklib_cmd=func_cygming_dll_for_implib
lt_cv_sys_global_symbol_pipe=
lt_cv_sys_global_symbol_to_c_name_address='sed -n -e '\''s/^: \([^ ]*\)[ ]*$/  {\"\1\", (void *) 0},/p'\'' -e '\''s/^[ABCDGIRSTW]* \([^ ]*\) \([^ ]*\)$/  {"\2", (void *) \&\2},/p'\'''
lt_cv_sys_global_symbol_to_c_name_address_lib_prefix='sed -n -e '\''s/^: \([^ ]*\)[ ]*$/  {\"\1\", (void *) 0},/p'\'' -e '\''s/^[ABCDGIRSTW]* \([^ ]*\) \(lib[^ ]*\)$/  {"\2", (void *) \&\2},/p'\'' -e '\''s/^[ABCDGIRSTW]* \([^ ]*\) \([^ ]*\)$/  {"lib\2", (void *) \&\2},/p'\'''
lt_cv_sys_global_symbol_to_cdecl=
lt_cv_sys_max_cmd_len=8192
lt_cv_to_host_file_cmd=func_convert_file_noop
lt_cv_to_tool_file_cmd=func_convert_file_noop

## ----------------- ##
## Output variables. ##
## ----------------- ##

ACLOCAL='${SHELL} /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/missing --run aclocal-1.11'
AMDEPBACKSLASH='\'
AMDEP_FALSE='#'
AMDEP_TRUE=''
AMTAR='${SHELL} /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/missing --run tar'
AR='ar'
ARCHIVE_LIBTOOL_VERSION='12:3:0'
AS='as'
AUTOCONF='${SHELL} /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/missing --run autoconf'
AUTOHEADER='${SHELL} /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/missing --run autoheader'
AUTOMAKE='${SHELL} /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/missing --run automake-1.11'
AWK='gawk'
BSDCPIO_VERSION_STRING='3.0.3'
BSDTAR_VERSION_STRING='3.0.3'
BUILD_BSDCPIO_FALSE='#'
BUILD_BSDCPIO_TRUE=''
BUILD_BSDTAR_FALSE='#'
BUILD_BSDTAR_TRUE=''
CC='/cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe'
CCDEPMODE='depmode=none'
CFLAGS='-g'
CPP='/cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/compile cl.exe -E'
CPPFLAGS=''
CYGPATH_W='cygpath -w'
DEFS='-DHAVE_CONFIG_H'
DEPDIR='.deps'
DLLTOOL='dlltool'
DSYMUTIL=''
DUMPBIN=''
ECHO_C=''
ECHO_N='-n'
ECHO_T=''
EGREP='/usr/bin/grep -E'
EXEEXT='.exe'
FGREP='/usr/bin/grep -F'
GREP='/usr/bin/grep'
INC_CYGWIN_FILES_FALSE='#'
INC_CYGWIN_FILES_TRUE=''
INC_WINDOWS_FILES_FALSE=''
INC_WINDOWS_FILES_TRUE='#'
INSTALL_DATA='${INSTALL} -m 644'
INSTALL_PROGRAM='${INSTALL}'
INSTALL_SCRIPT='${INSTALL}'
INSTALL_STRIP_PROGRAM='$(install_sh) -c -s'
LD='/Bin/ld'
LDFLAGS=''
LIBARCHIVE_VERSION_NUMBER='3000003'
LIBARCHIVE_VERSION_STRING='3.0.3'
LIBICONV=''
LIBOBJS=' ${LIBOBJDIR}lstat$U.obj'
LIBS=' '
LIBTOOL='$(SHELL) $(top_builddir)/libtool'
LIPO=''
LN_S='ln -s'
LTLIBICONV=''
LTLIBOBJS=' ${LIBOBJDIR}lstat$U.lo'
MAKEINFO='${SHELL} /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/missing --run makeinfo'
MANIFEST_TOOL='mt'
MKDIR_P='/usr/bin/mkdir -p'
NM='/usr/bin/nm -B'
NMEDIT=''
OBJDUMP='objdump'
OBJEXT='obj'
OTOOL64=''
OTOOL=''
PACKAGE='libarchive'
PACKAGE_BUGREPORT='kientzle@FreeBSD.org'
PACKAGE_NAME='libarchive'
PACKAGE_STRING='libarchive 3.0.3'
PACKAGE_TARNAME='libarchive'
PACKAGE_URL=''
PACKAGE_VERSION='3.0.3'
PATH_SEPARATOR=':'
PLATFORMCPPFLAGS=''
RANLIB='ranlib'
SED='/usr/bin/sed'
SET_MAKE=''
SHELL='/bin/sh'
STATIC_BSDCPIO_FALSE='#'
STATIC_BSDCPIO_TRUE=''
STATIC_BSDTAR_FALSE='#'
STATIC_BSDTAR_TRUE=''
STRIP='strip'
VERSION='3.0.3'
XML2_CONFIG=''
ac_ct_AR='ar'
ac_ct_CC='cl.exe'
ac_ct_DUMPBIN=''
am__EXEEXT_FALSE='#'
am__EXEEXT_TRUE=''
am__fastdepCC_FALSE=''
am__fastdepCC_TRUE='#'
am__include='include'
am__isrc=''
am__leading_dot='.'
am__quote=''
am__tar='${AMTAR} chof - "$$tardir"'
am__untar='${AMTAR} xf -'
bindir='${exec_prefix}/bin'
build='i686-pc-cygwin'
build_alias=''
build_cpu='i686'
build_os='cygwin'
build_vendor='pc'
datadir='${datarootdir}'
datarootdir='${prefix}/share'
docdir='${datarootdir}/doc/${PACKAGE_TARNAME}'
dvidir='${docdir}'
exec_prefix='${prefix}'
host='i686-pc-cygwin'
host_alias=''
host_cpu='i686'
host_os='cygwin'
host_vendor='pc'
htmldir='${docdir}'
includedir='${prefix}/include'
infodir='${datarootdir}/info'
install_sh='${SHELL} /cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/src/build/autoconf/install-sh'
libdir='${exec_prefix}/lib'
libexecdir='${exec_prefix}/libexec'
localedir='${datarootdir}/locale'
localstatedir='${prefix}/var'
mandir='${datarootdir}/man'
mkdir_p='/usr/bin/mkdir -p'
oldincludedir='/usr/include'
pdfdir='${docdir}'
prefix='/cygdrive/c/issm-uci/trunk-jpl/externalpackages/bsdtar/install'
program_transform_name='s,x,x,'
psdir='${docdir}'
sbindir='${exec_prefix}/sbin'
sharedstatedir='${prefix}/com'
sysconfdir='${prefix}/etc'
target_alias=''

## ----------- ##
## confdefs.h. ##
## ----------- ##

/* confdefs.h */
#define PACKAGE_NAME "libarchive"
#define PACKAGE_TARNAME "libarchive"
#define PACKAGE_VERSION "3.0.3"
#define PACKAGE_STRING "libarchive 3.0.3"
#define PACKAGE_BUGREPORT "kientzle@FreeBSD.org"
#define PACKAGE_URL ""
#define PACKAGE "libarchive"
#define VERSION "3.0.3"
#define LIBARCHIVE_VERSION_STRING "3.0.3"
#define LIBARCHIVE_VERSION_NUMBER "3000003"
#define BSDCPIO_VERSION_STRING "3.0.3"
#define BSDTAR_VERSION_STRING "3.0.3"
#define NO_MINUS_C_MINUS_O 1
#define STDC_HEADERS 1
#define HAVE_SYS_TYPES_H 1
#define HAVE_SYS_STAT_H 1
#define HAVE_STDLIB_H 1
#define HAVE_STRING_H 1
#define HAVE_MEMORY_H 1
#define HAVE_STDINT_H 1
#define __EXTENSIONS__ 1
#define _ALL_SOURCE 1
#define _GNU_SOURCE 1
#define _POSIX_PTHREAD_SEMANTICS 1
#define _TANDEM_SOURCE 1
#define LT_OBJDIR ".libs/"
#define _WIN32_WINNT 0x0500
#define WINVER 0x0500
#define HAVE_CTYPE_H 1
#define HAVE_ERRNO_H 1
#define HAVE_FCNTL_H 1
#define HAVE_IO_H 1
#define HAVE_LIMITS_H 1
#define HAVE_LOCALE_H 1
#define HAVE_SIGNAL_H 1
#define HAVE_STDARG_H 1
#define HAVE_STDINT_H 1
#define HAVE_STDLIB_H 1
#define HAVE_STRING_H 1
#define HAVE_SYS_UTIME_H 1
#define HAVE_TIME_H 1
#define HAVE_WCHAR_H 1
#define HAVE_WCTYPE_H 1
#define HAVE_WINDOWS_H 1
#define HAVE_WINCRYPT_H 1
#define HAVE_WINIOCTL_H 1
#define uid_t int
#define gid_t int
#define mode_t int
#define id_t unsigned long
#define HAVE_UINTMAX_T 1
#define HAVE_UNSIGNED_LONG_LONG 1
#define HAVE_LONG_LONG_INT 1
#define HAVE_INTMAX_T 1
#define HAVE_UNSIGNED_LONG_LONG_INT 1
#define HAVE_UINTMAX_T 1
#define HAVE_DECL_SIZE_MAX 1
#define HAVE_DECL_INT64_MAX 1
#define HAVE_DECL_INT64_MIN 1
#define HAVE_DECL_UINT64_MAX 1
#define HAVE_DECL_UINT32_MAX 1
#define HAVE_EILSEQ 1
#define HAVE_WCHAR_T 1
#define SIZEOF_WCHAR_T 2
#define HAVE_LSTAT_EMPTY_STRING_BUG 1
#define HAVE_DECL_STRERROR_R 0
#define HAVE_STRFTIME 1
#define HAVE_VPRINTF 1
#define HAVE_FSTAT 1
#define HAVE_GETPID 1
#define HAVE_MBRTOWC 1
#define HAVE_MEMMOVE 1
#define HAVE_MEMSET 1
#define HAVE_MKDIR 1
#define HAVE_SETLOCALE 1
#define HAVE_STRCHR 1
#define HAVE_STRDUP 1
#define HAVE_STRERROR 1
#define HAVE_STRNCPY_S 1
#define HAVE_STRRCHR 1
#define HAVE_TZSET 1
#define HAVE_UTIME 1
#define HAVE_WCRTOMB 1
#define HAVE_WCSCMP 1
#define HAVE_WCSCPY 1
#define HAVE_WCSLEN 1
#define HAVE_WCTOMB 1
#define HAVE_WMEMCPY 1
#define HAVE__CTIME64_S 1
#define HAVE__FSEEKI64 1
#define HAVE__GET_TIMEZONE 1
#define HAVE__LOCALTIME64_S 1
#define HAVE__MKGMTIME64 1
#define HAVE_DECL_EXTATTR_NAMESPACE_USER 0

configure: exit 0
