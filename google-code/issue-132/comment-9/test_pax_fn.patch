diff -r 3560aee27736 libarchive/test/test_pax_filename_encoding_freebsd.c
--- a/libarchive/test/test_pax_filename_encoding_freebsd.c	Thu Mar 10 15:12:24 2011 +0900
+++ b/libarchive/test/test_pax_filename_encoding_freebsd.c	Thu Mar 10 04:21:30 2011 +0900
@@ -33,7 +33,8 @@
  * the KOI8-R locale.
  */
 
-DEFINE_TEST(test_pax_filename_encoding_freebsd)
+static void
+test_pax_filename_encoding_ru_RU()
 {
   	struct archive *a;
   	struct archive_entry *entry;
@@ -61,3 +62,43 @@
 	 * three characters (two bytes each) in UTF-8. */
 	assertEqualMem(buff + 512, "15 path=\xD0\xBF\xD1\x80\xD0\xB8\x0A", 15);
 }
+
+static void
+test_pax_filename_encoding_ja_JP()
+{
+  	struct archive *a;
+  	struct archive_entry *entry;
+	char buff[4096];
+	wchar_t ws[16];
+	size_t used;
+
+	if (NULL == setlocale(LC_ALL, "ja_JP.eucJP")) {
+		skipping("eucJP locale not available on this system.");
+		return;
+	}
+
+	a = archive_write_new();
+	assertEqualInt(ARCHIVE_OK, archive_write_set_format_pax(a));
+	assertEqualInt(ARCHIVE_OK, archive_write_open_memory(a, buff, sizeof(buff), &used));
+
+	entry = archive_entry_new();
+	archive_entry_set_pathname(entry, "\xC9\xBD.txt");
+	mbstowcs(ws, "\xC9\xBD.txt", 6);
+	assertEqualMem(ws, archive_entry_pathname_w(entry), wcslen(ws)*4);
+	archive_entry_set_filetype(entry, AE_IFREG);
+	archive_entry_set_size(entry, 0);
+	assertEqualInt(ARCHIVE_OK, archive_write_header(a, entry));
+	archive_entry_free(entry);
+	assertEqualInt(ARCHIVE_OK, archive_write_free(a));
+
+	/* Above three characters in eucJP should translate to the following
+	 * three characters (two bytes each) in UTF-8. */
+	assertEqualMem(buff + 512, "16 path=\xE8\xA1\xA8.txt\x0A", 16);
+
+}
+
+DEFINE_TEST(test_pax_filename_encoding_freebsd)
+{
+	test_pax_filename_encoding_ru_RU();
+	test_pax_filename_encoding_ja_JP();
+}
